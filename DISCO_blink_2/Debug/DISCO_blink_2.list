
DISCO_blink_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e194  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800e340  0800e340  0000f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3d0  0800e3d0  0001010c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e3d0  0800e3d0  0000f3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3d8  0800e3d8  0001010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3d8  0800e3d8  0000f3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3dc  0800e3dc  0000f3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  0800e3e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e8  2000010c  0800e4ec  0001010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024f4  0800e4ec  000104f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b11f  00000000  00000000  0001013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005623  00000000  00000000  0003b25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025c8  00000000  00000000  00040880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d43  00000000  00000000  00042e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033103  00000000  00000000  00044b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e905  00000000  00000000  00077c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a72c  00000000  00000000  000a6593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d0cbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2cc  00000000  00000000  001d0d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001dafd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000010c 	.word	0x2000010c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800e328 	.word	0x0800e328

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000110 	.word	0x20000110
 80001e8:	0800e328 	.word	0x0800e328

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fe29 	bl	8002172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f834 	bl	800058c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000524:	f000 f894 	bl	8000650 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fe40 	bl	80011ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800052c:	f000 f8c6 	bl	80006bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000530:	f000 f93c 	bl	80007ac <MX_ADC2_Init>
  MX_ADC3_Init();
 8000534:	f000 f99e 	bl	8000874 <MX_ADC3_Init>
  MX_DCMI_Init();
 8000538:	f000 fa00 	bl	800093c <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800053c:	f000 fa32 	bl	80009a4 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8000540:	f000 fd86 	bl	8001050 <MX_FMC_Init>
  MX_I2C1_Init();
 8000544:	f000 fa9a 	bl	8000a7c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000548:	f000 fad8 	bl	8000afc <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800054c:	f000 fb16 	bl	8000b7c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000550:	f000 fb42 	bl	8000bd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000554:	f000 fb70 	bl	8000c38 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8000558:	f000 fb9e 	bl	8000c98 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800055c:	f000 fc24 	bl	8000da8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000560:	f000 fcca 	bl	8000ef8 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000564:	f000 fcf8 	bl	8000f58 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000568:	f000 fd34 	bl	8000fd4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800056c:	f00d f8a6 	bl	800d6bc <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000570:	f000 fbbe 	bl	8000cf0 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000574:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000578:	4803      	ldr	r0, [pc, #12]	@ (8000588 <main+0x70>)
 800057a:	f003 fab7 	bl	8003aec <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800057e:	2064      	movs	r0, #100	@ 0x64
 8000580:	f001 fe6c 	bl	800225c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000584:	bf00      	nop
 8000586:	e7f5      	b.n	8000574 <main+0x5c>
 8000588:	48000400 	.word	0x48000400

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b096      	sub	sp, #88	@ 0x58
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2244      	movs	r2, #68	@ 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f00d fe98 	bl	800e2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005b2:	f004 fd9b 	bl	80050ec <HAL_PWREx_ControlVoltageScaling>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005bc:	f000 fed4 	bl	8001368 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c0:	f004 fd76 	bl	80050b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005c4:	4b21      	ldr	r3, [pc, #132]	@ (800064c <SystemClock_Config+0xc0>)
 80005c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005ca:	4a20      	ldr	r2, [pc, #128]	@ (800064c <SystemClock_Config+0xc0>)
 80005cc:	f023 0318 	bic.w	r3, r3, #24
 80005d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d4:	2314      	movs	r3, #20
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e4:	2360      	movs	r3, #96	@ 0x60
 80005e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ec:	2301      	movs	r3, #1
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005f4:	2328      	movs	r3, #40	@ 0x28
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fea7 	bl	800535c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000614:	f000 fea8 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2303      	movs	r3, #3
 800061e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	2104      	movs	r1, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f005 faad 	bl	8005b90 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800063c:	f000 fe94 	bl	8001368 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000640:	f006 fd7e 	bl	8007140 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000644:	bf00      	nop
 8000646:	3758      	adds	r7, #88	@ 0x58
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a4      	sub	sp, #144	@ 0x90
 8000654:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	228c      	movs	r2, #140	@ 0x8c
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f00d fe37 	bl	800e2d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <PeriphCommonClock_Config+0x64>)
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000666:	2300      	movs	r3, #0
 8000668:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800066a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800066e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000672:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000676:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000678:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800067c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800067e:	2301      	movs	r3, #1
 8000680:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000686:	2318      	movs	r3, #24
 8000688:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <PeriphCommonClock_Config+0x68>)
 8000698:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f005 fc9b 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fe5e 	bl	8001368 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3790      	adds	r7, #144	@ 0x90
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	00086800 	.word	0x00086800
 80006b8:	01110000 	.word	0x01110000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006de:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 80006e0:	4a30      	ldr	r2, [pc, #192]	@ (80007a4 <MX_ADC1_Init+0xe8>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006e4:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 80006e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f8:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000700:	2204      	movs	r2, #4
 8000702:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000704:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000706:	2200      	movs	r2, #0
 8000708:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 800070c:	2200      	movs	r2, #0
 800070e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000710:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000712:	2201      	movs	r2, #1
 8000714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	4817      	ldr	r0, [pc, #92]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000742:	f001 ff4f 	bl	80025e4 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800074c:	f000 fe0c 	bl	8001368 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 800075c:	f002 fcc8 	bl	80030f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000766:	f000 fdff 	bl	8001368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ADC1_Init+0xec>)
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	@ 0x7f
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_ADC1_Init+0xe4>)
 8000788:	f002 f880 	bl	800288c <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000792:	f000 fde9 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000128 	.word	0x20000128
 80007a4:	50040000 	.word	0x50040000
 80007a8:	10c00010 	.word	0x10c00010

080007ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007c4:	4a29      	ldr	r2, [pc, #164]	@ (800086c <MX_ADC2_Init+0xc0>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007ca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC2_Init+0xbc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC2_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_ADC2_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC2_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC2_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_ADC2_Init+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000824:	4810      	ldr	r0, [pc, #64]	@ (8000868 <MX_ADC2_Init+0xbc>)
 8000826:	f001 fedd 	bl	80025e4 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000830:	f000 fd9a 	bl	8001368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_ADC2_Init+0xc4>)
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2306      	movs	r3, #6
 800083a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000840:	237f      	movs	r3, #127	@ 0x7f
 8000842:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_ADC2_Init+0xbc>)
 8000852:	f002 f81b 	bl	800288c <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800085c:	f000 fd84 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000190 	.word	0x20000190
 800086c:	50040100 	.word	0x50040100
 8000870:	25b00200 	.word	0x25b00200

08000874 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800088a:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <MX_ADC3_Init+0xbc>)
 800088c:	4a29      	ldr	r2, [pc, #164]	@ (8000934 <MX_ADC3_Init+0xc0>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <MX_ADC3_Init+0xbc>)
 8000892:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000896:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000898:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <MX_ADC3_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008be:	2201      	movs	r2, #1
 80008c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ec:	4810      	ldr	r0, [pc, #64]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008ee:	f001 fe79 	bl	80025e4 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 80008f8:	f000 fd36 	bl	8001368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_ADC3_Init+0xc4>)
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2306      	movs	r3, #6
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	237f      	movs	r3, #127	@ 0x7f
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_ADC3_Init+0xbc>)
 800091a:	f001 ffb7 	bl	800288c <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000924:	f000 fd20 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001f8 	.word	0x200001f8
 8000934:	50040200 	.word	0x50040200
 8000938:	36902000 	.word	0x36902000

0800093c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_DCMI_Init+0x60>)
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <MX_DCMI_Init+0x64>)
 8000944:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_DCMI_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_DCMI_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_DCMI_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_DCMI_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_DCMI_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_DCMI_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_DCMI_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <MX_DCMI_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_DCMI_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <MX_DCMI_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_DCMI_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_DCMI_Init+0x60>)
 800098a:	f002 fd73 	bl	8003474 <HAL_DCMI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fce8 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000260 	.word	0x20000260
 80009a0:	50050000 	.word	0x50050000

080009a4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009a8:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009aa:	4a31      	ldr	r2, [pc, #196]	@ (8000a70 <MX_DFSDM1_Init+0xcc>)
 80009ac:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009bc:	2202      	movs	r2, #2
 80009be:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009d8:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009da:	2204      	movs	r2, #4
 80009dc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009f6:	481d      	ldr	r0, [pc, #116]	@ (8000a6c <MX_DFSDM1_Init+0xc8>)
 80009f8:	f002 fdc2 	bl	8003580 <HAL_DFSDM_ChannelInit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a02:	f000 fcb1 	bl	8001368 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <MX_DFSDM1_Init+0xd4>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a30:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000a56:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_DFSDM1_Init+0xd0>)
 8000a58:	f002 fd92 	bl	8003580 <HAL_DFSDM_ChannelInit>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000a62:	f000 fc81 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200002c4 	.word	0x200002c4
 8000a70:	40016020 	.word	0x40016020
 8000a74:	200002fc 	.word	0x200002fc
 8000a78:	40016040 	.word	0x40016040

08000a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <MX_I2C1_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <MX_I2C1_Init+0x7c>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000ab8:	f003 f832 	bl	8003b20 <HAL_I2C_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ac2:	f000 fc51 	bl	8001368 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000aca:	f003 f8c4 	bl	8003c56 <HAL_I2CEx_ConfigAnalogFilter>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 fc48 	bl	8001368 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_I2C1_Init+0x74>)
 8000adc:	f003 f906 	bl	8003cec <HAL_I2CEx_ConfigDigitalFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 fc3f 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000334 	.word	0x20000334
 8000af4:	40005400 	.word	0x40005400
 8000af8:	10d19ce4 	.word	0x10d19ce4

08000afc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <MX_I2C2_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b08:	4a1b      	ldr	r2, [pc, #108]	@ (8000b78 <MX_I2C2_Init+0x7c>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b38:	f002 fff2 	bl	8003b20 <HAL_I2C_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f000 fc11 	bl	8001368 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b4a:	f003 f884 	bl	8003c56 <HAL_I2CEx_ConfigAnalogFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f000 fc08 	bl	8001368 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_I2C2_Init+0x74>)
 8000b5c:	f003 f8c6 	bl	8003cec <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 fbff 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000388 	.word	0x20000388
 8000b74:	40005800 	.word	0x40005800
 8000b78:	10d19ce4 	.word	0x10d19ce4

08000b7c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	@ (8000bd0 <MX_LPUART1_UART_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <MX_LPUART1_UART_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b92:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_LPUART1_UART_Init+0x50>)
 8000bba:	f008 f88a 	bl	8008cd2 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 fbd0 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200003dc 	.word	0x200003dc
 8000bd0:	40008000 	.word	0x40008000
 8000bd4:	00033324 	.word	0x00033324

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <MX_USART1_UART_Init+0x5c>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000c04:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c08:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <MX_USART1_UART_Init+0x58>)
 8000c1e:	f008 f858 	bl	8008cd2 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000c28:	f000 fb9e 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000464 	.word	0x20000464
 8000c34:	40013800 	.word	0x40013800

08000c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c3e:	4a15      	ldr	r2, [pc, #84]	@ (8000c94 <MX_USART2_UART_Init+0x5c>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART2_UART_Init+0x58>)
 8000c7c:	f008 f829 	bl	8008cd2 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c86:	f000 fb6f 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200004ec 	.word	0x200004ec
 8000c94:	40004400 	.word	0x40004400

08000c98 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	@ (8000cec <MX_QUADSPI_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cb0:	2210      	movs	r2, #16
 8000cb2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cb6:	2217      	movs	r2, #23
 8000cb8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cd4:	f004 fa80 	bl	80051d8 <HAL_QSPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 fb43 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000574 	.word	0x20000574
 8000cec:	a0001000 	.word	0xa0001000

08000cf0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d0a:	4a26      	ldr	r2, [pc, #152]	@ (8000da4 <MX_RTC_Init+0xb4>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d0e:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d16:	227f      	movs	r2, #127	@ 0x7f
 8000d18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d1c:	22ff      	movs	r2, #255	@ 0xff
 8000d1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d38:	4819      	ldr	r0, [pc, #100]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d3a:	f006 fce1 	bl	8007700 <HAL_RTC_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 fb10 	bl	8001368 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	480f      	ldr	r0, [pc, #60]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d64:	f006 fd54 	bl	8007810 <HAL_RTC_SetTime>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000d6e:	f000 fafb 	bl	8001368 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d72:	2301      	movs	r3, #1
 8000d74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d76:	2301      	movs	r3, #1
 8000d78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_RTC_Init+0xb0>)
 8000d8a:	f006 fdde 	bl	800794a <HAL_RTC_SetDate>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d94:	f000 fae8 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200005c0 	.word	0x200005c0
 8000da4:	40002800 	.word	0x40002800

08000da8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000dac:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dae:	4a4e      	ldr	r2, [pc, #312]	@ (8000ee8 <MX_SAI1_Init+0x140>)
 8000db0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000db2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000db8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000dbe:	4b49      	ldr	r3, [pc, #292]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dc0:	2240      	movs	r2, #64	@ 0x40
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dca:	4b46      	ldr	r3, [pc, #280]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dd6:	4b43      	ldr	r3, [pc, #268]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000de2:	4b40      	ldr	r3, [pc, #256]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dea:	4a40      	ldr	r2, [pc, #256]	@ (8000eec <MX_SAI1_Init+0x144>)
 8000dec:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dee:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000df4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e00:	4b38      	ldr	r3, [pc, #224]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e06:	4b37      	ldr	r3, [pc, #220]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e12:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e18:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e3c:	4829      	ldr	r0, [pc, #164]	@ (8000ee4 <MX_SAI1_Init+0x13c>)
 8000e3e:	f006 fec1 	bl	8007bc4 <HAL_SAI_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000e48:	f000 fa8e 	bl	8001368 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e4e:	4a29      	ldr	r2, [pc, #164]	@ (8000ef4 <MX_SAI1_Init+0x14c>)
 8000e50:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e60:	2240      	movs	r2, #64	@ 0x40
 8000e62:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e64:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_SAI1_Init+0x148>)
 8000ed2:	f006 fe77 	bl	8007bc4 <HAL_SAI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000edc:	f000 fa44 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200005e4 	.word	0x200005e4
 8000ee8:	40015404 	.word	0x40015404
 8000eec:	0002ee00 	.word	0x0002ee00
 8000ef0:	20000668 	.word	0x20000668
 8000ef4:	40015424 	.word	0x40015424

08000ef8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <MX_SDMMC1_SD_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f1a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f28:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f2a:	f006 fff7 	bl	8007f1c <HAL_SD_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000f34:	f000 fa18 	bl	8001368 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000f38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_SDMMC1_SD_Init+0x58>)
 8000f3e:	f007 fa73 	bl	8008428 <HAL_SD_ConfigWideBusOperation>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_SDMMC1_SD_Init+0x54>
  {
    Error_Handler();
 8000f48:	f000 fa0e 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200006ec 	.word	0x200006ec
 8000f54:	40012800 	.word	0x40012800

08000f58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd0 <MX_SPI1_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f72:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f86:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fb8:	f007 fda0 	bl	8008afc <HAL_SPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f000 f9d1 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000770 	.word	0x20000770
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_SPI2_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	@ (800104c <MX_SPI2_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_SPI2_Init+0x74>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_SPI2_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI2_Init+0x74>)
 8000fee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI2_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <MX_SPI2_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI2_Init+0x74>)
 8001002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001006:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI2_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI2_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI2_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_SPI2_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI2_Init+0x74>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_SPI2_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI2_Init+0x74>)
 800102e:	2208      	movs	r2, #8
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_SPI2_Init+0x74>)
 8001034:	f007 fd62 	bl	8008afc <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 f993 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200007d4 	.word	0x200007d4
 800104c:	40003800 	.word	0x40003800

08001050 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2220      	movs	r2, #32
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f00d f937 	bl	800e2d0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001062:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <MX_FMC_Init+0x150>)
 8001064:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001068:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800106a:	4b4d      	ldr	r3, [pc, #308]	@ (80011a0 <MX_FMC_Init+0x150>)
 800106c:	4a4d      	ldr	r2, [pc, #308]	@ (80011a4 <MX_FMC_Init+0x154>)
 800106e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001070:	4b4b      	ldr	r3, [pc, #300]	@ (80011a0 <MX_FMC_Init+0x150>)
 8001072:	2202      	movs	r2, #2
 8001074:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001076:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <MX_FMC_Init+0x150>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800107c:	4b48      	ldr	r3, [pc, #288]	@ (80011a0 <MX_FMC_Init+0x150>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <MX_FMC_Init+0x150>)
 8001084:	2210      	movs	r2, #16
 8001086:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001088:	4b45      	ldr	r3, [pc, #276]	@ (80011a0 <MX_FMC_Init+0x150>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800108e:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <MX_FMC_Init+0x150>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001094:	4b42      	ldr	r3, [pc, #264]	@ (80011a0 <MX_FMC_Init+0x150>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800109a:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <MX_FMC_Init+0x150>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010a0:	4b3f      	ldr	r3, [pc, #252]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010a6:	4b3e      	ldr	r3, [pc, #248]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010ac:	4b3c      	ldr	r3, [pc, #240]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010b8:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010c4:	4b36      	ldr	r3, [pc, #216]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010ca:	230f      	movs	r3, #15
 80010cc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80010ce:	230f      	movs	r3, #15
 80010d0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80010d2:	23ff      	movs	r3, #255	@ 0xff
 80010d4:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80010d6:	230f      	movs	r3, #15
 80010d8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010da:	2310      	movs	r3, #16
 80010dc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010de:	2311      	movs	r3, #17
 80010e0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	482c      	ldr	r0, [pc, #176]	@ (80011a0 <MX_FMC_Init+0x150>)
 80010ee:	f007 fda8 	bl	8008c42 <HAL_SRAM_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80010f8:	f000 f936 	bl	8001368 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_FMC_Init+0x158>)
 80010fe:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001102:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001104:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001106:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <MX_FMC_Init+0x154>)
 8001108:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_FMC_Init+0x158>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_FMC_Init+0x158>)
 800111e:	2210      	movs	r2, #16
 8001120:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_FMC_Init+0x158>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001136:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_FMC_Init+0x158>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_FMC_Init+0x158>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001156:	2200      	movs	r2, #0
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_FMC_Init+0x158>)
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_FMC_Init+0x158>)
 8001162:	2200      	movs	r2, #0
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001166:	230f      	movs	r3, #15
 8001168:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800116a:	230f      	movs	r3, #15
 800116c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800116e:	23ff      	movs	r3, #255	@ 0xff
 8001170:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001172:	230f      	movs	r3, #15
 8001174:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001176:	2310      	movs	r3, #16
 8001178:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800117a:	2311      	movs	r3, #17
 800117c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <MX_FMC_Init+0x158>)
 800118a:	f007 fd5a 	bl	8008c42 <HAL_SRAM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001194:	f000 f8e8 	bl	8001368 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000838 	.word	0x20000838
 80011a4:	a0000104 	.word	0xa0000104
 80011a8:	20000888 	.word	0x20000888

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	@ 0x38
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c2:	4b65      	ldr	r3, [pc, #404]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a64      	ldr	r2, [pc, #400]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b62      	ldr	r3, [pc, #392]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a5e      	ldr	r2, [pc, #376]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b59      	ldr	r3, [pc, #356]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a58      	ldr	r2, [pc, #352]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b56      	ldr	r3, [pc, #344]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b50      	ldr	r3, [pc, #320]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001222:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a46      	ldr	r2, [pc, #280]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b44      	ldr	r3, [pc, #272]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001252:	f003 ffb1 	bl	80051b8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b40      	ldr	r3, [pc, #256]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a3f      	ldr	r2, [pc, #252]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b3d      	ldr	r3, [pc, #244]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b3a      	ldr	r3, [pc, #232]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a39      	ldr	r2, [pc, #228]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b37      	ldr	r3, [pc, #220]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a33      	ldr	r2, [pc, #204]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <MX_GPIO_Init+0x1ac>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a4:	482d      	ldr	r0, [pc, #180]	@ (800135c <MX_GPIO_Init+0x1b0>)
 80012a6:	f002 fc09 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012aa:	2340      	movs	r3, #64	@ 0x40
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012ba:	2303      	movs	r3, #3
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4826      	ldr	r0, [pc, #152]	@ (8001360 <MX_GPIO_Init+0x1b4>)
 80012c6:	f002 fa67 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80012ca:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012dc:	2303      	movs	r3, #3
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	481f      	ldr	r0, [pc, #124]	@ (8001364 <MX_GPIO_Init+0x1b8>)
 80012e8:	f002 fa56 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80012ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012fe:	2302      	movs	r3, #2
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	4814      	ldr	r0, [pc, #80]	@ (800135c <MX_GPIO_Init+0x1b0>)
 800130a:	f002 fa45 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800130e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001320:	230e      	movs	r3, #14
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132e:	f002 fa33 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001338:	2311      	movs	r3, #17
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_GPIO_Init+0x1b0>)
 800134c:	f002 fa24 	bl	8003798 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3738      	adds	r7, #56	@ 0x38
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	48000400 	.word	0x48000400
 8001360:	48002000 	.word	0x48002000
 8001364:	48001c00 	.word	0x48001c00

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <Error_Handler+0x8>

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <HAL_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6613      	str	r3, [r2, #96]	@ 0x60
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_MspInit+0x44>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	@ 0x58
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	@ 0x38
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a59      	ldr	r2, [pc, #356]	@ (8001540 <HAL_ADC_MspInit+0x184>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12d      	bne.n	800143a <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80013de:	4b59      	ldr	r3, [pc, #356]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 80013e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013e8:	4b56      	ldr	r3, [pc, #344]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10b      	bne.n	8001408 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013f0:	4b55      	ldr	r3, [pc, #340]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a54      	ldr	r2, [pc, #336]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 80013f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b52      	ldr	r3, [pc, #328]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b4f      	ldr	r3, [pc, #316]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	4a4e      	ldr	r2, [pc, #312]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001414:	4b4c      	ldr	r3, [pc, #304]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8001420:	2318      	movs	r3, #24
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4846      	ldr	r0, [pc, #280]	@ (800154c <HAL_ADC_MspInit+0x190>)
 8001434:	f002 f9b0 	bl	8003798 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001438:	e07e      	b.n	8001538 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a44      	ldr	r2, [pc, #272]	@ (8001550 <HAL_ADC_MspInit+0x194>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d146      	bne.n	80014d2 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001444:	4b3f      	ldr	r3, [pc, #252]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a3e      	ldr	r2, [pc, #248]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 800144c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800144e:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10b      	bne.n	800146e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001456:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a3b      	ldr	r2, [pc, #236]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 800145c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a35      	ldr	r2, [pc, #212]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a2f      	ldr	r2, [pc, #188]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800149e:	2303      	movs	r3, #3
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a2:	2303      	movs	r3, #3
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	4826      	ldr	r0, [pc, #152]	@ (800154c <HAL_ADC_MspInit+0x190>)
 80014b2:	f002 f971 	bl	8003798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 80014b6:	2312      	movs	r3, #18
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014cc:	f002 f964 	bl	8003798 <HAL_GPIO_Init>
}
 80014d0:	e032      	b.n	8001538 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001554 <HAL_ADC_MspInit+0x198>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d12d      	bne.n	8001538 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 80014dc:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 80014e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_ADC_MspInit+0x188>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_ADC_MspInit+0x18c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 800151e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4809      	ldr	r0, [pc, #36]	@ (8001558 <HAL_ADC_MspInit+0x19c>)
 8001534:	f002 f930 	bl	8003798 <HAL_GPIO_Init>
}
 8001538:	bf00      	nop
 800153a:	3738      	adds	r7, #56	@ 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	50040000 	.word	0x50040000
 8001544:	200008d8 	.word	0x200008d8
 8001548:	40021000 	.word	0x40021000
 800154c:	48000800 	.word	0x48000800
 8001550:	50040100 	.word	0x50040100
 8001554:	50040200 	.word	0x50040200
 8001558:	48001400 	.word	0x48001400

0800155c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <HAL_DCMI_MspInit+0xec>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d160      	bne.n	8001640 <HAL_DCMI_MspInit+0xe4>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	4a32      	ldr	r2, [pc, #200]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158a:	4b30      	ldr	r3, [pc, #192]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a2c      	ldr	r2, [pc, #176]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 800159c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015ae:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a26      	ldr	r2, [pc, #152]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a20      	ldr	r2, [pc, #128]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <HAL_DCMI_MspInit+0xf0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80015de:	f645 7320 	movw	r3, #24352	@ 0x5f20
 80015e2:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80015f0:	230a      	movs	r3, #10
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4815      	ldr	r0, [pc, #84]	@ (8001650 <HAL_DCMI_MspInit+0xf4>)
 80015fc:	f002 f8cc 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001600:	23b0      	movs	r3, #176	@ 0xb0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001610:	230a      	movs	r3, #10
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	480e      	ldr	r0, [pc, #56]	@ (8001654 <HAL_DCMI_MspInit+0xf8>)
 800161c:	f002 f8bc 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001620:	2320      	movs	r3, #32
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001630:	230a      	movs	r3, #10
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	@ (8001658 <HAL_DCMI_MspInit+0xfc>)
 800163c:	f002 f8ac 	bl	8003798 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001640:	bf00      	nop
 8001642:	3730      	adds	r7, #48	@ 0x30
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	50050000 	.word	0x50050000
 800164c:	40021000 	.word	0x40021000
 8001650:	48001c00 	.word	0x48001c00
 8001654:	48002000 	.word	0x48002000
 8001658:	48001000 	.word	0x48001000

0800165c <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0ae      	sub	sp, #184	@ 0xb8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	228c      	movs	r2, #140	@ 0x8c
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f00c fe27 	bl	800e2d0 <memset>
  if(DFSDM1_Init == 0)
 8001682:	4b36      	ldr	r3, [pc, #216]	@ (800175c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d163      	bne.n	8001752 <HAL_DFSDM_ChannelMspInit+0xf6>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800168a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fc9c 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80016a6:	f7ff fe5f 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a26      	ldr	r2, [pc, #152]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a20      	ldr	r2, [pc, #128]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <HAL_DFSDM_ChannelMspInit+0x104>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80016f2:	2384      	movs	r3, #132	@ 0x84
 80016f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800170a:	2306      	movs	r3, #6
 800170c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001714:	4619      	mov	r1, r3
 8001716:	4813      	ldr	r0, [pc, #76]	@ (8001764 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001718:	f002 f83e 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800171c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001720:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001736:	2306      	movs	r3, #6
 8001738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001740:	4619      	mov	r1, r3
 8001742:	4809      	ldr	r0, [pc, #36]	@ (8001768 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001744:	f002 f828 	bl	8003798 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <HAL_DFSDM_ChannelMspInit+0x100>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a03      	ldr	r2, [pc, #12]	@ (800175c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001750:	6013      	str	r3, [r2, #0]
  }

}
 8001752:	bf00      	nop
 8001754:	37b8      	adds	r7, #184	@ 0xb8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200008dc 	.word	0x200008dc
 8001760:	40021000 	.word	0x40021000
 8001764:	48000800 	.word	0x48000800
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b0      	sub	sp, #192	@ 0xc0
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	228c      	movs	r2, #140	@ 0x8c
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00c fd9f 	bl	800e2d0 <memset>
  if(hi2c->Instance==I2C1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a53      	ldr	r2, [pc, #332]	@ (80018e4 <HAL_I2C_MspInit+0x178>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d13c      	bne.n	8001816 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800179c:	2340      	movs	r3, #64	@ 0x40
 800179e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fc15 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017b4:	f7ff fdd8 	bl	8001368 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	4a4a      	ldr	r2, [pc, #296]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c4:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80017d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2301      	movs	r3, #1
 80017e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ea:	2304      	movs	r3, #4
 80017ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017f4:	4619      	mov	r1, r3
 80017f6:	483d      	ldr	r0, [pc, #244]	@ (80018ec <HAL_I2C_MspInit+0x180>)
 80017f8:	f001 ffce 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fc:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	4a39      	ldr	r2, [pc, #228]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001806:	6593      	str	r3, [r2, #88]	@ 0x58
 8001808:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001814:	e061      	b.n	80018da <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a35      	ldr	r2, [pc, #212]	@ (80018f0 <HAL_I2C_MspInit+0x184>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d15c      	bne.n	80018da <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001824:	2300      	movs	r3, #0
 8001826:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fbd3 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001838:	f7ff fd96 	bl	8001368 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	4a29      	ldr	r2, [pc, #164]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 8001842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001846:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800186c:	2310      	movs	r3, #16
 800186e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001884:	2304      	movs	r3, #4
 8001886:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800188e:	4619      	mov	r1, r3
 8001890:	4818      	ldr	r0, [pc, #96]	@ (80018f4 <HAL_I2C_MspInit+0x188>)
 8001892:	f001 ff81 	bl	8003798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001896:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800189a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b0:	2304      	movs	r3, #4
 80018b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018ba:	4619      	mov	r1, r3
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <HAL_I2C_MspInit+0x180>)
 80018be:	f001 ff6b 	bl	8003798 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80018c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_I2C_MspInit+0x17c>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	bf00      	nop
 80018dc:	37c0      	adds	r7, #192	@ 0xc0
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40005400 	.word	0x40005400
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	40005800 	.word	0x40005800
 80018f4:	48001c00 	.word	0x48001c00

080018f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0b2      	sub	sp, #200	@ 0xc8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001914:	228c      	movs	r2, #140	@ 0x8c
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00c fcd9 	bl	800e2d0 <memset>
  if(huart->Instance==LPUART1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a86      	ldr	r2, [pc, #536]	@ (8001b3c <HAL_UART_MspInit+0x244>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d13e      	bne.n	80019a6 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001928:	2320      	movs	r3, #32
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800192c:	2300      	movs	r3, #0
 800192e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001930:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fb4f 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001940:	f7ff fd12 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001944:	4b7e      	ldr	r3, [pc, #504]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001948:	4a7d      	ldr	r2, [pc, #500]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001950:	4b7b      	ldr	r3, [pc, #492]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800195c:	4b78      	ldr	r3, [pc, #480]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	4a77      	ldr	r2, [pc, #476]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001968:	4b75      	ldr	r3, [pc, #468]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8001974:	f003 fc20 	bl	80051b8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001978:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800197c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001992:	2308      	movs	r3, #8
 8001994:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001998:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800199c:	4619      	mov	r1, r3
 800199e:	4869      	ldr	r0, [pc, #420]	@ (8001b44 <HAL_UART_MspInit+0x24c>)
 80019a0:	f001 fefa 	bl	8003798 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a4:	e0c6      	b.n	8001b34 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a67      	ldr	r2, [pc, #412]	@ (8001b48 <HAL_UART_MspInit+0x250>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d15f      	bne.n	8001a70 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019b4:	2300      	movs	r3, #0
 80019b6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fb0b 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80019c8:	f7ff fcce 	bl	8001368 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d0:	4a5b      	ldr	r2, [pc, #364]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019d8:	4b59      	ldr	r3, [pc, #356]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	4b56      	ldr	r3, [pc, #344]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a55      	ldr	r2, [pc, #340]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b53      	ldr	r3, [pc, #332]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019fc:	4b50      	ldr	r3, [pc, #320]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a00:	4a4f      	ldr	r2, [pc, #316]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001a14:	f003 fbd0 	bl	80051b8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001a18:	2340      	movs	r3, #64	@ 0x40
 8001a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a30:	2307      	movs	r3, #7
 8001a32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4843      	ldr	r0, [pc, #268]	@ (8001b4c <HAL_UART_MspInit+0x254>)
 8001a3e:	f001 feab 	bl	8003798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001a42:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a62:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4836      	ldr	r0, [pc, #216]	@ (8001b44 <HAL_UART_MspInit+0x24c>)
 8001a6a:	f001 fe95 	bl	8003798 <HAL_GPIO_Init>
}
 8001a6e:	e061      	b.n	8001b34 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a36      	ldr	r2, [pc, #216]	@ (8001b50 <HAL_UART_MspInit+0x258>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d15c      	bne.n	8001b34 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 faa6 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001a92:	f7ff fc69 	bl	8001368 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a96:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	4a29      	ldr	r2, [pc, #164]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a23      	ldr	r2, [pc, #140]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_UART_MspInit+0x248>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001ade:	2340      	movs	r3, #64	@ 0x40
 8001ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af6:	2307      	movs	r3, #7
 8001af8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4814      	ldr	r0, [pc, #80]	@ (8001b54 <HAL_UART_MspInit+0x25c>)
 8001b04:	f001 fe48 	bl	8003798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b20:	2307      	movs	r3, #7
 8001b22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f001 fe32 	bl	8003798 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	37c8      	adds	r7, #200	@ 0xc8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40008000 	.word	0x40008000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48001800 	.word	0x48001800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	40004400 	.word	0x40004400
 8001b54:	48000c00 	.word	0x48000c00

08001b58 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <HAL_QSPI_MspInit+0xb8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d145      	bne.n	8001c06 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b7e:	4a25      	ldr	r2, [pc, #148]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6513      	str	r3, [r2, #80]	@ 0x50
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	4a1f      	ldr	r2, [pc, #124]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_QSPI_MspInit+0xbc>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001bc2:	f640 0303 	movw	r3, #2051	@ 0x803
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480e      	ldr	r0, [pc, #56]	@ (8001c18 <HAL_QSPI_MspInit+0xc0>)
 8001be0:	f001 fdda 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001be4:	23c8      	movs	r3, #200	@ 0xc8
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c02:	f001 fdc9 	bl	8003798 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	@ 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	a0001000 	.word	0xa0001000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400

08001c1c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0a6      	sub	sp, #152	@ 0x98
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	228c      	movs	r2, #140	@ 0x8c
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f00c fb4f 	bl	800e2d0 <memset>
  if(hrtc->Instance==RTC)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <HAL_RTC_MspInit+0x5c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d118      	bne.n	8001c6e <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c40:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 f9c2 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c5a:	f7ff fb85 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <HAL_RTC_MspInit+0x60>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c64:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <HAL_RTC_MspInit+0x60>)
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c6e:	bf00      	nop
 8001c70:	3798      	adds	r7, #152	@ 0x98
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40002800 	.word	0x40002800
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <HAL_SD_MspInit+0xb4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d144      	bne.n	8001d2c <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ca2:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca6:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cae:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_SD_MspInit+0xb8>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001cea:	2304      	movs	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	480d      	ldr	r0, [pc, #52]	@ (8001d3c <HAL_SD_MspInit+0xbc>)
 8001d06:	f001 fd47 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001d0a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d0e:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	@ (8001d40 <HAL_SD_MspInit+0xc0>)
 8001d28:	f001 fd36 	bl	8003798 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	@ 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40012800 	.word	0x40012800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000c00 	.word	0x48000c00
 8001d40:	48000800 	.word	0x48000800

08001d44 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	@ 0x38
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	@ (8001e90 <HAL_SPI_MspInit+0x14c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d146      	bne.n	8001df4 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d66:	4b4b      	ldr	r3, [pc, #300]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d72:	4b48      	ldr	r3, [pc, #288]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b45      	ldr	r3, [pc, #276]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a44      	ldr	r2, [pc, #272]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8a:	4b42      	ldr	r3, [pc, #264]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001dae:	2330      	movs	r3, #48	@ 0x30
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4833      	ldr	r0, [pc, #204]	@ (8001e98 <HAL_SPI_MspInit+0x154>)
 8001dca:	f001 fce5 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001dce:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de0:	2305      	movs	r3, #5
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dee:	f001 fcd3 	bl	8003798 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001df2:	e049      	b.n	8001e88 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a28      	ldr	r2, [pc, #160]	@ (8001e9c <HAL_SPI_MspInit+0x158>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d144      	bne.n	8001e88 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	4a24      	ldr	r2, [pc, #144]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e0a:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e16:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	4a18      	ldr	r2, [pc, #96]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_SPI_MspInit+0x150>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001e46:	2306      	movs	r3, #6
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e56:	2305      	movs	r3, #5
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480f      	ldr	r0, [pc, #60]	@ (8001ea0 <HAL_SPI_MspInit+0x15c>)
 8001e62:	f001 fc99 	bl	8003798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e78:	2305      	movs	r3, #5
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <HAL_SPI_MspInit+0x154>)
 8001e84:	f001 fc88 	bl	8003798 <HAL_GPIO_Init>
}
 8001e88:	bf00      	nop
 8001e8a:	3738      	adds	r7, #56	@ 0x38
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40013000 	.word	0x40013000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	40003800 	.word	0x40003800
 8001ea0:	48002000 	.word	0x48002000

08001ea4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_FMC_MspInit+0xc4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d14f      	bne.n	8001f60 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <HAL_FMC_MspInit+0xc4>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ec6:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <HAL_FMC_MspInit+0xc8>)
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eca:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <HAL_FMC_MspInit+0xc8>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <HAL_FMC_MspInit+0xc8>)
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8001ede:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ee2:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481d      	ldr	r0, [pc, #116]	@ (8001f70 <HAL_FMC_MspInit+0xcc>)
 8001efa:	f001 fc4d 	bl	8003798 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8001efe:	f240 233f 	movw	r3, #575	@ 0x23f
 8001f02:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f10:	230c      	movs	r3, #12
 8001f12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4816      	ldr	r0, [pc, #88]	@ (8001f74 <HAL_FMC_MspInit+0xd0>)
 8001f1a:	f001 fc3d 	bl	8003798 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8001f1e:	f64f 73b3 	movw	r3, #65459	@ 0xffb3
 8001f22:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f30:	230c      	movs	r3, #12
 8001f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	480f      	ldr	r0, [pc, #60]	@ (8001f78 <HAL_FMC_MspInit+0xd4>)
 8001f3a:	f001 fc2d 	bl	8003798 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001f3e:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001f42:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f50:	230c      	movs	r3, #12
 8001f52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <HAL_FMC_MspInit+0xd8>)
 8001f5a:	f001 fc1d 	bl	8003798 <HAL_GPIO_Init>
 8001f5e:	e000      	b.n	8001f62 <HAL_FMC_MspInit+0xbe>
    return;
 8001f60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200008e0 	.word	0x200008e0
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	48001000 	.word	0x48001000
 8001f74:	48001800 	.word	0x48001800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001400 	.word	0x48001400

08001f80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f88:	f7ff ff8c 	bl	8001ea4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a33      	ldr	r2, [pc, #204]	@ (8002070 <HAL_SAI_MspInit+0xdc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d135      	bne.n	8002012 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fa6:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_SAI_MspInit+0xe0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001fae:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <HAL_SAI_MspInit+0xe4>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <HAL_SAI_MspInit+0xe4>)
 8001fb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <HAL_SAI_MspInit+0xe4>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <HAL_SAI_MspInit+0xe0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a29      	ldr	r2, [pc, #164]	@ (8002074 <HAL_SAI_MspInit+0xe0>)
 8001fce:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001fd0:	2354      	movs	r3, #84	@ 0x54
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fe0:	230d      	movs	r3, #13
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4824      	ldr	r0, [pc, #144]	@ (800207c <HAL_SAI_MspInit+0xe8>)
 8001fec:	f001 fbd4 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002002:	230d      	movs	r3, #13
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	481c      	ldr	r0, [pc, #112]	@ (8002080 <HAL_SAI_MspInit+0xec>)
 800200e:	f001 fbc3 	bl	8003798 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <HAL_SAI_MspInit+0xf0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d124      	bne.n	8002066 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_SAI_MspInit+0xe0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_SAI_MspInit+0xe4>)
 8002026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <HAL_SAI_MspInit+0xe4>)
 800202a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800202e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_SAI_MspInit+0xe4>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800203c:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_SAI_MspInit+0xe0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a0c      	ldr	r2, [pc, #48]	@ (8002074 <HAL_SAI_MspInit+0xe0>)
 8002044:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002046:	2308      	movs	r3, #8
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002056:	230d      	movs	r3, #13
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4806      	ldr	r0, [pc, #24]	@ (800207c <HAL_SAI_MspInit+0xe8>)
 8002062:	f001 fb99 	bl	8003798 <HAL_GPIO_Init>

    }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40015404 	.word	0x40015404
 8002074:	200008e4 	.word	0x200008e4
 8002078:	40021000 	.word	0x40021000
 800207c:	48001000 	.word	0x48001000
 8002080:	48000400 	.word	0x48000400
 8002084:	40015424 	.word	0x40015424

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020de:	f000 f89d 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <OTG_FS_IRQHandler+0x10>)
 80020ee:	f001 ff87 	bl	8004000 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20001df0 	.word	0x20001df0

080020fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002124:	f7ff ffea 	bl	80020fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <LoopForever+0x6>)
  ldr r1, =_edata
 800212a:	490d      	ldr	r1, [pc, #52]	@ (8002160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LoopForever+0xe>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002140:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <LoopForever+0x16>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f00c f8c7 	bl	800e2e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002152:	f7fe f9e1 	bl	8000518 <main>

08002156 <LoopForever>:

LoopForever:
    b LoopForever
 8002156:	e7fe      	b.n	8002156 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002158:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002164:	0800e3e0 	.word	0x0800e3e0
  ldr r2, =_sbss
 8002168:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800216c:	200024f4 	.word	0x200024f4

08002170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC1_2_IRQHandler>

08002172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f001 f937 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f80e 	bl	80021a4 <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	71fb      	strb	r3, [r7, #7]
 8002192:	e001      	b.n	8002198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002194:	f7ff f8ee 	bl	8001374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002198:	79fb      	ldrb	r3, [r7, #7]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_InitTick+0x6c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d023      	beq.n	8002200 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021b8:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_InitTick+0x70>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_InitTick+0x6c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 f943 	bl	800345a <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d809      	bhi.n	80021f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f001 f90d 	bl	8003406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <HAL_InitTick+0x74>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e007      	b.n	8002204 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e004      	b.n	8002204 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e001      	b.n	8002204 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008
 8002240:	200008e8 	.word	0x200008e8

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	200008e8 	.word	0x200008e8

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008

080022a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3360      	adds	r3, #96	@ 0x60
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <LL_ADC_SetOffset+0x44>)
 800232e:	4013      	ands	r3, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	4313      	orrs	r3, r2
 800233c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	03fff000 	.word	0x03fff000

08002354 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3360      	adds	r3, #96	@ 0x60
 8002362:	461a      	mov	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3360      	adds	r3, #96	@ 0x60
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	615a      	str	r2, [r3, #20]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3330      	adds	r3, #48	@ 0x30
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	211f      	movs	r1, #31
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 011f 	and.w	r1, r3, #31
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3314      	adds	r3, #20
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0e5b      	lsrs	r3, r3, #25
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0d1b      	lsrs	r3, r3, #20
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2107      	movs	r1, #7
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	401a      	ands	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	0d1b      	lsrs	r3, r3, #20
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0318 	and.w	r3, r3, #24
 80024ae:	4908      	ldr	r1, [pc, #32]	@ (80024d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024b0:	40d9      	lsrs	r1, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	400b      	ands	r3, r1
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	0007ffff 	.word	0x0007ffff

080024d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6093      	str	r3, [r2, #8]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800250c:	d101      	bne.n	8002512 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002530:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002534:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800255c:	d101      	bne.n	8002562 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <LL_ADC_IsEnabled+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_ADC_IsEnabled+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d101      	bne.n	80025ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d101      	bne.n	80025d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e133      	b.n	8002866 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe fed5 	bl	80013bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff67 	bl	80024f8 <LL_ADC_IsDeepPowerDownEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff4d 	bl	80024d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff82 	bl	8002548 <LL_ADC_IsInternalRegulatorEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff66 	bl	8002520 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002654:	4b86      	ldr	r3, [pc, #536]	@ (8002870 <HAL_ADC_Init+0x28c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	4a86      	ldr	r2, [pc, #536]	@ (8002874 <HAL_ADC_Init+0x290>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002668:	e002      	b.n	8002670 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b01      	subs	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f9      	bne.n	800266a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff64 	bl	8002548 <LL_ADC_IsInternalRegulatorEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff75 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 80026ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80cc 	bne.w	8002854 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 80c8 	bne.w	8002854 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff49 	bl	8002570 <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e4:	4864      	ldr	r0, [pc, #400]	@ (8002878 <HAL_ADC_Init+0x294>)
 80026e6:	f7ff ff43 	bl	8002570 <LL_ADC_IsEnabled>
 80026ea:	4604      	mov	r4, r0
 80026ec:	4863      	ldr	r0, [pc, #396]	@ (800287c <HAL_ADC_Init+0x298>)
 80026ee:	f7ff ff3f 	bl	8002570 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	431c      	orrs	r4, r3
 80026f6:	4862      	ldr	r0, [pc, #392]	@ (8002880 <HAL_ADC_Init+0x29c>)
 80026f8:	f7ff ff3a 	bl	8002570 <LL_ADC_IsEnabled>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4323      	orrs	r3, r4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4619      	mov	r1, r3
 800270a:	485e      	ldr	r0, [pc, #376]	@ (8002884 <HAL_ADC_Init+0x2a0>)
 800270c:	f7ff fdca 	bl	80022a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7e5b      	ldrb	r3, [r3, #25]
 8002714:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800271a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002720:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002726:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d106      	bne.n	800274c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	045b      	lsls	r3, r3, #17
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b46      	ldr	r3, [pc, #280]	@ (8002888 <HAL_ADC_Init+0x2a4>)
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	430b      	orrs	r3, r1
 800277a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff1b 	bl	80025bc <LL_ADC_INJ_IsConversionOngoing>
 8002786:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d140      	bne.n	8002810 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13d      	bne.n	8002810 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7e1b      	ldrb	r3, [r3, #24]
 800279c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800279e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027b6:	f023 0306 	bic.w	r3, r3, #6
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d118      	bne.n	8002800 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027f0:	430a      	orrs	r2, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	e007      	b.n	8002810 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f023 010f 	bic.w	r1, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	1e5a      	subs	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002830:	e007      	b.n	8002842 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 020f 	bic.w	r2, r2, #15
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	659a      	str	r2, [r3, #88]	@ 0x58
 8002852:	e007      	b.n	8002864 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002864:	7ffb      	ldrb	r3, [r7, #31]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	20000000 	.word	0x20000000
 8002874:	053e2d63 	.word	0x053e2d63
 8002878:	50040000 	.word	0x50040000
 800287c:	50040100 	.word	0x50040100
 8002880:	50040200 	.word	0x50040200
 8002884:	50040300 	.word	0x50040300
 8002888:	fff0c007 	.word	0xfff0c007

0800288c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0b6      	sub	sp, #216	@ 0xd8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x22>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e3e3      	b.n	8003076 <HAL_ADC_ConfigChannel+0x7ea>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fe6b 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 83c4 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d824      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	3b02      	subs	r3, #2
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d81b      	bhi.n	800291a <HAL_ADC_ConfigChannel+0x8e>
 80028e2:	a201      	add	r2, pc, #4	@ (adr r2, 80028e8 <HAL_ADC_ConfigChannel+0x5c>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	08002901 	.word	0x08002901
 80028f0:	08002909 	.word	0x08002909
 80028f4:	08002911 	.word	0x08002911
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80028f8:	230c      	movs	r3, #12
 80028fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028fe:	e010      	b.n	8002922 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002900:	2312      	movs	r3, #18
 8002902:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002906:	e00c      	b.n	8002922 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002908:	2318      	movs	r3, #24
 800290a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800290e:	e008      	b.n	8002922 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002918:	e003      	b.n	8002922 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800291a:	2306      	movs	r3, #6
 800291c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002920:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002930:	f7ff fd54 	bl	80023dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe2c 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 800293e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fe38 	bl	80025bc <LL_ADC_INJ_IsConversionOngoing>
 800294c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 81bf 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800295a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 81ba 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800296c:	d10f      	bne.n	800298e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	4619      	mov	r1, r3
 800297a:	f7ff fd5b 	bl	8002434 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fd15 	bl	80023b6 <LL_ADC_SetSamplingTimeCommonConfig>
 800298c:	e00e      	b.n	80029ac <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	461a      	mov	r2, r3
 800299c:	f7ff fd4a 	bl	8002434 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fd05 	bl	80023b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00a      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029de:	f7ff fc95 	bl	800230c <LL_ADC_SetOffset>
 80029e2:	e179      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fcb2 	bl	8002354 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x184>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fca7 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	f003 021f 	and.w	r2, r3, #31
 8002a0e:	e01e      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x1c2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fc9c 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e004      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x1da>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	e018      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x20c>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e004      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d106      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fc6b 	bl	8002380 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fc4f 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x24a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc44 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	0e9b      	lsrs	r3, r3, #26
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	e01e      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x288>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fc39 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e004      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x2a0>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	e018      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x2d2>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e004      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d106      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fc08 	bl	8002380 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2102      	movs	r1, #2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fbec 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x310>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fbe1 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	e01e      	b.n	8002bda <HAL_ADC_ConfigChannel+0x34e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fbd6 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002bca:	2320      	movs	r3, #32
 8002bcc:	e004      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x366>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0e9b      	lsrs	r3, r3, #26
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	e014      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x390>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fba9 	bl	8002380 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2103      	movs	r1, #3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fb8d 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x3ce>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2103      	movs	r1, #3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fb82 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	e017      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x3fe>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2103      	movs	r1, #3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fb77 	bl	8002354 <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c74:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e003      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x416>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	e011      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x43a>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002cb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fb54 	bl	8002380 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fc47 	bl	8002570 <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 813f 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7ff fbc8 	bl	800248c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a8e      	ldr	r2, [pc, #568]	@ (8002f3c <HAL_ADC_ConfigChannel+0x6b0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f040 8130 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x4a4>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	bf94      	ite	ls
 8002d28:	2301      	movls	r3, #1
 8002d2a:	2300      	movhi	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e019      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x4d8>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	bf94      	ite	ls
 8002d5e:	2301      	movls	r3, #1
 8002d60:	2300      	movhi	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d079      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x4f8>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0e9b      	lsrs	r3, r3, #26
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d82:	e015      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x524>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d94:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	069b      	lsls	r3, r3, #26
 8002dac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x544>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	e017      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x574>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x59a>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	051b      	lsls	r3, r3, #20
 8002e24:	e018      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x5cc>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e003      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	e080      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x5ec>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	3301      	adds	r3, #1
 8002e70:	069b      	lsls	r3, r3, #26
 8002e72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e76:	e015      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x618>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x638>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	e017      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x668>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	ea42 0103 	orr.w	r1, r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x694>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	3b1e      	subs	r3, #30
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	e01d      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x6d0>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
  return result;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e005      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x6bc>
 8002f3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 021f 	and.w	r2, r3, #31
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	051b      	lsls	r3, r3, #20
 8002f58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7ff fa66 	bl	8002434 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b44      	ldr	r3, [pc, #272]	@ (8003080 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d07a      	beq.n	800306a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f74:	4843      	ldr	r0, [pc, #268]	@ (8003084 <HAL_ADC_ConfigChannel+0x7f8>)
 8002f76:	f7ff f9bb 	bl	80022f0 <LL_ADC_GetCommonPathInternalCh>
 8002f7a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a41      	ldr	r2, [pc, #260]	@ (8003088 <HAL_ADC_ConfigChannel+0x7fc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d12c      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d126      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3c      	ldr	r2, [pc, #240]	@ (800308c <HAL_ADC_ConfigChannel+0x800>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x71c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8003090 <HAL_ADC_ConfigChannel+0x804>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d15d      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4834      	ldr	r0, [pc, #208]	@ (8003084 <HAL_ADC_ConfigChannel+0x7f8>)
 8002fb4:	f7ff f989 	bl	80022ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb8:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_ADC_ConfigChannel+0x808>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	4a36      	ldr	r2, [pc, #216]	@ (8003098 <HAL_ADC_ConfigChannel+0x80c>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fd2:	e002      	b.n	8002fda <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f9      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe0:	e040      	b.n	8003064 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800309c <HAL_ADC_ConfigChannel+0x810>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d118      	bne.n	800301e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d112      	bne.n	800301e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	@ (800308c <HAL_ADC_ConfigChannel+0x800>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_ADC_ConfigChannel+0x780>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <HAL_ADC_ConfigChannel+0x804>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d12d      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003010:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003014:	4619      	mov	r1, r3
 8003016:	481b      	ldr	r0, [pc, #108]	@ (8003084 <HAL_ADC_ConfigChannel+0x7f8>)
 8003018:	f7ff f957 	bl	80022ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301c:	e024      	b.n	8003068 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <HAL_ADC_ConfigChannel+0x814>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d120      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11a      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <HAL_ADC_ConfigChannel+0x800>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d115      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003042:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003046:	4619      	mov	r1, r3
 8003048:	480e      	ldr	r0, [pc, #56]	@ (8003084 <HAL_ADC_ConfigChannel+0x7f8>)
 800304a:	f7ff f93e 	bl	80022ca <LL_ADC_SetCommonPathInternalCh>
 800304e:	e00c      	b.n	800306a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003062:	e002      	b.n	800306a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003068:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003072:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003076:	4618      	mov	r0, r3
 8003078:	37d8      	adds	r7, #216	@ 0xd8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	80080000 	.word	0x80080000
 8003084:	50040300 	.word	0x50040300
 8003088:	c7520000 	.word	0xc7520000
 800308c:	50040000 	.word	0x50040000
 8003090:	50040200 	.word	0x50040200
 8003094:	20000000 	.word	0x20000000
 8003098:	053e2d63 	.word	0x053e2d63
 800309c:	cb840000 	.word	0xcb840000
 80030a0:	80000001 	.word	0x80000001

080030a4 <LL_ADC_IsEnabled>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <LL_ADC_IsEnabled+0x18>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <LL_ADC_IsEnabled+0x1a>
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_ADC_REG_IsConversionOngoing>:
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d101      	bne.n	80030e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b0a1      	sub	sp, #132	@ 0x84
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800310a:	2302      	movs	r3, #2
 800310c:	e093      	b.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003116:	2300      	movs	r3, #0
 8003118:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800311a:	2300      	movs	r3, #0
 800311c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a47      	ldr	r2, [pc, #284]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d102      	bne.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003128:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e001      	b.n	8003132 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e072      	b.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ffb9 	bl	80030ca <LL_ADC_REG_IsConversionOngoing>
 8003158:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ffb3 	bl	80030ca <LL_ADC_REG_IsConversionOngoing>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d154      	bne.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800316a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800316c:	2b00      	cmp	r3, #0
 800316e:	d151      	bne.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003170:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003172:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02c      	beq.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800317c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800318e:	035b      	lsls	r3, r3, #13
 8003190:	430b      	orrs	r3, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003196:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003198:	4829      	ldr	r0, [pc, #164]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800319a:	f7ff ff83 	bl	80030a4 <LL_ADC_IsEnabled>
 800319e:	4604      	mov	r4, r0
 80031a0:	4828      	ldr	r0, [pc, #160]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031a2:	f7ff ff7f 	bl	80030a4 <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	431c      	orrs	r4, r3
 80031aa:	4828      	ldr	r0, [pc, #160]	@ (800324c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031ac:	f7ff ff7a 	bl	80030a4 <LL_ADC_IsEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4323      	orrs	r3, r4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d137      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031c0:	f023 030f 	bic.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	6811      	ldr	r1, [r2, #0]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031d2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d4:	e028      	b.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031e2:	4817      	ldr	r0, [pc, #92]	@ (8003240 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031e4:	f7ff ff5e 	bl	80030a4 <LL_ADC_IsEnabled>
 80031e8:	4604      	mov	r4, r0
 80031ea:	4816      	ldr	r0, [pc, #88]	@ (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031ec:	f7ff ff5a 	bl	80030a4 <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	431c      	orrs	r4, r3
 80031f4:	4815      	ldr	r0, [pc, #84]	@ (800324c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031f6:	f7ff ff55 	bl	80030a4 <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4323      	orrs	r3, r4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d112      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800320a:	f023 030f 	bic.w	r3, r3, #15
 800320e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003210:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003212:	e009      	b.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003226:	e000      	b.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003228:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003232:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003236:	4618      	mov	r0, r3
 8003238:	3784      	adds	r7, #132	@ 0x84
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	50040000 	.word	0x50040000
 8003244:	50040100 	.word	0x50040100
 8003248:	50040300 	.word	0x50040300
 800324c:	50040200 	.word	0x50040200

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	@ (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	@ (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	@ (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	@ 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033bc:	d301      	bcc.n	80033c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033be:	2301      	movs	r3, #1
 80033c0:	e00f      	b.n	80033e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <SysTick_Config+0x40>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ca:	210f      	movs	r1, #15
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f7ff ff8e 	bl	80032f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <SysTick_Config+0x40>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033da:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <SysTick_Config+0x40>)
 80033dc:	2207      	movs	r2, #7
 80033de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000e010 	.word	0xe000e010

080033f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff29 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003418:	f7ff ff3e 	bl	8003298 <__NVIC_GetPriorityGrouping>
 800341c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff8e 	bl	8003344 <NVIC_EncodePriority>
 8003428:	4602      	mov	r2, r0
 800342a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff5d 	bl	80032f0 <__NVIC_SetPriority>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff31 	bl	80032b4 <__NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffa2 	bl	80033ac <SysTick_Config>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e075      	b.n	8003572 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe f85e 	bl	800155c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034b6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <HAL_DCMI_Init+0x108>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80034ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80034f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003502:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800350e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800351a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b10      	cmp	r3, #16
 800352a:	d112      	bne.n	8003552 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7f1b      	ldrb	r3, [r3, #28]
 8003530:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7f5b      	ldrb	r3, [r3, #29]
 8003536:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003538:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f9b      	ldrb	r3, [r3, #30]
 800353e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003540:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7fdb      	ldrb	r3, [r3, #31]
 8003548:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800354e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003550:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 021f 	orr.w	r2, r2, #31
 8003560:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	ffe0f007 	.word	0xffe0f007

08003580 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0ac      	b.n	80036ec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f8b2 	bl	8003700 <DFSDM_GetChannelFromInstance>
 800359c:	4603      	mov	r3, r0
 800359e:	4a55      	ldr	r2, [pc, #340]	@ (80036f4 <HAL_DFSDM_ChannelInit+0x174>)
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e09f      	b.n	80036ec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fe f855 	bl	800165c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80035b2:	4b51      	ldr	r3, [pc, #324]	@ (80036f8 <HAL_DFSDM_ChannelInit+0x178>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a4f      	ldr	r2, [pc, #316]	@ (80036f8 <HAL_DFSDM_ChannelInit+0x178>)
 80035ba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80035bc:	4b4e      	ldr	r3, [pc, #312]	@ (80036f8 <HAL_DFSDM_ChannelInit+0x178>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d125      	bne.n	8003610 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80035c4:	4b4d      	ldr	r3, [pc, #308]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4c      	ldr	r2, [pc, #304]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80035d0:	4b4a      	ldr	r3, [pc, #296]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4948      	ldr	r1, [pc, #288]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80035de:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a46      	ldr	r2, [pc, #280]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035e4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80035e8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80035f2:	4b42      	ldr	r3, [pc, #264]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	493f      	ldr	r1, [pc, #252]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003604:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3c      	ldr	r2, [pc, #240]	@ (80036fc <HAL_DFSDM_ChannelInit+0x17c>)
 800360a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800360e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800361e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800362e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003634:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 020f 	bic.w	r2, r2, #15
 800364c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003674:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f002 0207 	and.w	r2, r2, #7
 80036a0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f810 	bl	8003700 <DFSDM_GetChannelFromInstance>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4904      	ldr	r1, [pc, #16]	@ (80036f4 <HAL_DFSDM_ChannelInit+0x174>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200008f0 	.word	0x200008f0
 80036f8:	200008ec 	.word	0x200008ec
 80036fc:	40016000 	.word	0x40016000

08003700 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <DFSDM_GetChannelFromInstance+0x7c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d102      	bne.n	8003716 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e02b      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <DFSDM_GetChannelFromInstance+0x80>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d102      	bne.n	8003724 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800371e:	2301      	movs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e024      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <DFSDM_GetChannelFromInstance+0x84>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d102      	bne.n	8003732 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800372c:	2302      	movs	r3, #2
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e01d      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	@ (8003788 <DFSDM_GetChannelFromInstance+0x88>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d102      	bne.n	8003740 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800373a:	2304      	movs	r3, #4
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e016      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <DFSDM_GetChannelFromInstance+0x8c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d102      	bne.n	800374e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003748:	2305      	movs	r3, #5
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e00f      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a0f      	ldr	r2, [pc, #60]	@ (8003790 <DFSDM_GetChannelFromInstance+0x90>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d102      	bne.n	800375c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003756:	2306      	movs	r3, #6
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e008      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0d      	ldr	r2, [pc, #52]	@ (8003794 <DFSDM_GetChannelFromInstance+0x94>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d102      	bne.n	800376a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003764:	2307      	movs	r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e001      	b.n	800376e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800376a:	2303      	movs	r3, #3
 800376c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800376e:	68fb      	ldr	r3, [r7, #12]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40016000 	.word	0x40016000
 8003780:	40016020 	.word	0x40016020
 8003784:	40016040 	.word	0x40016040
 8003788:	40016080 	.word	0x40016080
 800378c:	400160a0 	.word	0x400160a0
 8003790:	400160c0 	.word	0x400160c0
 8003794:	400160e0 	.word	0x400160e0

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a6:	e166      	b.n	8003a76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8158 	beq.w	8003a70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d005      	beq.n	80037d8 <HAL_GPIO_Init+0x40>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d130      	bne.n	800383a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800380e:	2201      	movs	r2, #1
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0201 	and.w	r2, r3, #1
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b03      	cmp	r3, #3
 8003844:	d017      	beq.n	8003876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d123      	bne.n	80038ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80b2 	beq.w	8003a70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390c:	4b61      	ldr	r3, [pc, #388]	@ (8003a94 <HAL_GPIO_Init+0x2fc>)
 800390e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003910:	4a60      	ldr	r2, [pc, #384]	@ (8003a94 <HAL_GPIO_Init+0x2fc>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6613      	str	r3, [r2, #96]	@ 0x60
 8003918:	4b5e      	ldr	r3, [pc, #376]	@ (8003a94 <HAL_GPIO_Init+0x2fc>)
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003924:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_GPIO_Init+0x300>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800394e:	d02b      	beq.n	80039a8 <HAL_GPIO_Init+0x210>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a52      	ldr	r2, [pc, #328]	@ (8003a9c <HAL_GPIO_Init+0x304>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d025      	beq.n	80039a4 <HAL_GPIO_Init+0x20c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a51      	ldr	r2, [pc, #324]	@ (8003aa0 <HAL_GPIO_Init+0x308>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01f      	beq.n	80039a0 <HAL_GPIO_Init+0x208>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a50      	ldr	r2, [pc, #320]	@ (8003aa4 <HAL_GPIO_Init+0x30c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d019      	beq.n	800399c <HAL_GPIO_Init+0x204>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a4f      	ldr	r2, [pc, #316]	@ (8003aa8 <HAL_GPIO_Init+0x310>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <HAL_GPIO_Init+0x200>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a4e      	ldr	r2, [pc, #312]	@ (8003aac <HAL_GPIO_Init+0x314>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00d      	beq.n	8003994 <HAL_GPIO_Init+0x1fc>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab0 <HAL_GPIO_Init+0x318>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <HAL_GPIO_Init+0x1f8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab4 <HAL_GPIO_Init+0x31c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_GPIO_Init+0x1f4>
 8003988:	2307      	movs	r3, #7
 800398a:	e00e      	b.n	80039aa <HAL_GPIO_Init+0x212>
 800398c:	2308      	movs	r3, #8
 800398e:	e00c      	b.n	80039aa <HAL_GPIO_Init+0x212>
 8003990:	2306      	movs	r3, #6
 8003992:	e00a      	b.n	80039aa <HAL_GPIO_Init+0x212>
 8003994:	2305      	movs	r3, #5
 8003996:	e008      	b.n	80039aa <HAL_GPIO_Init+0x212>
 8003998:	2304      	movs	r3, #4
 800399a:	e006      	b.n	80039aa <HAL_GPIO_Init+0x212>
 800399c:	2303      	movs	r3, #3
 800399e:	e004      	b.n	80039aa <HAL_GPIO_Init+0x212>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e002      	b.n	80039aa <HAL_GPIO_Init+0x212>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_GPIO_Init+0x212>
 80039a8:	2300      	movs	r3, #0
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	f002 0203 	and.w	r2, r2, #3
 80039b0:	0092      	lsls	r2, r2, #2
 80039b2:	4093      	lsls	r3, r2
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ba:	4937      	ldr	r1, [pc, #220]	@ (8003a98 <HAL_GPIO_Init+0x300>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ec:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039f2:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a16:	4a28      	ldr	r2, [pc, #160]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a1c:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a40:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a46:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f ae91 	bne.w	80037a8 <HAL_GPIO_Init+0x10>
  }
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	48000400 	.word	0x48000400
 8003aa0:	48000800 	.word	0x48000800
 8003aa4:	48000c00 	.word	0x48000c00
 8003aa8:	48001000 	.word	0x48001000
 8003aac:	48001400 	.word	0x48001400
 8003ab0:	48001800 	.word	0x48001800
 8003ab4:	48001c00 	.word	0x48001c00
 8003ab8:	40010400 	.word	0x40010400

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003acc:	787b      	ldrb	r3, [r7, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad8:	e002      	b.n	8003ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	041a      	lsls	r2, r3, #16
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43d9      	mvns	r1, r3
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	400b      	ands	r3, r1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e08d      	b.n	8003c4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fe10 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	@ 0x24
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	e006      	b.n	8003ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d108      	bne.n	8003bc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	e007      	b.n	8003bd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d138      	bne.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e032      	b.n	8003ce0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	@ 0x24
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ca8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d139      	bne.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e033      	b.n	8003d78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	@ 0x24
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e101      	b.n	8003f9a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f009 fe78 	bl	800daa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2203      	movs	r2, #3
 8003db4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 fb2f 	bl	800a426 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7c1a      	ldrb	r2, [r3, #16]
 8003dd0:	f88d 2000 	strb.w	r2, [sp]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd8:	f006 fa4a 	bl	800a270 <USB_CoreInit>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0d5      	b.n	8003f9a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f006 fb27 	bl	800a448 <USB_SetCurrentMode>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0c6      	b.n	8003f9a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e04a      	b.n	8003ea8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3315      	adds	r3, #21
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3314      	adds	r3, #20
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	b298      	uxth	r0, r3
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	332e      	adds	r3, #46	@ 0x2e
 8003e4e:	4602      	mov	r2, r0
 8003e50:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	3318      	adds	r3, #24
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	331c      	adds	r3, #28
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3320      	adds	r3, #32
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3324      	adds	r3, #36	@ 0x24
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	791b      	ldrb	r3, [r3, #4]
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d3af      	bcc.n	8003e12 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e044      	b.n	8003f42 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	791b      	ldrb	r3, [r3, #4]
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d3b5      	bcc.n	8003eb8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7c1a      	ldrb	r2, [r3, #16]
 8003f54:	f88d 2000 	strb.w	r2, [sp]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5c:	f006 fac0 	bl	800a4e0 <USB_DevInit>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e013      	b.n	8003f9a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7b1b      	ldrb	r3, [r3, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 f86d 	bl	8005068 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f007 fa77 	bl	800b486 <USB_DevDisconnect>

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_PCD_Start+0x1c>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e01c      	b.n	8003ff8 <HAL_PCD_Start+0x56>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7b5b      	ldrb	r3, [r3, #13]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f006 fa10 	bl	800a404 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f007 fa2b 	bl	800b444 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b08d      	sub	sp, #52	@ 0x34
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f007 fae9 	bl	800b5ee <USB_GetMode>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 8481 	bne.w	8004926 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f007 fa4d 	bl	800b4c8 <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8477 	beq.w	8004924 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f007 fa3a 	bl	800b4c8 <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d107      	bne.n	800406e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f002 0202 	and.w	r2, r2, #2
 800406c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f007 fa28 	bl	800b4c8 <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b10      	cmp	r3, #16
 8004080:	d161      	bne.n	8004146 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0210 	bic.w	r2, r2, #16
 8004090:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	3304      	adds	r3, #4
 80040b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80040b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040bc:	d124      	bne.n	8004108 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d035      	beq.n	8004136 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6a38      	ldr	r0, [r7, #32]
 80040de:	f007 f85f 	bl	800b1a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ee:	441a      	add	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004100:	441a      	add	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	615a      	str	r2, [r3, #20]
 8004106:	e016      	b.n	8004136 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800410e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004112:	d110      	bne.n	8004136 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800411a:	2208      	movs	r2, #8
 800411c:	4619      	mov	r1, r3
 800411e:	6a38      	ldr	r0, [r7, #32]
 8004120:	f007 f83e 	bl	800b1a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004130:	441a      	add	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0210 	orr.w	r2, r2, #16
 8004144:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f007 f9bc 	bl	800b4c8 <USB_ReadInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004156:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800415a:	f040 80a7 	bne.w	80042ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f007 f9c1 	bl	800b4ee <USB_ReadDevAllOutEpInterrupt>
 800416c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800416e:	e099      	b.n	80042a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 808e 	beq.w	8004298 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f007 f9e5 	bl	800b556 <USB_ReadDevOutEPInterrupt>
 800418c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a4:	461a      	mov	r2, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fe81 	bl	8004eb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	2308      	movs	r3, #8
 80041cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 febd 	bl	8004f50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	2310      	movs	r3, #16
 80041f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d030      	beq.n	800425e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004204:	2b80      	cmp	r3, #128	@ 0x80
 8004206:	d109      	bne.n	800421c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004216:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800421a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	3304      	adds	r3, #4
 8004230:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	78db      	ldrb	r3, [r3, #3]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	b2db      	uxtb	r3, r3
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f009 fd52 	bl	800dcf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	2302      	movs	r3, #2
 800425c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004274:	461a      	mov	r2, r3
 8004276:	2320      	movs	r3, #32
 8004278:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004296:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	3301      	adds	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f47f af62 	bne.w	8004170 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f007 f909 	bl	800b4c8 <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042c0:	f040 80a4 	bne.w	800440c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f007 f92a 	bl	800b522 <USB_ReadDevAllInEpInterrupt>
 80042ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80042d4:	e096      	b.n	8004404 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 808b 	beq.w	80043f8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f007 f950 	bl	800b592 <USB_ReadDevInEPInterrupt>
 80042f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	2201      	movs	r2, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43db      	mvns	r3, r3
 8004318:	69f9      	ldr	r1, [r7, #28]
 800431a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800431e:	4013      	ands	r3, r2
 8004320:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432e:	461a      	mov	r2, r3
 8004330:	2301      	movs	r3, #1
 8004332:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4619      	mov	r1, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f009 fc43 	bl	800dbc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004356:	461a      	mov	r2, r3
 8004358:	2308      	movs	r3, #8
 800435a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004372:	461a      	mov	r2, r3
 8004374:	2310      	movs	r3, #16
 8004376:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800438e:	461a      	mov	r2, r3
 8004390:	2340      	movs	r3, #64	@ 0x40
 8004392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d023      	beq.n	80043e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800439e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043a0:	6a38      	ldr	r0, [r7, #32]
 80043a2:	f006 f9e5 	bl	800a770 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3310      	adds	r3, #16
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d108      	bne.n	80043d4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f009 fca0 	bl	800dd14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e0:	461a      	mov	r2, r3
 80043e2:	2302      	movs	r3, #2
 80043e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fcd6 	bl	8004da4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	3301      	adds	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f af65 	bne.w	80042d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f007 f859 	bl	800b4c8 <USB_ReadInterrupts>
 8004416:	4603      	mov	r3, r0
 8004418:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800441c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004420:	d122      	bne.n	8004468 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800443c:	2b01      	cmp	r3, #1
 800443e:	d108      	bne.n	8004452 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004448:	2100      	movs	r1, #0
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f009 fed4 	bl	800e1f8 <HAL_PCDEx_LPM_Callback>
 8004450:	e002      	b.n	8004458 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f009 fc24 	bl	800dca0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f007 f82b 	bl	800b4c8 <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800447c:	d112      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f009 fbe0 	bl	800dc54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80044a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f007 f80d 	bl	800b4c8 <USB_ReadInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b8:	d121      	bne.n	80044fe <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80044c8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d111      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044ee:	2101      	movs	r1, #1
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f009 fe81 	bl	800e1f8 <HAL_PCDEx_LPM_Callback>
 80044f6:	e002      	b.n	80044fe <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f009 fbab 	bl	800dc54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f006 ffe0 	bl	800b4c8 <USB_ReadInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	f040 80b6 	bne.w	8004682 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2110      	movs	r1, #16
 8004530:	4618      	mov	r0, r3
 8004532:	f006 f91d 	bl	800a770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453a:	e046      	b.n	80045ca <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004548:	461a      	mov	r2, r3
 800454a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800454e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800456a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800456e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457c:	461a      	mov	r2, r3
 800457e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004582:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	440a      	add	r2, r1
 800459a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800459e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	3301      	adds	r3, #1
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	791b      	ldrb	r3, [r3, #4]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d3b2      	bcc.n	800453c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7bdb      	ldrb	r3, [r3, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004602:	f043 030b 	orr.w	r3, r3, #11
 8004606:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004618:	f043 030b 	orr.w	r3, r3, #11
 800461c:	6453      	str	r3, [r2, #68]	@ 0x44
 800461e:	e015      	b.n	800464c <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004632:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004636:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004646:	f043 030b 	orr.w	r3, r3, #11
 800464a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800465a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800465e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f006 ffef 	bl	800b650 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f006 ff1e 	bl	800b4c8 <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004696:	d123      	bne.n	80046e0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f006 ffb4 	bl	800b60a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f006 f8db 	bl	800a862 <USB_GetDevSpeed>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681c      	ldr	r4, [r3, #0]
 80046b8:	f001 fbf6 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 80046bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046c2:	461a      	mov	r2, r3
 80046c4:	4620      	mov	r0, r4
 80046c6:	f005 fe01 	bl	800a2cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f009 faa3 	bl	800dc16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f006 feef 	bl	800b4c8 <USB_ReadInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d10a      	bne.n	800470a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f009 fa80 	bl	800dbfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 0208 	and.w	r2, r2, #8
 8004708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f006 feda 	bl	800b4c8 <USB_ReadInterrupts>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471a:	2b80      	cmp	r3, #128	@ 0x80
 800471c:	d123      	bne.n	8004766 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800472a:	2301      	movs	r3, #1
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
 800472e:	e014      	b.n	800475a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 faf7 	bl	8004d42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	461a      	mov	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	4293      	cmp	r3, r2
 8004764:	d3e4      	bcc.n	8004730 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f006 feac 	bl	800b4c8 <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800477a:	d13c      	bne.n	80047f6 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800477c:	2301      	movs	r3, #1
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004780:	e02b      	b.n	80047da <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	3318      	adds	r3, #24
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d115      	bne.n	80047d4 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da12      	bge.n	80047d4 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3317      	adds	r3, #23
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fab7 	bl	8004d42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	3301      	adds	r3, #1
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	791b      	ldrb	r3, [r3, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d3cd      	bcc.n	8004782 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80047f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f006 fe64 	bl	800b4c8 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800480a:	d156      	bne.n	80048ba <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800480c:	2301      	movs	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004810:	e045      	b.n	800489e <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d12e      	bne.n	8004898 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800483a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800483c:	2b00      	cmp	r3, #0
 800483e:	da2b      	bge.n	8004898 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800484c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004850:	429a      	cmp	r2, r3
 8004852:	d121      	bne.n	8004898 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004890:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004894:	6053      	str	r3, [r2, #4]
            break;
 8004896:	e008      	b.n	80048aa <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	3301      	adds	r3, #1
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d3b3      	bcc.n	8004812 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80048b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f006 fe02 	bl	800b4c8 <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d10a      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f009 fa31 	bl	800dd38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f006 fdec 	bl	800b4c8 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d115      	bne.n	8004926 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f009 fa21 	bl	800dd54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e000      	b.n	8004926 <HAL_PCD_IRQHandler+0x926>
      return;
 8004924:	bf00      	nop
    }
  }
}
 8004926:	3734      	adds	r7, #52	@ 0x34
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_PCD_SetAddress+0x1a>
 8004942:	2302      	movs	r3, #2
 8004944:	e012      	b.n	800496c <HAL_PCD_SetAddress+0x40>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f006 fd4b 	bl	800b3f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	70fb      	strb	r3, [r7, #3]
 8004986:	460b      	mov	r3, r1
 8004988:	803b      	strh	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da0f      	bge.n	80049ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	3310      	adds	r3, #16
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	705a      	strb	r2, [r3, #1]
 80049b8:	e00f      	b.n	80049da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049e6:	883b      	ldrh	r3, [r7, #0]
 80049e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	78ba      	ldrb	r2, [r7, #2]
 80049f4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a08:	78bb      	ldrb	r3, [r7, #2]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d102      	bne.n	8004a14 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_PCD_EP_Open+0xae>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e00e      	b.n	8004a40 <HAL_PCD_EP_Open+0xcc>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f005 ff35 	bl	800a8a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	da0f      	bge.n	8004a7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	4413      	add	r3, r2
 8004a70:	3304      	adds	r3, #4
 8004a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	705a      	strb	r2, [r3, #1]
 8004a7a:	e00f      	b.n	8004a9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	f003 020f 	and.w	r2, r3, #15
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4413      	add	r3, r2
 8004a92:	3304      	adds	r3, #4
 8004a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_PCD_EP_Close+0x6e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e00e      	b.n	8004ad4 <HAL_PCD_EP_Close+0x8c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f005 ff73 	bl	800a9b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aec:	7afb      	ldrb	r3, [r7, #11]
 8004aee:	f003 020f 	and.w	r2, r3, #15
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f006 f819 	bl	800ab68 <USB_EPStartXfer>

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	f003 020f 	and.w	r2, r3, #15
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	f003 020f 	and.w	r2, r3, #15
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	3310      	adds	r3, #16
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	3304      	adds	r3, #4
 8004b96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2201      	movs	r2, #1
 8004bae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6979      	ldr	r1, [r7, #20]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f005 ffd0 	bl	800ab68 <USB_EPStartXfer>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	7912      	ldrb	r2, [r2, #4]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e04e      	b.n	8004c8e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	da0f      	bge.n	8004c18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	3310      	adds	r3, #16
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	705a      	strb	r2, [r3, #1]
 8004c16:	e00d      	b.n	8004c34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_PCD_EP_SetStall+0x82>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e01c      	b.n	8004c8e <HAL_PCD_EP_SetStall+0xbc>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f006 faf4 	bl	800b250 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f006 fce6 	bl	800b650 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	7912      	ldrb	r2, [r2, #4]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e042      	b.n	8004d3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	da0f      	bge.n	8004cdc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	3310      	adds	r3, #16
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4413      	add	r3, r2
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	705a      	strb	r2, [r3, #1]
 8004cda:	e00f      	b.n	8004cfc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 020f 	and.w	r2, r3, #15
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_PCD_EP_ClrStall+0x86>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e00e      	b.n	8004d3a <HAL_PCD_EP_ClrStall+0xa4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f006 fafe 	bl	800b32c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da0c      	bge.n	8004d70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	f003 020f 	and.w	r2, r3, #15
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	3310      	adds	r3, #16
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4413      	add	r3, r2
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e00c      	b.n	8004d8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	3304      	adds	r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f006 f921 	bl	800afd8 <USB_EPStopXfer>
 8004d96:	4603      	mov	r3, r0
 8004d98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d901      	bls.n	8004ddc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e067      	b.n	8004eac <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d902      	bls.n	8004df8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3303      	adds	r3, #3
 8004dfc:	089b      	lsrs	r3, r3, #2
 8004dfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e00:	e026      	b.n	8004e50 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d902      	bls.n	8004e1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3303      	adds	r3, #3
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68d9      	ldr	r1, [r3, #12]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f006 f97a 	bl	800b12c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	441a      	add	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	441a      	add	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d809      	bhi.n	8004e7a <PCD_WriteEmptyTxFifo+0xd6>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d203      	bcs.n	8004e7a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1c3      	bne.n	8004e02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d811      	bhi.n	8004eaa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	333c      	adds	r3, #60	@ 0x3c
 8004ecc:	3304      	adds	r3, #4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	@ (8004f4c <PCD_EP_OutXfrComplete_int+0x98>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d124      	bne.n	8004f34 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	461a      	mov	r2, r3
 8004f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f06:	6093      	str	r3, [r2, #8]
 8004f08:	e01a      	b.n	8004f40 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	2320      	movs	r3, #32
 8004f24:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f008 fe2f 	bl	800db90 <HAL_PCD_DataOutStageCallback>
 8004f32:	e005      	b.n	8004f40 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f008 fe28 	bl	800db90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	4f54310a 	.word	0x4f54310a

08004f50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	333c      	adds	r3, #60	@ 0x3c
 8004f68:	3304      	adds	r3, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb4 <PCD_EP_OutSetupPacket_int+0x64>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d90e      	bls.n	8004fa4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f008 fde1 	bl	800db6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	4f54300a 	.word	0x4f54300a

08004fb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d107      	bne.n	8004fe6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fd6:	883b      	ldrh	r3, [r7, #0]
 8004fd8:	0419      	lsls	r1, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fe4:	e028      	b.n	8005038 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e00d      	b.n	8005016 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	3340      	adds	r3, #64	@ 0x40
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0c1b      	lsrs	r3, r3, #16
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	3301      	adds	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	3b01      	subs	r3, #1
 800501c:	429a      	cmp	r2, r3
 800501e:	d3ec      	bcc.n	8004ffa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005020:	883b      	ldrh	r3, [r7, #0]
 8005022:	0418      	lsls	r0, r3, #16
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6819      	ldr	r1, [r3, #0]
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	3b01      	subs	r3, #1
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	4302      	orrs	r2, r0
 8005030:	3340      	adds	r3, #64	@ 0x40
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509a:	f043 0303 	orr.w	r3, r3, #3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b4:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a04      	ldr	r2, [pc, #16]	@ (80050cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050be:	6013      	str	r3, [r2, #0]
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40007000 	.word	0x40007000

080050d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050d4:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40007000 	.word	0x40007000

080050ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050fa:	d130      	bne.n	800515e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fc:	4b23      	ldr	r3, [pc, #140]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005108:	d038      	beq.n	800517c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800510a:	4b20      	ldr	r3, [pc, #128]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005112:	4a1e      	ldr	r2, [pc, #120]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2232      	movs	r2, #50	@ 0x32
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	4a1b      	ldr	r2, [pc, #108]	@ (8005194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	0c9b      	lsrs	r3, r3, #18
 800512c:	3301      	adds	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005130:	e002      	b.n	8005138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3b01      	subs	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005144:	d102      	bne.n	800514c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f2      	bne.n	8005132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800514c:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005158:	d110      	bne.n	800517c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e00f      	b.n	800517e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800516a:	d007      	beq.n	800517c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005174:	4a05      	ldr	r2, [pc, #20]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800517a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40007000 	.word	0x40007000
 8005190:	20000000 	.word	0x20000000
 8005194:	431bde83 	.word	0x431bde83

08005198 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800519c:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4a04      	ldr	r2, [pc, #16]	@ (80051b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80051a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051a6:	6053      	str	r3, [r2, #4]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40007000 	.word	0x40007000

080051b8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051c6:	6053      	str	r3, [r2, #4]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40007000 	.word	0x40007000

080051d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af02      	add	r7, sp, #8
 80051de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051e0:	f7fd f830 	bl	8002244 <HAL_GetTick>
 80051e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e069      	b.n	80052c4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fc fca7 	bl	8001b58 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800520a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f85e 	bl	80052d0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	021a      	lsls	r2, r3, #8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	2120      	movs	r1, #32
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f856 	bl	80052ec <QSPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d137      	bne.n	80052ba <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005254:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6852      	ldr	r2, [r2, #4]
 800525c:	0611      	lsls	r1, r2, #24
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	69d2      	ldr	r2, [r2, #28]
 8005268:	4311      	orrs	r1, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6a12      	ldr	r2, [r2, #32]
 800526e:	4311      	orrs	r1, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	430b      	orrs	r3, r1
 8005276:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b13      	ldr	r3, [pc, #76]	@ (80052cc <HAL_QSPI_Init+0xf4>)
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6912      	ldr	r2, [r2, #16]
 8005286:	0411      	lsls	r1, r2, #16
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6952      	ldr	r2, [r2, #20]
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6992      	ldr	r2, [r2, #24]
 8005292:	4311      	orrs	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	430b      	orrs	r3, r1
 800529a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80052c2:	7afb      	ldrb	r3, [r7, #11]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	ffe0f8fe 	.word	0xffe0f8fe

080052d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80052fc:	e01a      	b.n	8005334 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d016      	beq.n	8005334 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fc ff9d 	bl	8002244 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2204      	movs	r2, #4
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	f043 0201 	orr.w	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e00e      	b.n	8005352 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	429a      	cmp	r2, r3
 800534e:	d1d6      	bne.n	80052fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f000 bc08 	b.w	8005b80 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005370:	4b96      	ldr	r3, [pc, #600]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800537a:	4b94      	ldr	r3, [pc, #592]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80e4 	beq.w	800555a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_RCC_OscConfig+0x4c>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	f040 808b 	bne.w	80054b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f040 8087 	bne.w	80054b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053a8:	4b88      	ldr	r3, [pc, #544]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_OscConfig+0x64>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e3df      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1a      	ldr	r2, [r3, #32]
 80053c4:	4b81      	ldr	r3, [pc, #516]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <HAL_RCC_OscConfig+0x7e>
 80053d0:	4b7e      	ldr	r3, [pc, #504]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d8:	e005      	b.n	80053e6 <HAL_RCC_OscConfig+0x8a>
 80053da:	4b7c      	ldr	r3, [pc, #496]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80053dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d223      	bcs.n	8005432 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fd92 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e3c0      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053fe:	4b73      	ldr	r3, [pc, #460]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a72      	ldr	r2, [pc, #456]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005404:	f043 0308 	orr.w	r3, r3, #8
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b70      	ldr	r3, [pc, #448]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	496d      	ldr	r1, [pc, #436]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800541c:	4b6b      	ldr	r3, [pc, #428]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	4968      	ldr	r1, [pc, #416]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	e025      	b.n	800547e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005432:	4b66      	ldr	r3, [pc, #408]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a65      	ldr	r2, [pc, #404]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005438:	f043 0308 	orr.w	r3, r3, #8
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b63      	ldr	r3, [pc, #396]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	4960      	ldr	r1, [pc, #384]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005450:	4b5e      	ldr	r3, [pc, #376]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	495b      	ldr	r1, [pc, #364]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fd52 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e380      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800547e:	f000 fc87 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b51      	ldr	r3, [pc, #324]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	4950      	ldr	r1, [pc, #320]	@ (80055d0 <HAL_RCC_OscConfig+0x274>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a4e      	ldr	r2, [pc, #312]	@ (80055d4 <HAL_RCC_OscConfig+0x278>)
 800549c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800549e:	4b4e      	ldr	r3, [pc, #312]	@ (80055d8 <HAL_RCC_OscConfig+0x27c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc fe7e 	bl	80021a4 <HAL_InitTick>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d052      	beq.n	8005558 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	e364      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d032      	beq.n	8005524 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054be:	4b43      	ldr	r3, [pc, #268]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a42      	ldr	r2, [pc, #264]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054ca:	f7fc febb 	bl	8002244 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054d2:	f7fc feb7 	bl	8002244 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e34d      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054e4:	4b39      	ldr	r3, [pc, #228]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f0:	4b36      	ldr	r3, [pc, #216]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a35      	ldr	r2, [pc, #212]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80054f6:	f043 0308 	orr.w	r3, r3, #8
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b33      	ldr	r3, [pc, #204]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	4930      	ldr	r1, [pc, #192]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550e:	4b2f      	ldr	r3, [pc, #188]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	492b      	ldr	r1, [pc, #172]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800551e:	4313      	orrs	r3, r2
 8005520:	604b      	str	r3, [r1, #4]
 8005522:	e01a      	b.n	800555a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005524:	4b29      	ldr	r3, [pc, #164]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a28      	ldr	r2, [pc, #160]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005530:	f7fc fe88 	bl	8002244 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005538:	f7fc fe84 	bl	8002244 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e31a      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800554a:	4b20      	ldr	r3, [pc, #128]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1dc>
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d073      	beq.n	800564e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d005      	beq.n	8005578 <HAL_RCC_OscConfig+0x21c>
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d10e      	bne.n	8005590 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d10b      	bne.n	8005590 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005578:	4b14      	ldr	r3, [pc, #80]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d063      	beq.n	800564c <HAL_RCC_OscConfig+0x2f0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d15f      	bne.n	800564c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e2f7      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005598:	d106      	bne.n	80055a8 <HAL_RCC_OscConfig+0x24c>
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a0b      	ldr	r2, [pc, #44]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e025      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055b0:	d114      	bne.n	80055dc <HAL_RCC_OscConfig+0x280>
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a05      	ldr	r2, [pc, #20]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80055b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b03      	ldr	r3, [pc, #12]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a02      	ldr	r2, [pc, #8]	@ (80055cc <HAL_RCC_OscConfig+0x270>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e013      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800e388 	.word	0x0800e388
 80055d4:	20000000 	.word	0x20000000
 80055d8:	20000004 	.word	0x20000004
 80055dc:	4ba0      	ldr	r3, [pc, #640]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a9f      	ldr	r2, [pc, #636]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80055e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a9c      	ldr	r2, [pc, #624]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80055ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fc fe22 	bl	8002244 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005604:	f7fc fe1e 	bl	8002244 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b64      	cmp	r3, #100	@ 0x64
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e2b4      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005616:	4b92      	ldr	r3, [pc, #584]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x2a8>
 8005622:	e014      	b.n	800564e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fc fe0e 	bl	8002244 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562c:	f7fc fe0a 	bl	8002244 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	@ 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e2a0      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800563e:	4b88      	ldr	r3, [pc, #544]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x2d0>
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d060      	beq.n	800571c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d005      	beq.n	800566c <HAL_RCC_OscConfig+0x310>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d119      	bne.n	800569a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d116      	bne.n	800569a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800566c:	4b7c      	ldr	r3, [pc, #496]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_OscConfig+0x328>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e27d      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	4973      	ldr	r1, [pc, #460]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005698:	e040      	b.n	800571c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d023      	beq.n	80056ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ae:	f7fc fdc9 	bl	8002244 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b6:	f7fc fdc5 	bl	8002244 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e25b      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c8:	4b65      	ldr	r3, [pc, #404]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d4:	4b62      	ldr	r3, [pc, #392]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	061b      	lsls	r3, r3, #24
 80056e2:	495f      	ldr	r1, [pc, #380]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	604b      	str	r3, [r1, #4]
 80056e8:	e018      	b.n	800571c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a5c      	ldr	r2, [pc, #368]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80056f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fc fda5 	bl	8002244 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fe:	f7fc fda1 	bl	8002244 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e237      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005710:	4b53      	ldr	r3, [pc, #332]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f0      	bne.n	80056fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d03c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01c      	beq.n	800576a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005730:	4b4b      	ldr	r3, [pc, #300]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005736:	4a4a      	ldr	r2, [pc, #296]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fc fd80 	bl	8002244 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005748:	f7fc fd7c 	bl	8002244 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e212      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800575a:	4b41      	ldr	r3, [pc, #260]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 800575c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ef      	beq.n	8005748 <HAL_RCC_OscConfig+0x3ec>
 8005768:	e01b      	b.n	80057a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800576a:	4b3d      	ldr	r3, [pc, #244]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 800576c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005770:	4a3b      	ldr	r2, [pc, #236]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fc fd63 	bl	8002244 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005782:	f7fc fd5f 	bl	8002244 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e1f5      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005794:	4b32      	ldr	r3, [pc, #200]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ef      	bne.n	8005782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80a6 	beq.w	80058fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b0:	2300      	movs	r3, #0
 80057b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80057b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10d      	bne.n	80057dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c0:	4b27      	ldr	r3, [pc, #156]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80057c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c4:	4a26      	ldr	r2, [pc, #152]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80057c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80057cc:	4b24      	ldr	r3, [pc, #144]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d8:	2301      	movs	r3, #1
 80057da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057dc:	4b21      	ldr	r3, [pc, #132]	@ (8005864 <HAL_RCC_OscConfig+0x508>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d118      	bne.n	800581a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005864 <HAL_RCC_OscConfig+0x508>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005864 <HAL_RCC_OscConfig+0x508>)
 80057ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f4:	f7fc fd26 	bl	8002244 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fc:	f7fc fd22 	bl	8002244 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e1b8      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580e:	4b15      	ldr	r3, [pc, #84]	@ (8005864 <HAL_RCC_OscConfig+0x508>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d108      	bne.n	8005834 <HAL_RCC_OscConfig+0x4d8>
 8005822:	4b0f      	ldr	r3, [pc, #60]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005828:	4a0d      	ldr	r2, [pc, #52]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005832:	e029      	b.n	8005888 <HAL_RCC_OscConfig+0x52c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b05      	cmp	r3, #5
 800583a:	d115      	bne.n	8005868 <HAL_RCC_OscConfig+0x50c>
 800583c:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005842:	4a07      	ldr	r2, [pc, #28]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	4a03      	ldr	r2, [pc, #12]	@ (8005860 <HAL_RCC_OscConfig+0x504>)
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800585c:	e014      	b.n	8005888 <HAL_RCC_OscConfig+0x52c>
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000
 8005864:	40007000 	.word	0x40007000
 8005868:	4b9d      	ldr	r3, [pc, #628]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586e:	4a9c      	ldr	r2, [pc, #624]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005878:	4b99      	ldr	r3, [pc, #612]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587e:	4a98      	ldr	r2, [pc, #608]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005880:	f023 0304 	bic.w	r3, r3, #4
 8005884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d016      	beq.n	80058be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fc fcd8 	bl	8002244 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005896:	e00a      	b.n	80058ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005898:	f7fc fcd4 	bl	8002244 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e168      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ae:	4b8c      	ldr	r3, [pc, #560]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ed      	beq.n	8005898 <HAL_RCC_OscConfig+0x53c>
 80058bc:	e015      	b.n	80058ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058be:	f7fc fcc1 	bl	8002244 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c4:	e00a      	b.n	80058dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c6:	f7fc fcbd 	bl	8002244 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e151      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058dc:	4b80      	ldr	r3, [pc, #512]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ed      	bne.n	80058c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ea:	7ffb      	ldrb	r3, [r7, #31]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d105      	bne.n	80058fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f0:	4b7b      	ldr	r3, [pc, #492]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 80058f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d03c      	beq.n	8005982 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01c      	beq.n	800594a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005910:	4b73      	ldr	r3, [pc, #460]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005916:	4a72      	ldr	r2, [pc, #456]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fc fc90 	bl	8002244 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005928:	f7fc fc8c 	bl	8002244 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e122      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800593a:	4b69      	ldr	r3, [pc, #420]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 800593c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ef      	beq.n	8005928 <HAL_RCC_OscConfig+0x5cc>
 8005948:	e01b      	b.n	8005982 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800594a:	4b65      	ldr	r3, [pc, #404]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 800594c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005950:	4a63      	ldr	r2, [pc, #396]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595a:	f7fc fc73 	bl	8002244 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005962:	f7fc fc6f 	bl	8002244 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e105      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005974:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1ef      	bne.n	8005962 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80f9 	beq.w	8005b7e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	2b02      	cmp	r3, #2
 8005992:	f040 80cf 	bne.w	8005b34 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005996:	4b52      	ldr	r3, [pc, #328]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 0203 	and.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d12c      	bne.n	8005a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	3b01      	subs	r3, #1
 80059b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d123      	bne.n	8005a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d11b      	bne.n	8005a04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d113      	bne.n	8005a04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	3b01      	subs	r3, #1
 80059ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d109      	bne.n	8005a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	3b01      	subs	r3, #1
 80059fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d071      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b0c      	cmp	r3, #12
 8005a08:	d068      	beq.n	8005adc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a0a:	4b35      	ldr	r3, [pc, #212]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a16:	4b32      	ldr	r3, [pc, #200]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0ac      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a26:	4b2e      	ldr	r3, [pc, #184]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a32:	f7fc fc07 	bl	8002244 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fc fc03 	bl	8002244 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e099      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	4b24      	ldr	r3, [pc, #144]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a58:	4b21      	ldr	r3, [pc, #132]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a7a:	0852      	lsrs	r2, r2, #1
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	0552      	lsls	r2, r2, #21
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a86:	0852      	lsrs	r2, r2, #1
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0652      	lsls	r2, r2, #25
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a92:	06d2      	lsls	r2, r2, #27
 8005a94:	430a      	orrs	r2, r1
 8005a96:	4912      	ldr	r1, [pc, #72]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ab4:	f7fc fbc6 	bl	8002244 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fc fbc2 	bl	8002244 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e058      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ada:	e050      	b.n	8005b7e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e04f      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d144      	bne.n	8005b7e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005af4:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a23      	ldr	r2, [pc, #140]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005afe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b00:	4b21      	ldr	r3, [pc, #132]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a20      	ldr	r2, [pc, #128]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b0c:	f7fc fb9a 	bl	8002244 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fc fb96 	bl	8002244 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e02c      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b26:	4b18      	ldr	r3, [pc, #96]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x7b8>
 8005b32:	e024      	b.n	8005b7e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d01f      	beq.n	8005b7a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3a:	4b13      	ldr	r3, [pc, #76]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a12      	ldr	r2, [pc, #72]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fc fb7d 	bl	8002244 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4e:	f7fc fb79 	bl	8002244 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e00f      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b60:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	4905      	ldr	r1, [pc, #20]	@ (8005b88 <HAL_RCC_OscConfig+0x82c>)
 8005b72:	4b06      	ldr	r3, [pc, #24]	@ (8005b8c <HAL_RCC_OscConfig+0x830>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	60cb      	str	r3, [r1, #12]
 8005b78:	e001      	b.n	8005b7e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	feeefffc 	.word	0xfeeefffc

08005b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0e7      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba4:	4b75      	ldr	r3, [pc, #468]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d910      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb2:	4b72      	ldr	r3, [pc, #456]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 0207 	bic.w	r2, r3, #7
 8005bba:	4970      	ldr	r1, [pc, #448]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0cf      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d908      	bls.n	8005c02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf0:	4b63      	ldr	r3, [pc, #396]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4960      	ldr	r1, [pc, #384]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d04c      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d107      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c16:	4b5a      	ldr	r3, [pc, #360]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d121      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e0a6      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c2e:	4b54      	ldr	r3, [pc, #336]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d115      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e09a      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c46:	4b4e      	ldr	r3, [pc, #312]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e08e      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c56:	4b4a      	ldr	r3, [pc, #296]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e086      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c66:	4b46      	ldr	r3, [pc, #280]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f023 0203 	bic.w	r2, r3, #3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	4943      	ldr	r1, [pc, #268]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c78:	f7fc fae4 	bl	8002244 <HAL_GetTick>
 8005c7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c80:	f7fc fae0 	bl	8002244 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e06e      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	4b3a      	ldr	r3, [pc, #232]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 020c 	and.w	r2, r3, #12
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d1eb      	bne.n	8005c80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d208      	bcs.n	8005cd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	492b      	ldr	r1, [pc, #172]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd6:	4b29      	ldr	r3, [pc, #164]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d210      	bcs.n	8005d06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce4:	4b25      	ldr	r3, [pc, #148]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f023 0207 	bic.w	r2, r3, #7
 8005cec:	4923      	ldr	r1, [pc, #140]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf4:	4b21      	ldr	r3, [pc, #132]	@ (8005d7c <HAL_RCC_ClockConfig+0x1ec>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d001      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e036      	b.n	8005d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d12:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	4918      	ldr	r1, [pc, #96]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d30:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4910      	ldr	r1, [pc, #64]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d44:	f000 f824 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <HAL_RCC_ClockConfig+0x1f0>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	091b      	lsrs	r3, r3, #4
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	490b      	ldr	r1, [pc, #44]	@ (8005d84 <HAL_RCC_ClockConfig+0x1f4>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d60:	4a09      	ldr	r2, [pc, #36]	@ (8005d88 <HAL_RCC_ClockConfig+0x1f8>)
 8005d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d64:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <HAL_RCC_ClockConfig+0x1fc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fc fa1b 	bl	80021a4 <HAL_InitTick>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d72:	7afb      	ldrb	r3, [r7, #11]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40022000 	.word	0x40022000
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800e388 	.word	0x0800e388
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	20000004 	.word	0x20000004

08005d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	@ 0x24
 8005d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	4b3b      	ldr	r3, [pc, #236]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d121      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11e      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dc4:	4b34      	ldr	r3, [pc, #208]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dd0:	4b31      	ldr	r3, [pc, #196]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	e005      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005de0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dec:	4a2b      	ldr	r2, [pc, #172]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d102      	bne.n	8005e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e08:	4b25      	ldr	r3, [pc, #148]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e004      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e14:	4b23      	ldr	r3, [pc, #140]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d134      	bne.n	8005e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d003      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0xac>
 8005e34:	e005      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e38:	617b      	str	r3, [r7, #20]
      break;
 8005e3a:	e005      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e3e:	617b      	str	r3, [r7, #20]
      break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	617b      	str	r3, [r7, #20]
      break;
 8005e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e48:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e56:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	fb03 f202 	mul.w	r2, r3, r2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	0e5b      	lsrs	r3, r3, #25
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e88:	69bb      	ldr	r3, [r7, #24]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3724      	adds	r7, #36	@ 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800e3a0 	.word	0x0800e3a0
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eac:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000000 	.word	0x20000000

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ec4:	f7ff fff0 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	@ (8005ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800e398 	.word	0x0800e398

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ef0:	f7ff ffda 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0adb      	lsrs	r3, r3, #11
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4904      	ldr	r1, [pc, #16]	@ (8005f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800e398 	.word	0x0800e398

08005f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f24:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f30:	f7ff f8ce 	bl	80050d0 <HAL_PWREx_GetVoltageRange>
 8005f34:	6178      	str	r0, [r7, #20]
 8005f36:	e014      	b.n	8005f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f38:	4b25      	ldr	r3, [pc, #148]	@ (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3c:	4a24      	ldr	r2, [pc, #144]	@ (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f44:	4b22      	ldr	r3, [pc, #136]	@ (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7ff f8be 	bl	80050d0 <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f68:	d10b      	bne.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b80      	cmp	r3, #128	@ 0x80
 8005f6e:	d919      	bls.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f74:	d902      	bls.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f76:	2302      	movs	r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e013      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e010      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b80      	cmp	r3, #128	@ 0x80
 8005f86:	d902      	bls.n	8005f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f88:	2303      	movs	r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e00a      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b80      	cmp	r3, #128	@ 0x80
 8005f92:	d102      	bne.n	8005f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f94:	2302      	movs	r3, #2
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	e004      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b70      	cmp	r3, #112	@ 0x70
 8005f9e:	d101      	bne.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 0207 	bic.w	r2, r3, #7
 8005fac:	4909      	ldr	r1, [pc, #36]	@ (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fb4:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40022000 	.word	0x40022000

08005fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d041      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ff8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ffc:	d02a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ffe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006002:	d824      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006008:	d008      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800600a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800600e:	d81e      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006018:	d010      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800601a:	e018      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800601c:	4b86      	ldr	r3, [pc, #536]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a85      	ldr	r2, [pc, #532]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006028:	e015      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f895 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800603a:	e00c      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3320      	adds	r3, #32
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f001 f97e 	bl	8007344 <RCCEx_PLLSAI2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800604c:	e003      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	74fb      	strb	r3, [r7, #19]
      break;
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800605c:	4b76      	ldr	r3, [pc, #472]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006062:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800606a:	4973      	ldr	r1, [pc, #460]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006072:	e001      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	7cfb      	ldrb	r3, [r7, #19]
 8006076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d041      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800608c:	d02a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800608e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006092:	d824      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006098:	d008      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800609a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800609e:	d81e      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80060a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060a8:	d010      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060aa:	e018      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060ac:	4b62      	ldr	r3, [pc, #392]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a61      	ldr	r2, [pc, #388]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b8:	e015      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 f84d 	bl	8007160 <RCCEx_PLLSAI1_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060ca:	e00c      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3320      	adds	r3, #32
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 f936 	bl	8007344 <RCCEx_PLLSAI2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	74fb      	strb	r3, [r7, #19]
      break;
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80060e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e6:	7cfb      	ldrb	r3, [r7, #19]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060ec:	4b52      	ldr	r3, [pc, #328]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060fa:	494f      	ldr	r1, [pc, #316]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006102:	e001      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006104:	7cfb      	ldrb	r3, [r7, #19]
 8006106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a0 	beq.w	8006256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006116:	2300      	movs	r3, #0
 8006118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800611a:	4b47      	ldr	r3, [pc, #284]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800612a:	2300      	movs	r3, #0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00d      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006130:	4b41      	ldr	r3, [pc, #260]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006134:	4a40      	ldr	r2, [pc, #256]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613a:	6593      	str	r3, [r2, #88]	@ 0x58
 800613c:	4b3e      	ldr	r3, [pc, #248]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006148:	2301      	movs	r3, #1
 800614a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800614c:	4b3b      	ldr	r3, [pc, #236]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3a      	ldr	r2, [pc, #232]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006158:	f7fc f874 	bl	8002244 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800615e:	e009      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006160:	f7fc f870 	bl	8002244 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	74fb      	strb	r3, [r7, #19]
        break;
 8006172:	e005      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006174:	4b31      	ldr	r3, [pc, #196]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d15c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006186:	4b2c      	ldr	r3, [pc, #176]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01f      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d019      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061a4:	4b24      	ldr	r3, [pc, #144]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061b0:	4b21      	ldr	r3, [pc, #132]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	4a20      	ldr	r2, [pc, #128]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061d0:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7fc f82f 	bl	8002244 <HAL_GetTick>
 80061e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e8:	e00b      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ea:	f7fc f82b 	bl	8002244 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d902      	bls.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006200:	e006      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006202:	4b0d      	ldr	r3, [pc, #52]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ec      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10c      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006216:	4b08      	ldr	r3, [pc, #32]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006226:	4904      	ldr	r1, [pc, #16]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800622e:	e009      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006244:	7c7b      	ldrb	r3, [r7, #17]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624a:	4ba6      	ldr	r3, [pc, #664]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624e:	4aa5      	ldr	r2, [pc, #660]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006262:	4ba0      	ldr	r3, [pc, #640]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006268:	f023 0203 	bic.w	r2, r3, #3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	499c      	ldr	r1, [pc, #624]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006284:	4b97      	ldr	r3, [pc, #604]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628a:	f023 020c 	bic.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	4994      	ldr	r1, [pc, #592]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a6:	4b8f      	ldr	r3, [pc, #572]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	498b      	ldr	r1, [pc, #556]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c8:	4b86      	ldr	r3, [pc, #536]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d6:	4983      	ldr	r1, [pc, #524]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062ea:	4b7e      	ldr	r3, [pc, #504]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f8:	497a      	ldr	r1, [pc, #488]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800630c:	4b75      	ldr	r3, [pc, #468]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800631a:	4972      	ldr	r1, [pc, #456]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800632e:	4b6d      	ldr	r3, [pc, #436]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633c:	4969      	ldr	r1, [pc, #420]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006350:	4b64      	ldr	r3, [pc, #400]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006356:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800635e:	4961      	ldr	r1, [pc, #388]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006372:	4b5c      	ldr	r3, [pc, #368]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006380:	4958      	ldr	r1, [pc, #352]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006394:	4b53      	ldr	r3, [pc, #332]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a2:	4950      	ldr	r1, [pc, #320]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063b6:	4b4b      	ldr	r3, [pc, #300]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c4:	4947      	ldr	r1, [pc, #284]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063d8:	4b42      	ldr	r3, [pc, #264]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063de:	f023 0203 	bic.w	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e6:	493f      	ldr	r1, [pc, #252]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d028      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063fa:	4b3a      	ldr	r3, [pc, #232]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006400:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006408:	4936      	ldr	r1, [pc, #216]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006418:	d106      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800641a:	4b32      	ldr	r3, [pc, #200]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	4a31      	ldr	r2, [pc, #196]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006420:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006424:	60d3      	str	r3, [r2, #12]
 8006426:	e011      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006430:	d10c      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3304      	adds	r3, #4
 8006436:	2101      	movs	r1, #1
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fe91 	bl	8007160 <RCCEx_PLLSAI1_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006442:	7cfb      	ldrb	r3, [r7, #19]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d028      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006458:	4b22      	ldr	r3, [pc, #136]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006466:	491f      	ldr	r1, [pc, #124]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006472:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006476:	d106      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006478:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800647e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006482:	60d3      	str	r3, [r2, #12]
 8006484:	e011      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800648e:	d10c      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fe62 	bl	8007160 <RCCEx_PLLSAI1_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80064a6:	7cfb      	ldrb	r3, [r7, #19]
 80064a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b6:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c4:	4907      	ldr	r1, [pc, #28]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d4:	d108      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064d6:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4a02      	ldr	r2, [pc, #8]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e0:	60d3      	str	r3, [r2, #12]
 80064e2:	e013      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80064e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064f0:	d10c      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3304      	adds	r3, #4
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fe31 	bl	8007160 <RCCEx_PLLSAI1_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006502:	7cfb      	ldrb	r3, [r7, #19]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006508:	7cfb      	ldrb	r3, [r7, #19]
 800650a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d02f      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006518:	4b2c      	ldr	r3, [pc, #176]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006526:	4929      	ldr	r1, [pc, #164]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006536:	d10d      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	2102      	movs	r1, #2
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fe0e 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d014      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800654e:	7cfb      	ldrb	r3, [r7, #19]
 8006550:	74bb      	strb	r3, [r7, #18]
 8006552:	e011      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3320      	adds	r3, #32
 8006562:	2102      	movs	r1, #2
 8006564:	4618      	mov	r0, r3
 8006566:	f000 feed 	bl	8007344 <RCCEx_PLLSAI2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006584:	4b11      	ldr	r3, [pc, #68]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006594:	490d      	ldr	r1, [pc, #52]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065a8:	4b08      	ldr	r3, [pc, #32]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065b8:	4904      	ldr	r1, [pc, #16]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000

080065d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e2:	d13e      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80065e4:	4bb4      	ldr	r3, [pc, #720]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ee:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f6:	d028      	beq.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065fe:	f200 858c 	bhi.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006608:	d005      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006610:	d00e      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006612:	f000 bd82 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006616:	4ba8      	ldr	r3, [pc, #672]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b02      	cmp	r3, #2
 8006622:	f040 857c 	bne.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800662a:	61fb      	str	r3, [r7, #28]
      break;
 800662c:	f000 bd77 	b.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006630:	4ba1      	ldr	r3, [pc, #644]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	f040 8571 	bne.w	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8006640:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006644:	61fb      	str	r3, [r7, #28]
      break;
 8006646:	f000 bd6c 	b.w	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800664a:	4b9b      	ldr	r3, [pc, #620]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006656:	f040 8566 	bne.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800665a:	4b98      	ldr	r3, [pc, #608]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800665c:	61fb      	str	r3, [r7, #28]
      break;
 800665e:	f000 bd62 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006662:	4b95      	ldr	r3, [pc, #596]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b03      	cmp	r3, #3
 8006670:	d036      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d840      	bhi.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d003      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d020      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006684:	e039      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006686:	4b8c      	ldr	r3, [pc, #560]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d116      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006692:	4b89      	ldr	r3, [pc, #548]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800669e:	4b86      	ldr	r3, [pc, #536]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	e005      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80066aa:	4b83      	ldr	r3, [pc, #524]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80066ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066b0:	0a1b      	lsrs	r3, r3, #8
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	4a82      	ldr	r2, [pc, #520]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80066be:	e01f      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61bb      	str	r3, [r7, #24]
      break;
 80066c4:	e01c      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066c6:	4b7c      	ldr	r3, [pc, #496]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d2:	d102      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80066d4:	4b7b      	ldr	r3, [pc, #492]	@ (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80066d6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80066d8:	e012      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
      break;
 80066de:	e00f      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066e0:	4b75      	ldr	r3, [pc, #468]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ec:	d102      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80066ee:	4b76      	ldr	r3, [pc, #472]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80066f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80066f2:	e005      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
      break;
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61bb      	str	r3, [r7, #24]
      break;
 80066fe:	bf00      	nop
    }

    switch(PeriphClk)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006706:	f000 842a 	beq.w	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006710:	f200 850b 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800671a:	f000 80df 	beq.w	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006724:	f200 8501 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800672e:	f000 80d5 	beq.w	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006738:	f200 84f7 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006742:	f000 8377 	beq.w	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674c:	f200 84ed 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006756:	f000 84c3 	beq.w	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006760:	f200 84e3 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800676a:	f000 82e6 	beq.w	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006774:	f200 84d9 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800677e:	f000 80ad 	beq.w	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006788:	f200 84cf 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006792:	f000 809b 	beq.w	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679c:	f200 84c5 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067a6:	d07f      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ae:	f200 84bc 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b8:	f000 8448 	beq.w	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c2:	f200 84b2 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067cc:	f000 83f0 	beq.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d6:	f200 84a8 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e0:	f000 8391 	beq.w	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ea:	f200 849e 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b80      	cmp	r3, #128	@ 0x80
 80067f2:	f000 835c 	beq.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b80      	cmp	r3, #128	@ 0x80
 80067fa:	f200 8496 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b20      	cmp	r3, #32
 8006802:	d84b      	bhi.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 848f 	beq.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3b01      	subs	r3, #1
 8006810:	2b1f      	cmp	r3, #31
 8006812:	f200 848a 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006816:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006a33 	.word	0x08006a33
 8006820:	08006aa3 	.word	0x08006aa3
 8006824:	0800712b 	.word	0x0800712b
 8006828:	08006b37 	.word	0x08006b37
 800682c:	0800712b 	.word	0x0800712b
 8006830:	0800712b 	.word	0x0800712b
 8006834:	0800712b 	.word	0x0800712b
 8006838:	08006bbf 	.word	0x08006bbf
 800683c:	0800712b 	.word	0x0800712b
 8006840:	0800712b 	.word	0x0800712b
 8006844:	0800712b 	.word	0x0800712b
 8006848:	0800712b 	.word	0x0800712b
 800684c:	0800712b 	.word	0x0800712b
 8006850:	0800712b 	.word	0x0800712b
 8006854:	0800712b 	.word	0x0800712b
 8006858:	08006c37 	.word	0x08006c37
 800685c:	0800712b 	.word	0x0800712b
 8006860:	0800712b 	.word	0x0800712b
 8006864:	0800712b 	.word	0x0800712b
 8006868:	0800712b 	.word	0x0800712b
 800686c:	0800712b 	.word	0x0800712b
 8006870:	0800712b 	.word	0x0800712b
 8006874:	0800712b 	.word	0x0800712b
 8006878:	0800712b 	.word	0x0800712b
 800687c:	0800712b 	.word	0x0800712b
 8006880:	0800712b 	.word	0x0800712b
 8006884:	0800712b 	.word	0x0800712b
 8006888:	0800712b 	.word	0x0800712b
 800688c:	0800712b 	.word	0x0800712b
 8006890:	0800712b 	.word	0x0800712b
 8006894:	0800712b 	.word	0x0800712b
 8006898:	08006cb9 	.word	0x08006cb9
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	f000 82d9 	beq.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80068a4:	f000 bc41 	b.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80068a8:	69b9      	ldr	r1, [r7, #24]
 80068aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80068ae:	f000 fe25 	bl	80074fc <RCCEx_GetSAIxPeriphCLKFreq>
 80068b2:	61f8      	str	r0, [r7, #28]
      break;
 80068b4:	f000 bc3a 	b.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80068b8:	40021000 	.word	0x40021000
 80068bc:	0003d090 	.word	0x0003d090
 80068c0:	0800e3a0 	.word	0x0800e3a0
 80068c4:	00f42400 	.word	0x00f42400
 80068c8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80068d2:	f000 fe13 	bl	80074fc <RCCEx_GetSAIxPeriphCLKFreq>
 80068d6:	61f8      	str	r0, [r7, #28]
      break;
 80068d8:	f000 bc28 	b.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80068dc:	4ba6      	ldr	r3, [pc, #664]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80068e6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068ee:	d015      	beq.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068f6:	f200 8092 	bhi.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006900:	d029      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006908:	f200 8089 	bhi.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d07b      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006918:	d04a      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800691a:	e080      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800691c:	4b96      	ldr	r3, [pc, #600]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d17c      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006928:	4b93      	ldr	r3, [pc, #588]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006934:	4b90      	ldr	r3, [pc, #576]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	e005      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006940:	4b8d      	ldr	r3, [pc, #564]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	4a8b      	ldr	r2, [pc, #556]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800694e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006952:	61fb      	str	r3, [r7, #28]
          break;
 8006954:	e065      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006956:	4b88      	ldr	r3, [pc, #544]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006962:	d160      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006964:	4b84      	ldr	r3, [pc, #528]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800696c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006970:	d159      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006972:	4b81      	ldr	r3, [pc, #516]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	0a1b      	lsrs	r3, r3, #8
 8006978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	fb03 f202 	mul.w	r2, r3, r2
 8006986:	4b7c      	ldr	r3, [pc, #496]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	091b      	lsrs	r3, r3, #4
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	3301      	adds	r3, #1
 8006992:	fbb2 f3f3 	udiv	r3, r2, r3
 8006996:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006998:	4b77      	ldr	r3, [pc, #476]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	0d5b      	lsrs	r3, r3, #21
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	3301      	adds	r3, #1
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ac:	61fb      	str	r3, [r7, #28]
          break;
 80069ae:	e03a      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80069b0:	4b71      	ldr	r3, [pc, #452]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069bc:	d135      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80069be:	4b6e      	ldr	r3, [pc, #440]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d12e      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	0a1b      	lsrs	r3, r3, #8
 80069d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	fb03 f202 	mul.w	r2, r3, r2
 80069e0:	4b65      	ldr	r3, [pc, #404]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	091b      	lsrs	r3, r3, #4
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	3301      	adds	r3, #1
 80069ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80069f2:	4b61      	ldr	r3, [pc, #388]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	0d5b      	lsrs	r3, r3, #21
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	3301      	adds	r3, #1
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a06:	61fb      	str	r3, [r7, #28]
          break;
 8006a08:	e00f      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d10a      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8006a18:	4b59      	ldr	r3, [pc, #356]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8006a1a:	61fb      	str	r3, [r7, #28]
          break;
 8006a1c:	e007      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8006a1e:	bf00      	nop
 8006a20:	e384      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006a22:	bf00      	nop
 8006a24:	e382      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006a26:	bf00      	nop
 8006a28:	e380      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006a2a:	bf00      	nop
 8006a2c:	e37e      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006a2e:	bf00      	nop
        break;
 8006a30:	e37c      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a32:	4b51      	ldr	r3, [pc, #324]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d828      	bhi.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8006a44:	a201      	add	r2, pc, #4	@ (adr r2, 8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a81 	.word	0x08006a81
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7ff fa46 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 8006a60:	61f8      	str	r0, [r7, #28]
          break;
 8006a62:	e01d      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a64:	f7ff f994 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006a68:	61f8      	str	r0, [r7, #28]
          break;
 8006a6a:	e019      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a6c:	4b42      	ldr	r3, [pc, #264]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a78:	d10f      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8006a7a:	4b42      	ldr	r3, [pc, #264]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006a7c:	61fb      	str	r3, [r7, #28]
          break;
 8006a7e:	e00c      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a80:	4b3d      	ldr	r3, [pc, #244]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a92:	61fb      	str	r3, [r7, #28]
          break;
 8006a94:	e003      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8006a96:	bf00      	nop
 8006a98:	e348      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006a9a:	bf00      	nop
 8006a9c:	e346      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006a9e:	bf00      	nop
        break;
 8006aa0:	e344      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006aa2:	4b35      	ldr	r3, [pc, #212]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d83a      	bhi.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8006ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006b2b 	.word	0x08006b2b
 8006ac4:	08006b2b 	.word	0x08006b2b
 8006ac8:	08006b2b 	.word	0x08006b2b
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b2b 	.word	0x08006b2b
 8006ad4:	08006b2b 	.word	0x08006b2b
 8006ad8:	08006b2b 	.word	0x08006b2b
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b2b 	.word	0x08006b2b
 8006ae4:	08006b2b 	.word	0x08006b2b
 8006ae8:	08006b2b 	.word	0x08006b2b
 8006aec:	08006b15 	.word	0x08006b15
          frequency = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7ff f9e6 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
          break;
 8006af6:	e01d      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8006af8:	f7ff f94a 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006afc:	61f8      	str	r0, [r7, #28]
          break;
 8006afe:	e019      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b00:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b0c:	d10f      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006b10:	61fb      	str	r3, [r7, #28]
          break;
 8006b12:	e00c      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b14:	4b18      	ldr	r3, [pc, #96]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b26:	61fb      	str	r3, [r7, #28]
          break;
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8006b2a:	bf00      	nop
 8006b2c:	e2fe      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b2e:	bf00      	nop
 8006b30:	e2fc      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b32:	bf00      	nop
        break;
 8006b34:	e2fa      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006b36:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b40:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b30      	cmp	r3, #48	@ 0x30
 8006b46:	d029      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b30      	cmp	r3, #48	@ 0x30
 8006b4c:	d831      	bhi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d019      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d82b      	bhi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d004      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8006b66:	e024      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b68:	f7ff f9aa 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006b6c:	61f8      	str	r0, [r7, #28]
          break;
 8006b6e:	e025      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b70:	f7ff f90e 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006b74:	61f8      	str	r0, [r7, #28]
          break;
 8006b76:	e021      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	0800e3a0 	.word	0x0800e3a0
 8006b80:	02dc6c00 	.word	0x02dc6c00
 8006b84:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b88:	4b8f      	ldr	r3, [pc, #572]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b94:	d10f      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8006b96:	4b8d      	ldr	r3, [pc, #564]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006b98:	61fb      	str	r3, [r7, #28]
          break;
 8006b9a:	e00c      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bae:	61fb      	str	r3, [r7, #28]
          break;
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8006bb2:	bf00      	nop
 8006bb4:	e2ba      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006bb6:	bf00      	nop
 8006bb8:	e2b8      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006bba:	bf00      	nop
        break;
 8006bbc:	e2b6      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006bbe:	4b82      	ldr	r3, [pc, #520]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bc8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bce:	d021      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bd4:	d829      	bhi.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b80      	cmp	r3, #128	@ 0x80
 8006bda:	d011      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d823      	bhi.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b40      	cmp	r3, #64	@ 0x40
 8006bec:	d004      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8006bee:	e01c      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7ff f966 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	61f8      	str	r0, [r7, #28]
          break;
 8006bf6:	e01d      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bf8:	f7ff f8ca 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006bfc:	61f8      	str	r0, [r7, #28]
          break;
 8006bfe:	e019      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c00:	4b71      	ldr	r3, [pc, #452]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0c:	d10f      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8006c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006c10:	61fb      	str	r3, [r7, #28]
          break;
 8006c12:	e00c      	b.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c14:	4b6c      	ldr	r3, [pc, #432]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d107      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c26:	61fb      	str	r3, [r7, #28]
          break;
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8006c2a:	bf00      	nop
 8006c2c:	e27e      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006c2e:	bf00      	nop
 8006c30:	e27c      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006c32:	bf00      	nop
        break;
 8006c34:	e27a      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006c36:	4b64      	ldr	r3, [pc, #400]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c40:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c48:	d025      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c50:	d82c      	bhi.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c58:	d013      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c60:	d824      	bhi.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6e:	d004      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8006c70:	e01c      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7ff f925 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006c76:	61f8      	str	r0, [r7, #28]
          break;
 8006c78:	e01d      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c7a:	f7ff f889 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006c7e:	61f8      	str	r0, [r7, #28]
          break;
 8006c80:	e019      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c82:	4b51      	ldr	r3, [pc, #324]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8e:	d10f      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8006c90:	4b4e      	ldr	r3, [pc, #312]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006c92:	61fb      	str	r3, [r7, #28]
          break;
 8006c94:	e00c      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c96:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8006ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca8:	61fb      	str	r3, [r7, #28]
          break;
 8006caa:	e003      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8006cac:	bf00      	nop
 8006cae:	e23d      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006cb0:	bf00      	nop
 8006cb2:	e23b      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006cb4:	bf00      	nop
        break;
 8006cb6:	e239      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006cb8:	4b43      	ldr	r3, [pc, #268]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cc2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cca:	d025      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cd2:	d82c      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cda:	d013      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ce2:	d824      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf0:	d004      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8006cf2:	e01c      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7ff f8e4 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006cf8:	61f8      	str	r0, [r7, #28]
          break;
 8006cfa:	e01d      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cfc:	f7ff f848 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006d00:	61f8      	str	r0, [r7, #28]
          break;
 8006d02:	e019      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d04:	4b30      	ldr	r3, [pc, #192]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d10:	d10f      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8006d12:	4b2e      	ldr	r3, [pc, #184]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006d14:	61fb      	str	r3, [r7, #28]
          break;
 8006d16:	e00c      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d18:	4b2b      	ldr	r3, [pc, #172]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d107      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8006d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2a:	61fb      	str	r3, [r7, #28]
          break;
 8006d2c:	e003      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8006d2e:	bf00      	nop
 8006d30:	e1fc      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006d32:	bf00      	nop
 8006d34:	e1fa      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006d36:	bf00      	nop
        break;
 8006d38:	e1f8      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d3a:	4b23      	ldr	r3, [pc, #140]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d44:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d4c:	d00c      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d54:	d868      	bhi.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5c:	d008      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d64:	d034      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8006d66:	e05f      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d68:	f7ff f812 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006d6c:	61f8      	str	r0, [r7, #28]
          break;
 8006d6e:	e060      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006d70:	4b15      	ldr	r3, [pc, #84]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d7c:	d156      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006d7e:	4b12      	ldr	r3, [pc, #72]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d050      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	0a1b      	lsrs	r3, r3, #8
 8006d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d94:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	fb03 f202 	mul.w	r2, r3, r2
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	3301      	adds	r3, #1
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	0e5b      	lsrs	r3, r3, #25
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	61fb      	str	r3, [r7, #28]
          break;
 8006dc6:	e031      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ddc:	d128      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8006dde:	4b99      	ldr	r3, [pc, #612]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d022      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006dea:	4b96      	ldr	r3, [pc, #600]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	fb03 f202 	mul.w	r2, r3, r2
 8006dfe:	4b91      	ldr	r3, [pc, #580]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	3301      	adds	r3, #1
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006e10:	4b8c      	ldr	r3, [pc, #560]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	0e5b      	lsrs	r3, r3, #25
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	61fb      	str	r3, [r7, #28]
          break;
 8006e26:	e003      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8006e28:	bf00      	nop
 8006e2a:	e17f      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006e2c:	bf00      	nop
 8006e2e:	e17d      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006e30:	bf00      	nop
        break;
 8006e32:	e17b      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006e34:	4b83      	ldr	r3, [pc, #524]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e3e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006e46:	f7ff f851 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 8006e4a:	61f8      	str	r0, [r7, #28]
        break;
 8006e4c:	e16e      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e4e:	f7fe ff9f 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006e52:	61f8      	str	r0, [r7, #28]
        break;
 8006e54:	e16a      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e56:	4b7b      	ldr	r3, [pc, #492]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e60:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e68:	d013      	beq.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e70:	d819      	bhi.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7e:	d004      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006e80:	e011      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e82:	f7ff f81d 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006e86:	61f8      	str	r0, [r7, #28]
          break;
 8006e88:	e010      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fe ff81 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006e8e:	61f8      	str	r0, [r7, #28]
          break;
 8006e90:	e00c      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e92:	4b6c      	ldr	r3, [pc, #432]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9e:	d104      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8006ea0:	4b69      	ldr	r3, [pc, #420]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8006ea2:	61fb      	str	r3, [r7, #28]
          break;
 8006ea4:	e001      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8006ea6:	bf00      	nop
 8006ea8:	e140      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006eaa:	bf00      	nop
        break;
 8006eac:	e13e      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006eae:	4b65      	ldr	r3, [pc, #404]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006eb8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec0:	d013      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec8:	d819      	bhi.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ed6:	d004      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8006ed8:	e011      	b.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eda:	f7fe fff1 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006ede:	61f8      	str	r0, [r7, #28]
          break;
 8006ee0:	e010      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ee2:	f7fe ff55 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006ee6:	61f8      	str	r0, [r7, #28]
          break;
 8006ee8:	e00c      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eea:	4b56      	ldr	r3, [pc, #344]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef6:	d104      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8006ef8:	4b53      	ldr	r3, [pc, #332]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8006efa:	61fb      	str	r3, [r7, #28]
          break;
 8006efc:	e001      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8006efe:	bf00      	nop
 8006f00:	e114      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f02:	bf00      	nop
        break;
 8006f04:	e112      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f06:	4b4f      	ldr	r3, [pc, #316]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f10:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f18:	d013      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f20:	d819      	bhi.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2e:	d004      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8006f30:	e011      	b.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f32:	f7fe ffc5 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006f36:	61f8      	str	r0, [r7, #28]
          break;
 8006f38:	e010      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fe ff29 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61f8      	str	r0, [r7, #28]
          break;
 8006f40:	e00c      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f42:	4b40      	ldr	r3, [pc, #256]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4e:	d104      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8006f50:	4b3d      	ldr	r3, [pc, #244]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8006f52:	61fb      	str	r3, [r7, #28]
          break;
 8006f54:	e001      	b.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8006f56:	bf00      	nop
 8006f58:	e0e8      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f5a:	bf00      	nop
        break;
 8006f5c:	e0e6      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f5e:	4b39      	ldr	r3, [pc, #228]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d011      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d818      	bhi.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d004      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8006f82:	e011      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7fe ff9c 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006f88:	61f8      	str	r0, [r7, #28]
          break;
 8006f8a:	e010      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f8c:	f7fe ff00 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8006f90:	61f8      	str	r0, [r7, #28]
          break;
 8006f92:	e00c      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f94:	4b2b      	ldr	r3, [pc, #172]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa0:	d104      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8006fa2:	4b29      	ldr	r3, [pc, #164]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8006fa4:	61fb      	str	r3, [r7, #28]
          break;
 8006fa6:	e001      	b.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8006fa8:	bf00      	nop
 8006faa:	e0bf      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006fac:	bf00      	nop
        break;
 8006fae:	e0bd      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006fb0:	4b24      	ldr	r3, [pc, #144]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006fba:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fc2:	d02c      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fca:	d833      	bhi.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fd2:	d01a      	beq.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fda:	d82b      	bhi.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fe8:	d004      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8006fea:	e023      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fec:	f7fe ff68 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8006ff0:	61f8      	str	r0, [r7, #28]
          break;
 8006ff2:	e026      	b.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ff4:	4b13      	ldr	r3, [pc, #76]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d11a      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8007002:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007006:	61fb      	str	r3, [r7, #28]
          break;
 8007008:	e016      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800700a:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007016:	d111      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8007018:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800701a:	61fb      	str	r3, [r7, #28]
          break;
 800701c:	e00e      	b.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800701e:	4b09      	ldr	r3, [pc, #36]	@ (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b02      	cmp	r3, #2
 800702a:	d109      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800702c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007030:	61fb      	str	r3, [r7, #28]
          break;
 8007032:	e005      	b.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8007034:	bf00      	nop
 8007036:	e079      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007038:	bf00      	nop
 800703a:	e077      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800703c:	bf00      	nop
 800703e:	e075      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007040:	bf00      	nop
        break;
 8007042:	e073      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007044:	40021000 	.word	0x40021000
 8007048:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800704c:	4b3a      	ldr	r3, [pc, #232]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007052:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007056:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800705e:	d02c      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007066:	d833      	bhi.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800706e:	d01a      	beq.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007076:	d82b      	bhi.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007084:	d004      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8007086:	e023      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fe ff1a 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 800708c:	61f8      	str	r0, [r7, #28]
          break;
 800708e:	e026      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007090:	4b29      	ldr	r3, [pc, #164]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d11a      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800709e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070a2:	61fb      	str	r3, [r7, #28]
          break;
 80070a4:	e016      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070a6:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b2:	d111      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80070b4:	4b21      	ldr	r3, [pc, #132]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80070b6:	61fb      	str	r3, [r7, #28]
          break;
 80070b8:	e00e      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d109      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80070c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070cc:	61fb      	str	r3, [r7, #28]
          break;
 80070ce:	e005      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80070d0:	bf00      	nop
 80070d2:	e02b      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80070d4:	bf00      	nop
 80070d6:	e029      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80070d8:	bf00      	nop
 80070da:	e027      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80070dc:	bf00      	nop
        break;
 80070de:	e025      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80070e0:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f8:	d004      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80070fa:	e00d      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070fc:	f7fe fee0 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8007100:	61f8      	str	r0, [r7, #28]
          break;
 8007102:	e009      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007104:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800710c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007110:	d101      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8007112:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8007114:	61fb      	str	r3, [r7, #28]
          break;
 8007116:	bf00      	nop
        break;
 8007118:	e008      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800711a:	bf00      	nop
 800711c:	e006      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800711e:	bf00      	nop
 8007120:	e004      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800712a:	bf00      	nop
    }
  }

  return(frequency);
 800712c:	69fb      	ldr	r3, [r7, #28]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000
 800713c:	00f42400 	.word	0x00f42400

08007140 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a04      	ldr	r2, [pc, #16]	@ (800715c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800714a:	f043 0304 	orr.w	r3, r3, #4
 800714e:	6013      	str	r3, [r2, #0]
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40021000 	.word	0x40021000

08007160 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800716e:	4b74      	ldr	r3, [pc, #464]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d018      	beq.n	80071ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800717a:	4b71      	ldr	r3, [pc, #452]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0203 	and.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d10d      	bne.n	80071a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
       ||
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007192:	4b6b      	ldr	r3, [pc, #428]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	091b      	lsrs	r3, r3, #4
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
       ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d047      	beq.n	8007236 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	73fb      	strb	r3, [r7, #15]
 80071aa:	e044      	b.n	8007236 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d018      	beq.n	80071e6 <RCCEx_PLLSAI1_Config+0x86>
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d825      	bhi.n	8007204 <RCCEx_PLLSAI1_Config+0xa4>
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d002      	beq.n	80071c2 <RCCEx_PLLSAI1_Config+0x62>
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d009      	beq.n	80071d4 <RCCEx_PLLSAI1_Config+0x74>
 80071c0:	e020      	b.n	8007204 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071c2:	4b5f      	ldr	r3, [pc, #380]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d11d      	bne.n	800720a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071d2:	e01a      	b.n	800720a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d116      	bne.n	800720e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071e4:	e013      	b.n	800720e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071e6:	4b56      	ldr	r3, [pc, #344]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10f      	bne.n	8007212 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071f2:	4b53      	ldr	r3, [pc, #332]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007202:	e006      	b.n	8007212 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	73fb      	strb	r3, [r7, #15]
      break;
 8007208:	e004      	b.n	8007214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800720a:	bf00      	nop
 800720c:	e002      	b.n	8007214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007212:	bf00      	nop
    }

    if(status == HAL_OK)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10d      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800721a:	4b49      	ldr	r3, [pc, #292]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6819      	ldr	r1, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	3b01      	subs	r3, #1
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	430b      	orrs	r3, r1
 8007230:	4943      	ldr	r1, [pc, #268]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007232:	4313      	orrs	r3, r2
 8007234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d17c      	bne.n	8007336 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800723c:	4b40      	ldr	r3, [pc, #256]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a3f      	ldr	r2, [pc, #252]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007248:	f7fa fffc 	bl	8002244 <HAL_GetTick>
 800724c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800724e:	e009      	b.n	8007264 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007250:	f7fa fff8 	bl	8002244 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d902      	bls.n	8007264 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	73fb      	strb	r3, [r7, #15]
        break;
 8007262:	e005      	b.n	8007270 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007264:	4b36      	ldr	r3, [pc, #216]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ef      	bne.n	8007250 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d15f      	bne.n	8007336 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d110      	bne.n	800729e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800727c:	4b30      	ldr	r3, [pc, #192]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007284:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6892      	ldr	r2, [r2, #8]
 800728c:	0211      	lsls	r1, r2, #8
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68d2      	ldr	r2, [r2, #12]
 8007292:	06d2      	lsls	r2, r2, #27
 8007294:	430a      	orrs	r2, r1
 8007296:	492a      	ldr	r1, [pc, #168]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007298:	4313      	orrs	r3, r2
 800729a:	610b      	str	r3, [r1, #16]
 800729c:	e027      	b.n	80072ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d112      	bne.n	80072ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072a4:	4b26      	ldr	r3, [pc, #152]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80072ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6892      	ldr	r2, [r2, #8]
 80072b4:	0211      	lsls	r1, r2, #8
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6912      	ldr	r2, [r2, #16]
 80072ba:	0852      	lsrs	r2, r2, #1
 80072bc:	3a01      	subs	r2, #1
 80072be:	0552      	lsls	r2, r2, #21
 80072c0:	430a      	orrs	r2, r1
 80072c2:	491f      	ldr	r1, [pc, #124]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	610b      	str	r3, [r1, #16]
 80072c8:	e011      	b.n	80072ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80072d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	0211      	lsls	r1, r2, #8
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6952      	ldr	r2, [r2, #20]
 80072e0:	0852      	lsrs	r2, r2, #1
 80072e2:	3a01      	subs	r2, #1
 80072e4:	0652      	lsls	r2, r2, #25
 80072e6:	430a      	orrs	r2, r1
 80072e8:	4915      	ldr	r1, [pc, #84]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072ee:	4b14      	ldr	r3, [pc, #80]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a13      	ldr	r2, [pc, #76]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fa:	f7fa ffa3 	bl	8002244 <HAL_GetTick>
 80072fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007300:	e009      	b.n	8007316 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007302:	f7fa ff9f 	bl	8002244 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d902      	bls.n	8007316 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	73fb      	strb	r3, [r7, #15]
          break;
 8007314:	e005      	b.n	8007322 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007316:	4b0a      	ldr	r3, [pc, #40]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0ef      	beq.n	8007302 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007328:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	4903      	ldr	r1, [pc, #12]	@ (8007340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40021000 	.word	0x40021000

08007344 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007352:	4b69      	ldr	r3, [pc, #420]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d018      	beq.n	8007390 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800735e:	4b66      	ldr	r3, [pc, #408]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0203 	and.w	r2, r3, #3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d10d      	bne.n	800738a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
       ||
 8007372:	2b00      	cmp	r3, #0
 8007374:	d009      	beq.n	800738a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007376:	4b60      	ldr	r3, [pc, #384]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	091b      	lsrs	r3, r3, #4
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
       ||
 8007386:	429a      	cmp	r2, r3
 8007388:	d047      	beq.n	800741a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	e044      	b.n	800741a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b03      	cmp	r3, #3
 8007396:	d018      	beq.n	80073ca <RCCEx_PLLSAI2_Config+0x86>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d825      	bhi.n	80073e8 <RCCEx_PLLSAI2_Config+0xa4>
 800739c:	2b01      	cmp	r3, #1
 800739e:	d002      	beq.n	80073a6 <RCCEx_PLLSAI2_Config+0x62>
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d009      	beq.n	80073b8 <RCCEx_PLLSAI2_Config+0x74>
 80073a4:	e020      	b.n	80073e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073a6:	4b54      	ldr	r3, [pc, #336]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d11d      	bne.n	80073ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073b6:	e01a      	b.n	80073ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073b8:	4b4f      	ldr	r3, [pc, #316]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d116      	bne.n	80073f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073c8:	e013      	b.n	80073f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073ca:	4b4b      	ldr	r3, [pc, #300]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10f      	bne.n	80073f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073d6:	4b48      	ldr	r3, [pc, #288]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073e6:	e006      	b.n	80073f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
      break;
 80073ec:	e004      	b.n	80073f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073ee:	bf00      	nop
 80073f0:	e002      	b.n	80073f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073f2:	bf00      	nop
 80073f4:	e000      	b.n	80073f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073fe:	4b3e      	ldr	r3, [pc, #248]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	3b01      	subs	r3, #1
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	430b      	orrs	r3, r1
 8007414:	4938      	ldr	r1, [pc, #224]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d166      	bne.n	80074ee <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007420:	4b35      	ldr	r3, [pc, #212]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a34      	ldr	r2, [pc, #208]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800742a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742c:	f7fa ff0a 	bl	8002244 <HAL_GetTick>
 8007430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007432:	e009      	b.n	8007448 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007434:	f7fa ff06 	bl	8002244 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d902      	bls.n	8007448 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	73fb      	strb	r3, [r7, #15]
        break;
 8007446:	e005      	b.n	8007454 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007448:	4b2b      	ldr	r3, [pc, #172]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ef      	bne.n	8007434 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d149      	bne.n	80074ee <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d110      	bne.n	8007482 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007460:	4b25      	ldr	r3, [pc, #148]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007468:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6892      	ldr	r2, [r2, #8]
 8007470:	0211      	lsls	r1, r2, #8
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68d2      	ldr	r2, [r2, #12]
 8007476:	06d2      	lsls	r2, r2, #27
 8007478:	430a      	orrs	r2, r1
 800747a:	491f      	ldr	r1, [pc, #124]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800747c:	4313      	orrs	r3, r2
 800747e:	614b      	str	r3, [r1, #20]
 8007480:	e011      	b.n	80074a6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007482:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800748a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6892      	ldr	r2, [r2, #8]
 8007492:	0211      	lsls	r1, r2, #8
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6912      	ldr	r2, [r2, #16]
 8007498:	0852      	lsrs	r2, r2, #1
 800749a:	3a01      	subs	r2, #1
 800749c:	0652      	lsls	r2, r2, #25
 800749e:	430a      	orrs	r2, r1
 80074a0:	4915      	ldr	r1, [pc, #84]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074a6:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a13      	ldr	r2, [pc, #76]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b2:	f7fa fec7 	bl	8002244 <HAL_GetTick>
 80074b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074b8:	e009      	b.n	80074ce <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074ba:	f7fa fec3 	bl	8002244 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d902      	bls.n	80074ce <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	73fb      	strb	r3, [r7, #15]
          break;
 80074cc:	e005      	b.n	80074da <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0ef      	beq.n	80074ba <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d106      	bne.n	80074ee <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074e0:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	4903      	ldr	r1, [pc, #12]	@ (80074f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40021000 	.word	0x40021000

080074fc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b089      	sub	sp, #36	@ 0x24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007518:	d10c      	bne.n	8007534 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800751a:	4b77      	ldr	r3, [pc, #476]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007520:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007524:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800752c:	d112      	bne.n	8007554 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800752e:	4b73      	ldr	r3, [pc, #460]	@ (80076fc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	e00f      	b.n	8007554 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753a:	d10b      	bne.n	8007554 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800753c:	4b6e      	ldr	r3, [pc, #440]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007546:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800754e:	d101      	bne.n	8007554 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007550:	4b6a      	ldr	r3, [pc, #424]	@ (80076fc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8007552:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 80c6 	bne.w	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007566:	d003      	beq.n	8007570 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800756e:	d13b      	bne.n	80075e8 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007570:	4b61      	ldr	r3, [pc, #388]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800757c:	f040 80b3 	bne.w	80076e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8007580:	4b5d      	ldr	r3, [pc, #372]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 80ac 	beq.w	80076e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800758e:	4b5a      	ldr	r3, [pc, #360]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	3301      	adds	r3, #1
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80075a2:	4b55      	ldr	r3, [pc, #340]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ac:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80075ae:	4b52      	ldr	r3, [pc, #328]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	0edb      	lsrs	r3, r3, #27
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80075c0:	4b4d      	ldr	r3, [pc, #308]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 80075cc:	2311      	movs	r3, #17
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	e001      	b.n	80075d6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 80075d2:	2307      	movs	r3, #7
 80075d4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	fb03 f202 	mul.w	r2, r3, r2
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80075e6:	e07e      	b.n	80076e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d139      	bne.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80075ee:	4b42      	ldr	r3, [pc, #264]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075fa:	d175      	bne.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80075fc:	4b3e      	ldr	r3, [pc, #248]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d06f      	beq.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007608:	4b3b      	ldr	r3, [pc, #236]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	091b      	lsrs	r3, r3, #4
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	3301      	adds	r3, #1
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800761c:	4b36      	ldr	r3, [pc, #216]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007626:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007628:	4b33      	ldr	r3, [pc, #204]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	0edb      	lsrs	r3, r3, #27
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800763a:	4b2f      	ldr	r3, [pc, #188]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8007646:	2311      	movs	r3, #17
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e001      	b.n	8007650 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800764c:	2307      	movs	r3, #7
 800764e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	fb03 f202 	mul.w	r2, r3, r2
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	fbb2 f3f3 	udiv	r3, r2, r3
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e042      	b.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007668:	d003      	beq.n	8007672 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007670:	d13a      	bne.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007672:	4b21      	ldr	r3, [pc, #132]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800767a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800767e:	d133      	bne.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8007680:	4b1d      	ldr	r3, [pc, #116]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d02d      	beq.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800768c:	4b1a      	ldr	r3, [pc, #104]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	3301      	adds	r3, #1
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	fbb2 f3f3 	udiv	r3, r2, r3
 800769e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80076a0:	4b15      	ldr	r3, [pc, #84]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	0a1b      	lsrs	r3, r3, #8
 80076a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076aa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80076ac:	4b12      	ldr	r3, [pc, #72]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	0edb      	lsrs	r3, r3, #27
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80076be:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80076ca:	2311      	movs	r3, #17
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e001      	b.n	80076d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80076d0:	2307      	movs	r3, #7
 80076d2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	fb03 f202 	mul.w	r2, r3, r2
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e000      	b.n	80076e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80076e6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80076e8:	69fb      	ldr	r3, [r7, #28]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3724      	adds	r7, #36	@ 0x24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000
 80076fc:	001fff68 	.word	0x001fff68

08007700 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d079      	beq.n	8007806 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fa fa78 	bl	8001c1c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b10      	cmp	r3, #16
 8007740:	d058      	beq.n	80077f4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	22ca      	movs	r2, #202	@ 0xca
 8007748:	625a      	str	r2, [r3, #36]	@ 0x24
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2253      	movs	r2, #83	@ 0x53
 8007750:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9a4 	bl	8007aa0 <RTC_EnterInitMode>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d127      	bne.n	80077b2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007774:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6899      	ldr	r1, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	68d2      	ldr	r2, [r2, #12]
 800779c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6919      	ldr	r1, [r3, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	041a      	lsls	r2, r3, #16
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9a8 	bl	8007b08 <RTC_ExitInitMode>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d113      	bne.n	80077ea <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0203 	bic.w	r2, r2, #3
 80077d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	22ff      	movs	r2, #255	@ 0xff
 80077f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80077f2:	e001      	b.n	80077f8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_RTC_SetTime+0x1a>
 8007826:	2302      	movs	r3, #2
 8007828:	e08b      	b.n	8007942 <HAL_RTC_SetTime+0x132>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	22ca      	movs	r2, #202	@ 0xca
 8007840:	625a      	str	r2, [r3, #36]	@ 0x24
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2253      	movs	r2, #83	@ 0x53
 8007848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f928 	bl	8007aa0 <RTC_EnterInitMode>
 8007850:	4603      	mov	r3, r0
 8007852:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007854:	7cfb      	ldrb	r3, [r7, #19]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d163      	bne.n	8007922 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d126      	bne.n	80078ae <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f983 	bl	8007b84 <RTC_ByteToBcd2>
 800787e:	4603      	mov	r3, r0
 8007880:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f97c 	bl	8007b84 <RTC_ByteToBcd2>
 800788c:	4603      	mov	r3, r0
 800788e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007890:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	789b      	ldrb	r3, [r3, #2]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f974 	bl	8007b84 <RTC_ByteToBcd2>
 800789c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800789e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	78db      	ldrb	r3, [r3, #3]
 80078a6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e018      	b.n	80078e0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80078ce:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80078d4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	78db      	ldrb	r3, [r3, #3]
 80078da:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80078ea:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80078ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80078fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6899      	ldr	r1, [r3, #8]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	431a      	orrs	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f8f5 	bl	8007b08 <RTC_ExitInitMode>
 800791e:	4603      	mov	r3, r0
 8007920:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	22ff      	movs	r2, #255	@ 0xff
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800792a:	7cfb      	ldrb	r3, [r7, #19]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007940:	7cfb      	ldrb	r3, [r7, #19]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	bd90      	pop	{r4, r7, pc}

0800794a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800794a:	b590      	push	{r4, r7, lr}
 800794c:	b087      	sub	sp, #28
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_RTC_SetDate+0x1a>
 8007960:	2302      	movs	r3, #2
 8007962:	e075      	b.n	8007a50 <HAL_RTC_SetDate+0x106>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10e      	bne.n	8007998 <HAL_RTC_SetDate+0x4e>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d008      	beq.n	8007998 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	f023 0310 	bic.w	r3, r3, #16
 800798e:	b2db      	uxtb	r3, r3
 8007990:	330a      	adds	r3, #10
 8007992:	b2da      	uxtb	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d11c      	bne.n	80079d8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	78db      	ldrb	r3, [r3, #3]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f8ee 	bl	8007b84 <RTC_ByteToBcd2>
 80079a8:	4603      	mov	r3, r0
 80079aa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f8e7 	bl	8007b84 <RTC_ByteToBcd2>
 80079b6:	4603      	mov	r3, r0
 80079b8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079ba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	789b      	ldrb	r3, [r3, #2]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f8df 	bl	8007b84 <RTC_ByteToBcd2>
 80079c6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079c8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e00e      	b.n	80079f6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	78db      	ldrb	r3, [r3, #3]
 80079dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079e4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80079ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	22ca      	movs	r2, #202	@ 0xca
 80079fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2253      	movs	r2, #83	@ 0x53
 8007a04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f84a 	bl	8007aa0 <RTC_EnterInitMode>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007a10:	7cfb      	ldrb	r3, [r7, #19]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10c      	bne.n	8007a30 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007a20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f86e 	bl	8007b08 <RTC_ExitInitMode>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	22ff      	movs	r2, #255	@ 0xff
 8007a36:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007a38:	7cfb      	ldrb	r3, [r7, #19]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007a4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd90      	pop	{r4, r7, pc}

08007a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a0d      	ldr	r2, [pc, #52]	@ (8007a9c <HAL_RTC_WaitForSynchro+0x44>)
 8007a66:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007a68:	f7fa fbec 	bl	8002244 <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a6e:	e009      	b.n	8007a84 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a70:	f7fa fbe8 	bl	8002244 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a7e:	d901      	bls.n	8007a84 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e007      	b.n	8007a94 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0ee      	beq.n	8007a70 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	0003ff5f 	.word	0x0003ff5f

08007aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d120      	bne.n	8007afc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ac4:	f7fa fbbe 	bl	8002244 <HAL_GetTick>
 8007ac8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007aca:	e00d      	b.n	8007ae8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007acc:	f7fa fbba 	bl	8002244 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ada:	d905      	bls.n	8007ae8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <RTC_EnterInitMode+0x5c>
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d1e7      	bne.n	8007acc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007b14:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4a19      	ldr	r2, [pc, #100]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b1e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b20:	4b17      	ldr	r3, [pc, #92]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10c      	bne.n	8007b46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff93 	bl	8007a58 <HAL_RTC_WaitForSynchro>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01e      	beq.n	8007b76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	e017      	b.n	8007b76 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b46:	4b0e      	ldr	r3, [pc, #56]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b4c:	f023 0320 	bic.w	r3, r3, #32
 8007b50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff80 	bl	8007a58 <HAL_RTC_WaitForSynchro>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2203      	movs	r2, #3
 8007b62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b6a:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	4a04      	ldr	r2, [pc, #16]	@ (8007b80 <RTC_ExitInitMode+0x78>)
 8007b70:	f043 0320 	orr.w	r3, r3, #32
 8007b74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40002800 	.word	0x40002800

08007b84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007b96:	e005      	b.n	8007ba4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	3b0a      	subs	r3, #10
 8007ba2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	2b09      	cmp	r3, #9
 8007ba8:	d8f6      	bhi.n	8007b98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b2db      	uxtb	r3, r3
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e155      	b.n	8007e82 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fa f9d2 	bl	8001f94 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f959 	bl	8007ea8 <SAI_Disable>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e140      	b.n	8007e82 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d00c      	beq.n	8007c2a <HAL_SAI_Init+0x66>
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d80d      	bhi.n	8007c30 <HAL_SAI_Init+0x6c>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_SAI_Init+0x5a>
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d003      	beq.n	8007c24 <HAL_SAI_Init+0x60>
 8007c1c:	e008      	b.n	8007c30 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
      break;
 8007c22:	e008      	b.n	8007c36 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c24:	2310      	movs	r3, #16
 8007c26:	61fb      	str	r3, [r7, #28]
      break;
 8007c28:	e005      	b.n	8007c36 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c2a:	2320      	movs	r3, #32
 8007c2c:	61fb      	str	r3, [r7, #28]
      break;
 8007c2e:	e002      	b.n	8007c36 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
      break;
 8007c34:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d81d      	bhi.n	8007c7a <HAL_SAI_Init+0xb6>
 8007c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <HAL_SAI_Init+0x80>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c5b 	.word	0x08007c5b
 8007c4c:	08007c63 	.word	0x08007c63
 8007c50:	08007c6b 	.word	0x08007c6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
      break;
 8007c58:	e012      	b.n	8007c80 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c5e:	617b      	str	r3, [r7, #20]
      break;
 8007c60:	e00e      	b.n	8007c80 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c66:	617b      	str	r3, [r7, #20]
      break;
 8007c68:	e00a      	b.n	8007c80 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c6e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	61fb      	str	r3, [r7, #28]
      break;
 8007c78:	e002      	b.n	8007c80 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
      break;
 8007c7e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a81      	ldr	r2, [pc, #516]	@ (8007e8c <HAL_SAI_Init+0x2c8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d004      	beq.n	8007c94 <HAL_SAI_Init+0xd0>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a80      	ldr	r2, [pc, #512]	@ (8007e90 <HAL_SAI_Init+0x2cc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d103      	bne.n	8007c9c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8007c94:	4a7f      	ldr	r2, [pc, #508]	@ (8007e94 <HAL_SAI_Init+0x2d0>)
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	e002      	b.n	8007ca2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007c9c:	4a7e      	ldr	r2, [pc, #504]	@ (8007e98 <HAL_SAI_Init+0x2d4>)
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d041      	beq.n	8007d2e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a77      	ldr	r2, [pc, #476]	@ (8007e8c <HAL_SAI_Init+0x2c8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d004      	beq.n	8007cbe <HAL_SAI_Init+0xfa>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a75      	ldr	r2, [pc, #468]	@ (8007e90 <HAL_SAI_Init+0x2cc>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d105      	bne.n	8007cca <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007cbe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007cc2:	f7fe fc85 	bl	80065d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cc6:	6138      	str	r0, [r7, #16]
 8007cc8:	e004      	b.n	8007cd4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007cca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007cce:	f7fe fc7f 	bl	80065d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cd2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	025b      	lsls	r3, r3, #9
 8007ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cea:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a6b      	ldr	r2, [pc, #428]	@ (8007e9c <HAL_SAI_Init+0x2d8>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	08da      	lsrs	r2, r3, #3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	4b67      	ldr	r3, [pc, #412]	@ (8007e9c <HAL_SAI_Init+0x2d8>)
 8007cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8007d02:	08da      	lsrs	r2, r3, #3
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	1aca      	subs	r2, r1, r3
 8007d0e:	2a08      	cmp	r2, #8
 8007d10:	d904      	bls.n	8007d1c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d104      	bne.n	8007d2e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	085a      	lsrs	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_SAI_Init+0x17a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d109      	bne.n	8007d52 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_SAI_Init+0x186>
 8007d46:	2300      	movs	r3, #0
 8007d48:	e001      	b.n	8007d4e <HAL_SAI_Init+0x18a>
 8007d4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	e008      	b.n	8007d64 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d102      	bne.n	8007d60 <HAL_SAI_Init+0x19c>
 8007d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d5e:	e000      	b.n	8007d62 <HAL_SAI_Init+0x19e>
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ea0 <HAL_SAI_Init+0x2dc>)
 8007d70:	400b      	ands	r3, r1
 8007d72:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6819      	ldr	r1, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d82:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d88:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8007d9c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007da8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	051b      	lsls	r3, r3, #20
 8007db0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6812      	ldr	r2, [r2, #0]
 8007dc4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007dc8:	f023 030f 	bic.w	r3, r3, #15
 8007dcc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6859      	ldr	r1, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6899      	ldr	r1, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b2b      	ldr	r3, [pc, #172]	@ (8007ea4 <HAL_SAI_Init+0x2e0>)
 8007df8:	400b      	ands	r3, r1
 8007dfa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6899      	ldr	r1, [r3, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e06:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e0c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007e12:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007e18:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007e22:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68d9      	ldr	r1, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007e3a:	400b      	ands	r3, r1
 8007e3c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68d9      	ldr	r1, [r3, #12]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e52:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e54:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40015404 	.word	0x40015404
 8007e90:	40015424 	.word	0x40015424
 8007e94:	40015400 	.word	0x40015400
 8007e98:	40015800 	.word	0x40015800
 8007e9c:	cccccccd 	.word	0xcccccccd
 8007ea0:	ff05c010 	.word	0xff05c010
 8007ea4:	fff88000 	.word	0xfff88000

08007ea8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007eb0:	4b18      	ldr	r3, [pc, #96]	@ (8007f14 <SAI_Disable+0x6c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a18      	ldr	r2, [pc, #96]	@ (8007f18 <SAI_Disable+0x70>)
 8007eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eba:	0b1b      	lsrs	r3, r3, #12
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007ed2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	72fb      	strb	r3, [r7, #11]
      break;
 8007eee:	e009      	b.n	8007f04 <SAI_Disable+0x5c>
    }
    count--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e7      	bne.n	8007ed4 <SAI_Disable+0x2c>

  return status;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000000 	.word	0x20000000
 8007f18:	95cbec1b 	.word	0x95cbec1b

08007f1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e02d      	b.n	8007f8a <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d105      	bne.n	8007f46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f9 fe9d 	bl	8001c80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f820 	bl	8007f94 <HAL_SD_InitCard>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e015      	b.n	8007f8a <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa5f 	bl	8008428 <HAL_SD_ConfigWideBusOperation>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e00a      	b.n	8007f8a <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f94:	b5b0      	push	{r4, r5, r7, lr}
 8007f96:	b08e      	sub	sp, #56	@ 0x38
 8007f98:	af04      	add	r7, sp, #16
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007fb0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007fb4:	f7fe fb0c 	bl	80065d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fb8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d109      	bne.n	8007fd4 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007fce:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e07b      	b.n	80080cc <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	09db      	lsrs	r3, r3, #7
 8007fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80080d4 <HAL_SD_InitCard+0x140>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	3b02      	subs	r3, #2
 8007fe2:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681d      	ldr	r5, [r3, #0]
 8007fe8:	466c      	mov	r4, sp
 8007fea:	f107 0314 	add.w	r3, r7, #20
 8007fee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f001 fc9d 	bl	800993c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008010:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4618      	mov	r0, r3
 8008018:	f001 fcca 	bl	80099b0 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800802a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	3302      	adds	r3, #2
 8008030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008032:	fbb2 f3f3 	udiv	r3, r2, r3
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008038:	4a27      	ldr	r2, [pc, #156]	@ (80080d8 <HAL_SD_InitCard+0x144>)
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008040:	3301      	adds	r3, #1
 8008042:	4618      	mov	r0, r3
 8008044:	f7fa f90a 	bl	800225c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb69 	bl	8008720 <SD_PowerON>
 800804e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e02e      	b.n	80080cc <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa96 	bl	80085a0 <SD_InitCard>
 8008074:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e01b      	b.n	80080cc <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800809c:	4618      	mov	r0, r3
 800809e:	f001 fd1a 	bl	8009ad6 <SDMMC_CmdBlockLength>
 80080a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00f      	beq.n	80080ca <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a0b      	ldr	r2, [pc, #44]	@ (80080dc <HAL_SD_InitCard+0x148>)
 80080b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3728      	adds	r7, #40	@ 0x28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bdb0      	pop	{r4, r5, r7, pc}
 80080d4:	014f8b59 	.word	0x014f8b59
 80080d8:	00012110 	.word	0x00012110
 80080dc:	004005ff 	.word	0x004005ff

080080e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ee:	0f9b      	lsrs	r3, r3, #30
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080fa:	0e9b      	lsrs	r3, r3, #26
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	b2da      	uxtb	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800810c:	0e1b      	lsrs	r3, r3, #24
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	b2da      	uxtb	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800811e:	0c1b      	lsrs	r3, r3, #16
 8008120:	b2da      	uxtb	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812a:	0a1b      	lsrs	r3, r3, #8
 800812c:	b2da      	uxtb	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008136:	b2da      	uxtb	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008140:	0d1b      	lsrs	r3, r3, #20
 8008142:	b29a      	uxth	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800814c:	0c1b      	lsrs	r3, r3, #16
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	b2da      	uxtb	r2, r3
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800815e:	0bdb      	lsrs	r3, r3, #15
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008170:	0b9b      	lsrs	r3, r3, #14
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008182:	0b5b      	lsrs	r3, r3, #13
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008194:	0b1b      	lsrs	r3, r3, #12
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	b2da      	uxtb	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2200      	movs	r2, #0
 80081a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d163      	bne.n	8008278 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081b4:	009a      	lsls	r2, r3, #2
 80081b6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80081ba:	4013      	ands	r3, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80081c0:	0f92      	lsrs	r2, r2, #30
 80081c2:	431a      	orrs	r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081cc:	0edb      	lsrs	r3, r3, #27
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081de:	0e1b      	lsrs	r3, r3, #24
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f0:	0d5b      	lsrs	r3, r3, #21
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008202:	0c9b      	lsrs	r3, r3, #18
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	b2da      	uxtb	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008214:	0bdb      	lsrs	r3, r3, #15
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	b2da      	uxtb	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	7e1b      	ldrb	r3, [r3, #24]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	3302      	adds	r3, #2
 8008238:	2201      	movs	r2, #1
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008242:	fb03 f202 	mul.w	r2, r3, r2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	7a1b      	ldrb	r3, [r3, #8]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 030f 	and.w	r3, r3, #15
 8008254:	2201      	movs	r2, #1
 8008256:	409a      	lsls	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008264:	0a52      	lsrs	r2, r2, #9
 8008266:	fb03 f202 	mul.w	r2, r3, r2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008274:	661a      	str	r2, [r3, #96]	@ 0x60
 8008276:	e031      	b.n	80082dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827c:	2b01      	cmp	r3, #1
 800827e:	d11d      	bne.n	80082bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008284:	041b      	lsls	r3, r3, #16
 8008286:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800828e:	0c1b      	lsrs	r3, r3, #16
 8008290:	431a      	orrs	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	3301      	adds	r3, #1
 800829c:	029a      	lsls	r2, r3, #10
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80082ba:	e00f      	b.n	80082dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a58      	ldr	r2, [pc, #352]	@ (8008424 <HAL_SD_GetCardCSD+0x344>)
 80082c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e09d      	b.n	8008418 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082e0:	0b9b      	lsrs	r3, r3, #14
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f2:	09db      	lsrs	r3, r3, #7
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800830a:	b2da      	uxtb	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008314:	0fdb      	lsrs	r3, r3, #31
 8008316:	b2da      	uxtb	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008320:	0f5b      	lsrs	r3, r3, #29
 8008322:	b2db      	uxtb	r3, r3
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	b2da      	uxtb	r2, r3
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008332:	0e9b      	lsrs	r3, r3, #26
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	b2da      	uxtb	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008344:	0d9b      	lsrs	r3, r3, #22
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	b2da      	uxtb	r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008356:	0d5b      	lsrs	r3, r3, #21
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	b2da      	uxtb	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	b2da      	uxtb	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008386:	0bdb      	lsrs	r3, r3, #15
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839a:	0b9b      	lsrs	r3, r3, #14
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ae:	0b5b      	lsrs	r3, r3, #13
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c2:	0b1b      	lsrs	r3, r3, #12
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d6:	0a9b      	lsrs	r3, r3, #10
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083fe:	085b      	lsrs	r3, r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008406:	b2da      	uxtb	r2, r3
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	004005ff 	.word	0x004005ff

08008428 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008428:	b5b0      	push	{r4, r5, r7, lr}
 800842a:	b090      	sub	sp, #64	@ 0x40
 800842c:	af04      	add	r7, sp, #16
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2203      	movs	r2, #3
 800843c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008444:	2b03      	cmp	r3, #3
 8008446:	d02e      	beq.n	80084a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800844e:	d106      	bne.n	800845e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	639a      	str	r2, [r3, #56]	@ 0x38
 800845c:	e029      	b.n	80084b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008464:	d10a      	bne.n	800847c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9e8 	bl	800883c <SD_WideBus_Enable>
 800846c:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	639a      	str	r2, [r3, #56]	@ 0x38
 800847a:	e01a      	b.n	80084b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa25 	bl	80088d2 <SD_WideBus_Disable>
 8008488:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38
 8008496:	e00c      	b.n	80084b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80084a4:	e005      	b.n	80084b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d007      	beq.n	80084ca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a35      	ldr	r2, [pc, #212]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80084c0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80084c8:	e042      	b.n	8008550 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80084ca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80084ce:	f7fe f87f 	bl	80065d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80084d2:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d031      	beq.n	800853e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	3302      	adds	r3, #2
 80084fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008502:	4a25      	ldr	r2, [pc, #148]	@ (8008598 <HAL_SD_ConfigWideBusOperation+0x170>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d907      	bls.n	8008518 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	4a24      	ldr	r2, [pc, #144]	@ (800859c <HAL_SD_ConfigWideBusOperation+0x174>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	0ddb      	lsrs	r3, r3, #23
 8008512:	3b02      	subs	r3, #2
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	e002      	b.n	800851e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681d      	ldr	r5, [r3, #0]
 8008522:	466c      	mov	r4, sp
 8008524:	f107 0318 	add.w	r3, r7, #24
 8008528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800852c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008536:	4628      	mov	r0, r5
 8008538:	f001 fa00 	bl	800993c <SDMMC_Init>
 800853c:	e008      	b.n	8008550 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008542:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fabc 	bl	8009ad6 <SDMMC_CmdBlockLength>
 800855e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00c      	beq.n	8008580 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a0a      	ldr	r2, [pc, #40]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800856c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800858c:	4618      	mov	r0, r3
 800858e:	3730      	adds	r7, #48	@ 0x30
 8008590:	46bd      	mov	sp, r7
 8008592:	bdb0      	pop	{r4, r5, r7, pc}
 8008594:	004005ff 	.word	0x004005ff
 8008598:	017d7840 	.word	0x017d7840
 800859c:	55e63b89 	.word	0x55e63b89

080085a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085a0:	b5b0      	push	{r4, r5, r7, lr}
 80085a2:	b090      	sub	sp, #64	@ 0x40
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085a8:	2301      	movs	r3, #1
 80085aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fa0c 	bl	80099ce <SDMMC_GetPowerState>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d102      	bne.n	80085c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80085c0:	e0aa      	b.n	8008718 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d02f      	beq.n	800862a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 fb8b 	bl	8009cea <SDMMC_CmdSendCID>
 80085d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80085dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085de:	e09b      	b.n	8008718 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2100      	movs	r1, #0
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 fa36 	bl	8009a58 <SDMMC_GetResponse>
 80085ec:	4602      	mov	r2, r0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2104      	movs	r1, #4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fa2d 	bl	8009a58 <SDMMC_GetResponse>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2108      	movs	r1, #8
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fa24 	bl	8009a58 <SDMMC_GetResponse>
 8008610:	4602      	mov	r2, r0
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	210c      	movs	r1, #12
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fa1b 	bl	8009a58 <SDMMC_GetResponse>
 8008622:	4602      	mov	r2, r0
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862e:	2b03      	cmp	r3, #3
 8008630:	d00d      	beq.n	800864e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f107 020e 	add.w	r2, r7, #14
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fb91 	bl	8009d64 <SDMMC_CmdSetRelAdd>
 8008642:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <SD_InitCard+0xae>
    {
      return errorstate;
 800864a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864c:	e064      	b.n	8008718 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008652:	2b03      	cmp	r3, #3
 8008654:	d036      	beq.n	80086c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008656:	89fb      	ldrh	r3, [r7, #14]
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f001 fb5b 	bl	8009d26 <SDMMC_CmdSendCSD>
 8008670:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867a:	e04d      	b.n	8008718 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f001 f9e8 	bl	8009a58 <SDMMC_GetResponse>
 8008688:	4602      	mov	r2, r0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2104      	movs	r1, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f001 f9df 	bl	8009a58 <SDMMC_GetResponse>
 800869a:	4602      	mov	r2, r0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2108      	movs	r1, #8
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 f9d6 	bl	8009a58 <SDMMC_GetResponse>
 80086ac:	4602      	mov	r2, r0
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	210c      	movs	r1, #12
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 f9cd 	bl	8009a58 <SDMMC_GetResponse>
 80086be:	4602      	mov	r2, r0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2104      	movs	r1, #4
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f9c4 	bl	8009a58 <SDMMC_GetResponse>
 80086d0:	4603      	mov	r3, r0
 80086d2:	0d1a      	lsrs	r2, r3, #20
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80086d8:	f107 0310 	add.w	r3, r7, #16
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fcfe 	bl	80080e0 <HAL_SD_GetCardCSD>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80086ee:	e013      	b.n	8008718 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	2200      	movs	r2, #0
 80086fc:	461c      	mov	r4, r3
 80086fe:	4615      	mov	r5, r2
 8008700:	4622      	mov	r2, r4
 8008702:	462b      	mov	r3, r5
 8008704:	4608      	mov	r0, r1
 8008706:	f001 fa08 	bl	8009b1a <SDMMC_CmdSelDesel>
 800870a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800870c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <SD_InitCard+0x176>
  {
    return errorstate;
 8008712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008714:	e000      	b.n	8008718 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3740      	adds	r7, #64	@ 0x40
 800871c:	46bd      	mov	sp, r7
 800871e:	bdb0      	pop	{r4, r5, r7, pc}

08008720 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	2300      	movs	r3, #0
 8008732:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4618      	mov	r0, r3
 800873a:	f001 fa11 	bl	8009b60 <SDMMC_CmdGoIdleState>
 800873e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	e072      	b.n	8008830 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fa24 	bl	8009b9c <SDMMC_CmdOperCond>
 8008754:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00d      	beq.n	8008778 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f001 f9fa 	bl	8009b60 <SDMMC_CmdGoIdleState>
 800876c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e05b      	b.n	8008830 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008782:	2b01      	cmp	r3, #1
 8008784:	d137      	bne.n	80087f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fa24 	bl	8009bda <SDMMC_CmdAppCommand>
 8008792:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d02d      	beq.n	80087f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800879a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800879e:	e047      	b.n	8008830 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fa17 	bl	8009bda <SDMMC_CmdAppCommand>
 80087ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	e03b      	b.n	8008830 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	491e      	ldr	r1, [pc, #120]	@ (8008838 <SD_PowerON+0x118>)
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 fa2d 	bl	8009c1e <SDMMC_CmdAppOperCommand>
 80087c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087d0:	e02e      	b.n	8008830 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2100      	movs	r1, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 f93d 	bl	8009a58 <SDMMC_GetResponse>
 80087de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	0fdb      	lsrs	r3, r3, #31
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <SD_PowerON+0xcc>
 80087e8:	2301      	movs	r3, #1
 80087ea:	e000      	b.n	80087ee <SD_PowerON+0xce>
 80087ec:	2300      	movs	r3, #0
 80087ee:	613b      	str	r3, [r7, #16]

    count++;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3301      	adds	r3, #1
 80087f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d802      	bhi.n	8008806 <SD_PowerON+0xe6>
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0cc      	beq.n	80087a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800880c:	4293      	cmp	r3, r2
 800880e:	d902      	bls.n	8008816 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008814:	e00c      	b.n	8008830 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	645a      	str	r2, [r3, #68]	@ 0x44
 8008826:	e002      	b.n	800882e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	c1100000 	.word	0xc1100000

0800883c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	2300      	movs	r3, #0
 800884a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f001 f900 	bl	8009a58 <SDMMC_GetResponse>
 8008858:	4603      	mov	r3, r0
 800885a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800885e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008862:	d102      	bne.n	800886a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008864:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008868:	e02f      	b.n	80088ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800886a:	f107 030c 	add.w	r3, r7, #12
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f879 	bl	8008968 <SD_FindSCR>
 8008876:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	e023      	b.n	80088ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01c      	beq.n	80088c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f001 f99e 	bl	8009bda <SDMMC_CmdAppCommand>
 800889e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	e00f      	b.n	80088ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2102      	movs	r1, #2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 f9d7 	bl	8009c64 <SDMMC_CmdBusWidth>
 80088b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	e003      	b.n	80088ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e001      	b.n	80088ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	2300      	movs	r3, #0
 80088e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f8b5 	bl	8009a58 <SDMMC_GetResponse>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088f8:	d102      	bne.n	8008900 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088fe:	e02f      	b.n	8008960 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008900:	f107 030c 	add.w	r3, r7, #12
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f82e 	bl	8008968 <SD_FindSCR>
 800890c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	e023      	b.n	8008960 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01c      	beq.n	800895c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f001 f953 	bl	8009bda <SDMMC_CmdAppCommand>
 8008934:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	e00f      	b.n	8008960 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f001 f98c 	bl	8009c64 <SDMMC_CmdBusWidth>
 800894c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	e003      	b.n	8008960 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008958:	2300      	movs	r3, #0
 800895a:	e001      	b.n	8008960 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800895c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008968:	b590      	push	{r4, r7, lr}
 800896a:	b08f      	sub	sp, #60	@ 0x3c
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008972:	f7f9 fc67 	bl	8002244 <HAL_GetTick>
 8008976:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800897c:	2300      	movs	r3, #0
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2108      	movs	r1, #8
 800898e:	4618      	mov	r0, r3
 8008990:	f001 f8a1 	bl	8009ad6 <SDMMC_CmdBlockLength>
 8008994:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	e0a9      	b.n	8008af4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f001 f914 	bl	8009bda <SDMMC_CmdAppCommand>
 80089b2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <SD_FindSCR+0x56>
  {
    return errorstate;
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	e09a      	b.n	8008af4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089be:	f04f 33ff 	mov.w	r3, #4294967295
 80089c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80089c4:	2308      	movs	r3, #8
 80089c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80089c8:	2330      	movs	r3, #48	@ 0x30
 80089ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80089cc:	2302      	movs	r3, #2
 80089ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f107 0210 	add.w	r2, r7, #16
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 f84b 	bl	8009a7e <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 f95b 	bl	8009ca8 <SDMMC_CmdSendSCR>
 80089f2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d022      	beq.n	8008a40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	e07a      	b.n	8008af4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00e      	beq.n	8008a2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	f107 0208 	add.w	r2, r7, #8
 8008a18:	18d4      	adds	r4, r2, r3
 8008a1a:	4608      	mov	r0, r1
 8008a1c:	f000 ffbb 	bl	8009996 <SDMMC_ReadFIFO>
 8008a20:	4603      	mov	r3, r0
 8008a22:	6023      	str	r3, [r4, #0]
      index++;
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	3301      	adds	r3, #1
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a2a:	f7f9 fc0b 	bl	8002244 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d102      	bne.n	8008a40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a3e:	e059      	b.n	8008af4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a46:	f240 432a 	movw	r3, #1066	@ 0x42a
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0d6      	beq.n	80089fe <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2208      	movs	r2, #8
 8008a64:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a66:	2308      	movs	r3, #8
 8008a68:	e044      	b.n	8008af4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e037      	b.n	8008af4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2220      	movs	r2, #32
 8008a98:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a9a:	2320      	movs	r3, #32
 8008a9c:	e02a      	b.n	8008af4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	061a      	lsls	r2, r3, #24
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ab4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008abe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	0e1b      	lsrs	r3, r3, #24
 8008ac4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac8:	601a      	str	r2, [r3, #0]
    scr++;
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	3304      	adds	r3, #4
 8008ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	061a      	lsls	r2, r3, #24
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008adc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ae6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	0e1b      	lsrs	r3, r3, #24
 8008aec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	373c      	adds	r7, #60	@ 0x3c
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd90      	pop	{r4, r7, pc}

08008afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e095      	b.n	8008c3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d108      	bne.n	8008b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b1e:	d009      	beq.n	8008b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	61da      	str	r2, [r3, #28]
 8008b26:	e005      	b.n	8008b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f9 f8f8 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b74:	d902      	bls.n	8008b7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e002      	b.n	8008b82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b8a:	d007      	beq.n	8008b9c <HAL_SPI_Init+0xa0>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b94:	d002      	beq.n	8008b9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008bac:	431a      	orrs	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bde:	ea42 0103 	orr.w	r1, r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	0c1b      	lsrs	r3, r3, #16
 8008bf8:	f003 0204 	and.w	r2, r3, #4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	f003 0310 	and.w	r3, r3, #16
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008c18:	ea42 0103 	orr.w	r1, r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e038      	b.n	8008cca <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7f9 f987 	bl	8001f80 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f000 fd4b 	bl	8009718 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	68b9      	ldr	r1, [r7, #8]
 8008c8e:	f000 fdd3 	bl	8009838 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6858      	ldr	r0, [r3, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	f000 fe14 	bl	80098cc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	6892      	ldr	r2, [r2, #8]
 8008cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	6892      	ldr	r2, [r2, #8]
 8008cb8:	f041 0101 	orr.w	r1, r1, #1
 8008cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e040      	b.n	8008d66 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7f8 fdff 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2224      	movs	r2, #36	@ 0x24
 8008cfe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0201 	bic.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fae1 	bl	80092e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f826 	bl	8008d70 <UART_SetConfig>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d101      	bne.n	8008d2e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e01b      	b.n	8008d66 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0201 	orr.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fb60 	bl	8009424 <UART_CheckIdleState>
 8008d64:	4603      	mov	r3, r0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d74:	b08a      	sub	sp, #40	@ 0x28
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4ba4      	ldr	r3, [pc, #656]	@ (8009030 <UART_SetConfig+0x2c0>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	6812      	ldr	r2, [r2, #0]
 8008da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a99      	ldr	r2, [pc, #612]	@ (8009034 <UART_SetConfig+0x2c4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d004      	beq.n	8008ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dec:	430a      	orrs	r2, r1
 8008dee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a90      	ldr	r2, [pc, #576]	@ (8009038 <UART_SetConfig+0x2c8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d126      	bne.n	8008e48 <UART_SetConfig+0xd8>
 8008dfa:	4b90      	ldr	r3, [pc, #576]	@ (800903c <UART_SetConfig+0x2cc>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d81b      	bhi.n	8008e40 <UART_SetConfig+0xd0>
 8008e08:	a201      	add	r2, pc, #4	@ (adr r2, 8008e10 <UART_SetConfig+0xa0>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e21 	.word	0x08008e21
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e26:	e116      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008e28:	2302      	movs	r3, #2
 8008e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e2e:	e112      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008e30:	2304      	movs	r3, #4
 8008e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e36:	e10e      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008e38:	2308      	movs	r3, #8
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e3e:	e10a      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008e40:	2310      	movs	r3, #16
 8008e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e46:	e106      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a7c      	ldr	r2, [pc, #496]	@ (8009040 <UART_SetConfig+0x2d0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d138      	bne.n	8008ec4 <UART_SetConfig+0x154>
 8008e52:	4b7a      	ldr	r3, [pc, #488]	@ (800903c <UART_SetConfig+0x2cc>)
 8008e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e58:	f003 030c 	and.w	r3, r3, #12
 8008e5c:	2b0c      	cmp	r3, #12
 8008e5e:	d82d      	bhi.n	8008ebc <UART_SetConfig+0x14c>
 8008e60:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <UART_SetConfig+0xf8>)
 8008e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e66:	bf00      	nop
 8008e68:	08008e9d 	.word	0x08008e9d
 8008e6c:	08008ebd 	.word	0x08008ebd
 8008e70:	08008ebd 	.word	0x08008ebd
 8008e74:	08008ebd 	.word	0x08008ebd
 8008e78:	08008ead 	.word	0x08008ead
 8008e7c:	08008ebd 	.word	0x08008ebd
 8008e80:	08008ebd 	.word	0x08008ebd
 8008e84:	08008ebd 	.word	0x08008ebd
 8008e88:	08008ea5 	.word	0x08008ea5
 8008e8c:	08008ebd 	.word	0x08008ebd
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ebd 	.word	0x08008ebd
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ea2:	e0d8      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eaa:	e0d4      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008eac:	2304      	movs	r3, #4
 8008eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eb2:	e0d0      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eba:	e0cc      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ec2:	e0c8      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8009044 <UART_SetConfig+0x2d4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d125      	bne.n	8008f1a <UART_SetConfig+0x1aa>
 8008ece:	4b5b      	ldr	r3, [pc, #364]	@ (800903c <UART_SetConfig+0x2cc>)
 8008ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ed8:	2b30      	cmp	r3, #48	@ 0x30
 8008eda:	d016      	beq.n	8008f0a <UART_SetConfig+0x19a>
 8008edc:	2b30      	cmp	r3, #48	@ 0x30
 8008ede:	d818      	bhi.n	8008f12 <UART_SetConfig+0x1a2>
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d00a      	beq.n	8008efa <UART_SetConfig+0x18a>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d814      	bhi.n	8008f12 <UART_SetConfig+0x1a2>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <UART_SetConfig+0x182>
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d008      	beq.n	8008f02 <UART_SetConfig+0x192>
 8008ef0:	e00f      	b.n	8008f12 <UART_SetConfig+0x1a2>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ef8:	e0ad      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008efa:	2302      	movs	r3, #2
 8008efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f00:	e0a9      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f02:	2304      	movs	r3, #4
 8008f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f08:	e0a5      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f0a:	2308      	movs	r3, #8
 8008f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f10:	e0a1      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f12:	2310      	movs	r3, #16
 8008f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f18:	e09d      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8009048 <UART_SetConfig+0x2d8>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d125      	bne.n	8008f70 <UART_SetConfig+0x200>
 8008f24:	4b45      	ldr	r3, [pc, #276]	@ (800903c <UART_SetConfig+0x2cc>)
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f30:	d016      	beq.n	8008f60 <UART_SetConfig+0x1f0>
 8008f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f34:	d818      	bhi.n	8008f68 <UART_SetConfig+0x1f8>
 8008f36:	2b80      	cmp	r3, #128	@ 0x80
 8008f38:	d00a      	beq.n	8008f50 <UART_SetConfig+0x1e0>
 8008f3a:	2b80      	cmp	r3, #128	@ 0x80
 8008f3c:	d814      	bhi.n	8008f68 <UART_SetConfig+0x1f8>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <UART_SetConfig+0x1d8>
 8008f42:	2b40      	cmp	r3, #64	@ 0x40
 8008f44:	d008      	beq.n	8008f58 <UART_SetConfig+0x1e8>
 8008f46:	e00f      	b.n	8008f68 <UART_SetConfig+0x1f8>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f4e:	e082      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f56:	e07e      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f5e:	e07a      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f66:	e076      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f6e:	e072      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a35      	ldr	r2, [pc, #212]	@ (800904c <UART_SetConfig+0x2dc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d12a      	bne.n	8008fd0 <UART_SetConfig+0x260>
 8008f7a:	4b30      	ldr	r3, [pc, #192]	@ (800903c <UART_SetConfig+0x2cc>)
 8008f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f88:	d01a      	beq.n	8008fc0 <UART_SetConfig+0x250>
 8008f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f8e:	d81b      	bhi.n	8008fc8 <UART_SetConfig+0x258>
 8008f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f94:	d00c      	beq.n	8008fb0 <UART_SetConfig+0x240>
 8008f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f9a:	d815      	bhi.n	8008fc8 <UART_SetConfig+0x258>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <UART_SetConfig+0x238>
 8008fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa4:	d008      	beq.n	8008fb8 <UART_SetConfig+0x248>
 8008fa6:	e00f      	b.n	8008fc8 <UART_SetConfig+0x258>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fae:	e052      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fb6:	e04e      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fbe:	e04a      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fc6:	e046      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fce:	e042      	b.n	8009056 <UART_SetConfig+0x2e6>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a17      	ldr	r2, [pc, #92]	@ (8009034 <UART_SetConfig+0x2c4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d13a      	bne.n	8009050 <UART_SetConfig+0x2e0>
 8008fda:	4b18      	ldr	r3, [pc, #96]	@ (800903c <UART_SetConfig+0x2cc>)
 8008fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fe8:	d01a      	beq.n	8009020 <UART_SetConfig+0x2b0>
 8008fea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fee:	d81b      	bhi.n	8009028 <UART_SetConfig+0x2b8>
 8008ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff4:	d00c      	beq.n	8009010 <UART_SetConfig+0x2a0>
 8008ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ffa:	d815      	bhi.n	8009028 <UART_SetConfig+0x2b8>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <UART_SetConfig+0x298>
 8009000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009004:	d008      	beq.n	8009018 <UART_SetConfig+0x2a8>
 8009006:	e00f      	b.n	8009028 <UART_SetConfig+0x2b8>
 8009008:	2300      	movs	r3, #0
 800900a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800900e:	e022      	b.n	8009056 <UART_SetConfig+0x2e6>
 8009010:	2302      	movs	r3, #2
 8009012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009016:	e01e      	b.n	8009056 <UART_SetConfig+0x2e6>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800901e:	e01a      	b.n	8009056 <UART_SetConfig+0x2e6>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009026:	e016      	b.n	8009056 <UART_SetConfig+0x2e6>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800902e:	e012      	b.n	8009056 <UART_SetConfig+0x2e6>
 8009030:	efff69f3 	.word	0xefff69f3
 8009034:	40008000 	.word	0x40008000
 8009038:	40013800 	.word	0x40013800
 800903c:	40021000 	.word	0x40021000
 8009040:	40004400 	.word	0x40004400
 8009044:	40004800 	.word	0x40004800
 8009048:	40004c00 	.word	0x40004c00
 800904c:	40005000 	.word	0x40005000
 8009050:	2310      	movs	r3, #16
 8009052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a9f      	ldr	r2, [pc, #636]	@ (80092d8 <UART_SetConfig+0x568>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d17a      	bne.n	8009156 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009064:	2b08      	cmp	r3, #8
 8009066:	d824      	bhi.n	80090b2 <UART_SetConfig+0x342>
 8009068:	a201      	add	r2, pc, #4	@ (adr r2, 8009070 <UART_SetConfig+0x300>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	08009095 	.word	0x08009095
 8009074:	080090b3 	.word	0x080090b3
 8009078:	0800909d 	.word	0x0800909d
 800907c:	080090b3 	.word	0x080090b3
 8009080:	080090a3 	.word	0x080090a3
 8009084:	080090b3 	.word	0x080090b3
 8009088:	080090b3 	.word	0x080090b3
 800908c:	080090b3 	.word	0x080090b3
 8009090:	080090ab 	.word	0x080090ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009094:	f7fc ff14 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8009098:	61f8      	str	r0, [r7, #28]
        break;
 800909a:	e010      	b.n	80090be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800909c:	4b8f      	ldr	r3, [pc, #572]	@ (80092dc <UART_SetConfig+0x56c>)
 800909e:	61fb      	str	r3, [r7, #28]
        break;
 80090a0:	e00d      	b.n	80090be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090a2:	f7fc fe75 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80090a6:	61f8      	str	r0, [r7, #28]
        break;
 80090a8:	e009      	b.n	80090be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090ae:	61fb      	str	r3, [r7, #28]
        break;
 80090b0:	e005      	b.n	80090be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80090b2:	2300      	movs	r3, #0
 80090b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80090bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80fb 	beq.w	80092bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4413      	add	r3, r2
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d305      	bcc.n	80090e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d903      	bls.n	80090ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80090e8:	e0e8      	b.n	80092bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	2200      	movs	r2, #0
 80090ee:	461c      	mov	r4, r3
 80090f0:	4615      	mov	r5, r2
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	f04f 0300 	mov.w	r3, #0
 80090fa:	022b      	lsls	r3, r5, #8
 80090fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009100:	0222      	lsls	r2, r4, #8
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	6849      	ldr	r1, [r1, #4]
 8009106:	0849      	lsrs	r1, r1, #1
 8009108:	2000      	movs	r0, #0
 800910a:	4688      	mov	r8, r1
 800910c:	4681      	mov	r9, r0
 800910e:	eb12 0a08 	adds.w	sl, r2, r8
 8009112:	eb43 0b09 	adc.w	fp, r3, r9
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009124:	4650      	mov	r0, sl
 8009126:	4659      	mov	r1, fp
 8009128:	f7f7 f860 	bl	80001ec <__aeabi_uldivmod>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4613      	mov	r3, r2
 8009132:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800913a:	d308      	bcc.n	800914e <UART_SetConfig+0x3de>
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009142:	d204      	bcs.n	800914e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	60da      	str	r2, [r3, #12]
 800914c:	e0b6      	b.n	80092bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009154:	e0b2      	b.n	80092bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800915e:	d15e      	bne.n	800921e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009160:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009164:	2b08      	cmp	r3, #8
 8009166:	d828      	bhi.n	80091ba <UART_SetConfig+0x44a>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <UART_SetConfig+0x400>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009195 	.word	0x08009195
 8009174:	0800919d 	.word	0x0800919d
 8009178:	080091a5 	.word	0x080091a5
 800917c:	080091bb 	.word	0x080091bb
 8009180:	080091ab 	.word	0x080091ab
 8009184:	080091bb 	.word	0x080091bb
 8009188:	080091bb 	.word	0x080091bb
 800918c:	080091bb 	.word	0x080091bb
 8009190:	080091b3 	.word	0x080091b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009194:	f7fc fe94 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8009198:	61f8      	str	r0, [r7, #28]
        break;
 800919a:	e014      	b.n	80091c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800919c:	f7fc fea6 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 80091a0:	61f8      	str	r0, [r7, #28]
        break;
 80091a2:	e010      	b.n	80091c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a4:	4b4d      	ldr	r3, [pc, #308]	@ (80092dc <UART_SetConfig+0x56c>)
 80091a6:	61fb      	str	r3, [r7, #28]
        break;
 80091a8:	e00d      	b.n	80091c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091aa:	f7fc fdf1 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80091ae:	61f8      	str	r0, [r7, #28]
        break;
 80091b0:	e009      	b.n	80091c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091b6:	61fb      	str	r3, [r7, #28]
        break;
 80091b8:	e005      	b.n	80091c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80091c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d077      	beq.n	80092bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	005a      	lsls	r2, r3, #1
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	085b      	lsrs	r3, r3, #1
 80091d6:	441a      	add	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b0f      	cmp	r3, #15
 80091e6:	d916      	bls.n	8009216 <UART_SetConfig+0x4a6>
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ee:	d212      	bcs.n	8009216 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	f023 030f 	bic.w	r3, r3, #15
 80091f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	b29b      	uxth	r3, r3
 8009200:	f003 0307 	and.w	r3, r3, #7
 8009204:	b29a      	uxth	r2, r3
 8009206:	8afb      	ldrh	r3, [r7, #22]
 8009208:	4313      	orrs	r3, r2
 800920a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	8afa      	ldrh	r2, [r7, #22]
 8009212:	60da      	str	r2, [r3, #12]
 8009214:	e052      	b.n	80092bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800921c:	e04e      	b.n	80092bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800921e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009222:	2b08      	cmp	r3, #8
 8009224:	d827      	bhi.n	8009276 <UART_SetConfig+0x506>
 8009226:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <UART_SetConfig+0x4bc>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	08009251 	.word	0x08009251
 8009230:	08009259 	.word	0x08009259
 8009234:	08009261 	.word	0x08009261
 8009238:	08009277 	.word	0x08009277
 800923c:	08009267 	.word	0x08009267
 8009240:	08009277 	.word	0x08009277
 8009244:	08009277 	.word	0x08009277
 8009248:	08009277 	.word	0x08009277
 800924c:	0800926f 	.word	0x0800926f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009250:	f7fc fe36 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8009254:	61f8      	str	r0, [r7, #28]
        break;
 8009256:	e014      	b.n	8009282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009258:	f7fc fe48 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 800925c:	61f8      	str	r0, [r7, #28]
        break;
 800925e:	e010      	b.n	8009282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009260:	4b1e      	ldr	r3, [pc, #120]	@ (80092dc <UART_SetConfig+0x56c>)
 8009262:	61fb      	str	r3, [r7, #28]
        break;
 8009264:	e00d      	b.n	8009282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009266:	f7fc fd93 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 800926a:	61f8      	str	r0, [r7, #28]
        break;
 800926c:	e009      	b.n	8009282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800926e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009272:	61fb      	str	r3, [r7, #28]
        break;
 8009274:	e005      	b.n	8009282 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009280:	bf00      	nop
    }

    if (pclk != 0U)
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d019      	beq.n	80092bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	085a      	lsrs	r2, r3, #1
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	fbb2 f3f3 	udiv	r3, r2, r3
 800929a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b0f      	cmp	r3, #15
 80092a0:	d909      	bls.n	80092b6 <UART_SetConfig+0x546>
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092a8:	d205      	bcs.n	80092b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	60da      	str	r2, [r3, #12]
 80092b4:	e002      	b.n	80092bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80092c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3728      	adds	r7, #40	@ 0x28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d6:	bf00      	nop
 80092d8:	40008000 	.word	0x40008000
 80092dc:	00f42400 	.word	0x00f42400

080092e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00a      	beq.n	8009392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01a      	beq.n	80093f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093de:	d10a      	bne.n	80093f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	605a      	str	r2, [r3, #4]
  }
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b098      	sub	sp, #96	@ 0x60
 8009428:	af02      	add	r7, sp, #8
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009434:	f7f8 ff06 	bl	8002244 <HAL_GetTick>
 8009438:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b08      	cmp	r3, #8
 8009446:	d12e      	bne.n	80094a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009448:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009450:	2200      	movs	r2, #0
 8009452:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f88c 	bl	8009574 <UART_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d021      	beq.n	80094a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009476:	653b      	str	r3, [r7, #80]	@ 0x50
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009480:	647b      	str	r3, [r7, #68]	@ 0x44
 8009482:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800948e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e6      	bne.n	8009462 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e062      	b.n	800956c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d149      	bne.n	8009548 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094bc:	2200      	movs	r2, #0
 80094be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f856 	bl	8009574 <UART_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d03c      	beq.n	8009548 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	623b      	str	r3, [r7, #32]
   return(result);
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e6      	bne.n	80094ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0301 	bic.w	r3, r3, #1
 8009516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3308      	adds	r3, #8
 800951e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009520:	61fa      	str	r2, [r7, #28]
 8009522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	69b9      	ldr	r1, [r7, #24]
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	617b      	str	r3, [r7, #20]
   return(result);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e5      	bne.n	8009500 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e011      	b.n	800956c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2220      	movs	r2, #32
 800954c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3758      	adds	r7, #88	@ 0x58
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	603b      	str	r3, [r7, #0]
 8009580:	4613      	mov	r3, r2
 8009582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009584:	e04f      	b.n	8009626 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958c:	d04b      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800958e:	f7f8 fe59 	bl	8002244 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	429a      	cmp	r2, r3
 800959c:	d302      	bcc.n	80095a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e04e      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d037      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b80      	cmp	r3, #128	@ 0x80
 80095ba:	d034      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b40      	cmp	r3, #64	@ 0x40
 80095c0:	d031      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d110      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2208      	movs	r2, #8
 80095d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f838 	bl	800964e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2208      	movs	r2, #8
 80095e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e029      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009600:	d111      	bne.n	8009626 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800960a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f81e 	bl	800964e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e00f      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69da      	ldr	r2, [r3, #28]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	4013      	ands	r3, r2
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	429a      	cmp	r2, r3
 8009634:	bf0c      	ite	eq
 8009636:	2301      	moveq	r3, #1
 8009638:	2300      	movne	r3, #0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	461a      	mov	r2, r3
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	429a      	cmp	r2, r3
 8009642:	d0a0      	beq.n	8009586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800964e:	b480      	push	{r7}
 8009650:	b095      	sub	sp, #84	@ 0x54
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800966a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009674:	643b      	str	r3, [r7, #64]	@ 0x40
 8009676:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800967a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e6      	bne.n	8009656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3308      	adds	r3, #8
 800968e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	61fb      	str	r3, [r7, #28]
   return(result);
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	f023 0301 	bic.w	r3, r3, #1
 800969e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e5      	bne.n	8009688 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d118      	bne.n	80096f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f023 0310 	bic.w	r3, r3, #16
 80096d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e2:	61bb      	str	r3, [r7, #24]
 80096e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6979      	ldr	r1, [r7, #20]
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	613b      	str	r3, [r7, #16]
   return(result);
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e6      	bne.n	80096c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2220      	movs	r2, #32
 80096fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800970a:	bf00      	nop
 800970c:	3754      	adds	r7, #84	@ 0x54
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	f023 0101 	bic.w	r1, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	2b08      	cmp	r3, #8
 8009740:	d102      	bne.n	8009748 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009742:	2340      	movs	r3, #64	@ 0x40
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	e001      	b.n	800974c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009758:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800975e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009764:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800976a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009770:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009776:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800977c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8009782:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8009788:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80097b0:	4b20      	ldr	r3, [pc, #128]	@ (8009834 <FMC_NORSRAM_Init+0x11c>)
 80097b2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097ba:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097c2:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80097ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	43db      	mvns	r3, r3
 80097da:	ea02 0103 	and.w	r1, r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	4319      	orrs	r1, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097f4:	d10c      	bne.n	8009810 <FMC_NORSRAM_Init+0xf8>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	0008fb7f 	.word	0x0008fb7f

08009838 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#else /* FMC_BTRx_DATAHLD */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800984e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8009856:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800985e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	3b01      	subs	r3, #1
 8009866:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8009868:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	3b02      	subs	r3, #2
 8009870:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8009872:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800987e:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800988e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009892:	d113      	bne.n	80098bc <FMC_NORSRAM_Timing_Init+0x84>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800989c:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	051b      	lsls	r3, r3, #20
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098e0:	d11d      	bne.n	800991e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098ea:	4b13      	ldr	r3, [pc, #76]	@ (8009938 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	6811      	ldr	r1, [r2, #0]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	0112      	lsls	r2, r2, #4
 80098f8:	4311      	orrs	r1, r2
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	6892      	ldr	r2, [r2, #8]
 80098fe:	0212      	lsls	r2, r2, #8
 8009900:	4311      	orrs	r1, r2
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	69d2      	ldr	r2, [r2, #28]
 8009906:	4311      	orrs	r1, r2
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	6912      	ldr	r2, [r2, #16]
 800990c:	0412      	lsls	r2, r2, #16
 800990e:	430a      	orrs	r2, r1
 8009910:	ea43 0102 	orr.w	r1, r3, r2
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800991c:	e005      	b.n	800992a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	cff00000 	.word	0xcff00000

0800993c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800993c:	b084      	sub	sp, #16
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	f107 001c 	add.w	r0, r7, #28
 800994a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800995a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800995c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 800995e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009962:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009966:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800996a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800997a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	431a      	orrs	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	b004      	add	sp, #16
 8009994:	4770      	bx	lr

08009996 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2203      	movs	r2, #3
 80099bc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80099be:	2002      	movs	r0, #2
 80099c0:	f7f8 fc4c 	bl	800225c <HAL_Delay>

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0303 	and.w	r3, r3, #3
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009a0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009a14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009a24:	f023 030f 	bic.w	r3, r3, #15
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	b2db      	uxtb	r3, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3314      	adds	r3, #20
 8009a66:	461a      	mov	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009aa4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009aaa:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009ab0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abc:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0

}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b088      	sub	sp, #32
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae8:	2340      	movs	r3, #64	@ 0x40
 8009aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009af4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff ff74 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b06:	2110      	movs	r1, #16
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f94d 	bl	8009da8 <SDMMC_GetCmdResp1>
 8009b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b10:	69fb      	ldr	r3, [r7, #28]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b08a      	sub	sp, #40	@ 0x28
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b2a:	2307      	movs	r3, #7
 8009b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2e:	2340      	movs	r3, #64	@ 0x40
 8009b30:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b3a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3c:	f107 0310 	add.w	r3, r7, #16
 8009b40:	4619      	mov	r1, r3
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff ff51 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b4c:	2107      	movs	r1, #7
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 f92a 	bl	8009da8 <SDMMC_GetCmdResp1>
 8009b54:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3728      	adds	r7, #40	@ 0x28
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009b70:	2300      	movs	r3, #0
 8009b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7e:	f107 0308 	add.w	r3, r7, #8
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff ff30 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fb44 	bl	800a218 <SDMMC_GetCmdError>
 8009b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b92:	69fb      	ldr	r3, [r7, #28]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ba4:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009baa:	2308      	movs	r3, #8
 8009bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bae:	2340      	movs	r3, #64	@ 0x40
 8009bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bbc:	f107 0308 	add.w	r3, r7, #8
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff ff11 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fad7 	bl	800a17c <SDMMC_GetCmdResp7>
 8009bce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3720      	adds	r7, #32
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b088      	sub	sp, #32
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009be8:	2337      	movs	r3, #55	@ 0x37
 8009bea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bec:	2340      	movs	r3, #64	@ 0x40
 8009bee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bfa:	f107 0308 	add.w	r3, r7, #8
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7ff fef2 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c0a:	2137      	movs	r1, #55	@ 0x37
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f8cb 	bl	8009da8 <SDMMC_GetCmdResp1>
 8009c12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c14:	69fb      	ldr	r3, [r7, #28]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b088      	sub	sp, #32
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c32:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c34:	2329      	movs	r3, #41	@ 0x29
 8009c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c38:	2340      	movs	r3, #64	@ 0x40
 8009c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c46:	f107 0308 	add.w	r3, r7, #8
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fecc 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9de 	bl	800a014 <SDMMC_GetCmdResp3>
 8009c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c72:	2306      	movs	r3, #6
 8009c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c76:	2340      	movs	r3, #64	@ 0x40
 8009c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff fead 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c94:	2106      	movs	r1, #6
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f886 	bl	8009da8 <SDMMC_GetCmdResp1>
 8009c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009cb4:	2333      	movs	r3, #51	@ 0x33
 8009cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cb8:	2340      	movs	r3, #64	@ 0x40
 8009cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cc6:	f107 0308 	add.w	r3, r7, #8
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fe8c 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd6:	2133      	movs	r1, #51	@ 0x33
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f865 	bl	8009da8 <SDMMC_GetCmdResp1>
 8009cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce0:	69fb      	ldr	r3, [r7, #28]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b088      	sub	sp, #32
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009cfa:	23c0      	movs	r3, #192	@ 0xc0
 8009cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff fe6b 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f935 	bl	8009f84 <SDMMC_GetCmdResp2>
 8009d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3720      	adds	r7, #32
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b088      	sub	sp, #32
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d34:	2309      	movs	r3, #9
 8009d36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d38:	23c0      	movs	r3, #192	@ 0xc0
 8009d3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d46:	f107 0308 	add.w	r3, r7, #8
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff fe4c 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f916 	bl	8009f84 <SDMMC_GetCmdResp2>
 8009d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d72:	2303      	movs	r3, #3
 8009d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d76:	2340      	movs	r3, #64	@ 0x40
 8009d78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d84:	f107 0308 	add.w	r3, r7, #8
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff fe2d 	bl	80099ea <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	2103      	movs	r1, #3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f97b 	bl	800a090 <SDMMC_GetCmdResp6>
 8009d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3720      	adds	r7, #32
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	460b      	mov	r3, r1
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009db6:	4b70      	ldr	r3, [pc, #448]	@ (8009f78 <SDMMC_GetCmdResp1+0x1d0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a70      	ldr	r2, [pc, #448]	@ (8009f7c <SDMMC_GetCmdResp1+0x1d4>)
 8009dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc0:	0a5a      	lsrs	r2, r3, #9
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	fb02 f303 	mul.w	r3, r2, r3
 8009dc8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	1e5a      	subs	r2, r3, #1
 8009dce:	61fa      	str	r2, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dd8:	e0c9      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dde:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0ef      	beq.n	8009dca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1ea      	bne.n	8009dca <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2204      	movs	r2, #4
 8009e04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e06:	2304      	movs	r3, #4
 8009e08:	e0b1      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e0a6      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	22c5      	movs	r2, #197	@ 0xc5
 8009e24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7ff fe09 	bl	8009a3e <SDMMC_GetCommandResponse>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	461a      	mov	r2, r3
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d001      	beq.n	8009e3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e099      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fe0b 	bl	8009a58 <SDMMC_GetResponse>
 8009e42:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	4b4e      	ldr	r3, [pc, #312]	@ (8009f80 <SDMMC_GetCmdResp1+0x1d8>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e08d      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da02      	bge.n	8009e5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e5c:	e087      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e68:	2340      	movs	r3, #64	@ 0x40
 8009e6a:	e080      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e76:	2380      	movs	r3, #128	@ 0x80
 8009e78:	e079      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e88:	e071      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e98:	e069      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ea8:	e061      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009eb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009eb8:	e059      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d002      	beq.n	8009eca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ec8:	e051      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ed8:	e049      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ee4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009ee8:	e041      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef8:	e039      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f08:	e031      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009f18:	e029      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f28:	e021      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f38:	e019      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f48:	e011      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f58:	e009      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f003 0308 	and.w	r3, r3, #8
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f64:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009f68:	e001      	b.n	8009f6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3720      	adds	r7, #32
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20000000 	.word	0x20000000
 8009f7c:	10624dd3 	.word	0x10624dd3
 8009f80:	fdffe008 	.word	0xfdffe008

08009f84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800a00c <SDMMC_GetCmdResp2+0x88>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1f      	ldr	r2, [pc, #124]	@ (800a010 <SDMMC_GetCmdResp2+0x8c>)
 8009f92:	fba2 2303 	umull	r2, r3, r2, r3
 8009f96:	0a5b      	lsrs	r3, r3, #9
 8009f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	1e5a      	subs	r2, r3, #1
 8009fa6:	60fa      	str	r2, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fb0:	e026      	b.n	800a000 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0ef      	beq.n	8009fa2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1ea      	bne.n	8009fa2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2204      	movs	r2, #4
 8009fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fde:	2304      	movs	r3, #4
 8009fe0:	e00e      	b.n	800a000 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e003      	b.n	800a000 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	22c5      	movs	r2, #197	@ 0xc5
 8009ffc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000000 	.word	0x20000000
 800a010:	10624dd3 	.word	0x10624dd3

0800a014 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a01c:	4b1a      	ldr	r3, [pc, #104]	@ (800a088 <SDMMC_GetCmdResp3+0x74>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1a      	ldr	r2, [pc, #104]	@ (800a08c <SDMMC_GetCmdResp3+0x78>)
 800a022:	fba2 2303 	umull	r2, r3, r2, r3
 800a026:	0a5b      	lsrs	r3, r3, #9
 800a028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a02c:	fb02 f303 	mul.w	r3, r2, r3
 800a030:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	1e5a      	subs	r2, r3, #1
 800a036:	60fa      	str	r2, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d102      	bne.n	800a042 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a03c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a040:	e01b      	b.n	800a07a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a046:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0ef      	beq.n	800a032 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1ea      	bne.n	800a032 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2204      	movs	r2, #4
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a06e:	2304      	movs	r3, #4
 800a070:	e003      	b.n	800a07a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	22c5      	movs	r2, #197	@ 0xc5
 800a076:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	20000000 	.word	0x20000000
 800a08c:	10624dd3 	.word	0x10624dd3

0800a090 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	460b      	mov	r3, r1
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a09e:	4b35      	ldr	r3, [pc, #212]	@ (800a174 <SDMMC_GetCmdResp6+0xe4>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a35      	ldr	r2, [pc, #212]	@ (800a178 <SDMMC_GetCmdResp6+0xe8>)
 800a0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a8:	0a5b      	lsrs	r3, r3, #9
 800a0aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ae:	fb02 f303 	mul.w	r3, r2, r3
 800a0b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	1e5a      	subs	r2, r3, #1
 800a0b8:	61fa      	str	r2, [r7, #28]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d102      	bne.n	800a0c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0c2:	e052      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d0ef      	beq.n	800a0b4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1ea      	bne.n	800a0b4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e2:	f003 0304 	and.w	r3, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	e03a      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a106:	2301      	movs	r3, #1
 800a108:	e02f      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fc97 	bl	8009a3e <SDMMC_GetCommandResponse>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	4293      	cmp	r3, r2
 800a118:	d001      	beq.n	800a11e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e025      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	22c5      	movs	r2, #197	@ 0xc5
 800a122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a124:	2100      	movs	r1, #0
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff fc96 	bl	8009a58 <SDMMC_GetResponse>
 800a12c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	0c1b      	lsrs	r3, r3, #16
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a142:	2300      	movs	r3, #0
 800a144:	e011      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a154:	e009      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a164:	e001      	b.n	800a16a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000000 	.word	0x20000000
 800a178:	10624dd3 	.word	0x10624dd3

0800a17c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a184:	4b22      	ldr	r3, [pc, #136]	@ (800a210 <SDMMC_GetCmdResp7+0x94>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a22      	ldr	r2, [pc, #136]	@ (800a214 <SDMMC_GetCmdResp7+0x98>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	0a5b      	lsrs	r3, r3, #9
 800a190:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1e5a      	subs	r2, r3, #1
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1a8:	e02c      	b.n	800a204 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0ef      	beq.n	800a19a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ea      	bne.n	800a19a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e014      	b.n	800a204 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e009      	b.n	800a204 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2240      	movs	r2, #64	@ 0x40
 800a200:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a202:	2300      	movs	r3, #0

}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	20000000 	.word	0x20000000
 800a214:	10624dd3 	.word	0x10624dd3

0800a218 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a220:	4b11      	ldr	r3, [pc, #68]	@ (800a268 <SDMMC_GetCmdError+0x50>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a11      	ldr	r2, [pc, #68]	@ (800a26c <SDMMC_GetCmdError+0x54>)
 800a226:	fba2 2303 	umull	r2, r3, r2, r3
 800a22a:	0a5b      	lsrs	r3, r3, #9
 800a22c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a230:	fb02 f303 	mul.w	r3, r2, r3
 800a234:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	1e5a      	subs	r2, r3, #1
 800a23a:	60fa      	str	r2, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a240:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a244:	e009      	b.n	800a25a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a24a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f1      	beq.n	800a236 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	22c5      	movs	r2, #197	@ 0xc5
 800a256:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20000000 	.word	0x20000000
 800a26c:	10624dd3 	.word	0x10624dd3

0800a270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a270:	b084      	sub	sp, #16
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	f107 001c 	add.w	r0, r7, #28
 800a27e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 fa26 	bl	800b6e0 <USB_CoreReset>
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a298:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	639a      	str	r2, [r3, #56]	@ 0x38
 800a2ac:	e005      	b.n	800a2ba <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2c6:	b004      	add	sp, #16
 800a2c8:	4770      	bx	lr
	...

0800a2cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d165      	bne.n	800a3ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	4a3e      	ldr	r2, [pc, #248]	@ (800a3dc <USB_SetTurnaroundTime+0x110>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d906      	bls.n	800a2f6 <USB_SetTurnaroundTime+0x2a>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4a3d      	ldr	r2, [pc, #244]	@ (800a3e0 <USB_SetTurnaroundTime+0x114>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d202      	bcs.n	800a2f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a2f0:	230f      	movs	r3, #15
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	e05c      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4a39      	ldr	r2, [pc, #228]	@ (800a3e0 <USB_SetTurnaroundTime+0x114>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d306      	bcc.n	800a30c <USB_SetTurnaroundTime+0x40>
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	4a38      	ldr	r2, [pc, #224]	@ (800a3e4 <USB_SetTurnaroundTime+0x118>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d202      	bcs.n	800a30c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a306:	230e      	movs	r3, #14
 800a308:	617b      	str	r3, [r7, #20]
 800a30a:	e051      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4a35      	ldr	r2, [pc, #212]	@ (800a3e4 <USB_SetTurnaroundTime+0x118>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d306      	bcc.n	800a322 <USB_SetTurnaroundTime+0x56>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4a34      	ldr	r2, [pc, #208]	@ (800a3e8 <USB_SetTurnaroundTime+0x11c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d202      	bcs.n	800a322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a31c:	230d      	movs	r3, #13
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e046      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	4a30      	ldr	r2, [pc, #192]	@ (800a3e8 <USB_SetTurnaroundTime+0x11c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d306      	bcc.n	800a338 <USB_SetTurnaroundTime+0x6c>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	4a2f      	ldr	r2, [pc, #188]	@ (800a3ec <USB_SetTurnaroundTime+0x120>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d802      	bhi.n	800a338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a332:	230c      	movs	r3, #12
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	e03b      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4a2c      	ldr	r2, [pc, #176]	@ (800a3ec <USB_SetTurnaroundTime+0x120>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d906      	bls.n	800a34e <USB_SetTurnaroundTime+0x82>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	4a2b      	ldr	r2, [pc, #172]	@ (800a3f0 <USB_SetTurnaroundTime+0x124>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d802      	bhi.n	800a34e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a348:	230b      	movs	r3, #11
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	e030      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	4a27      	ldr	r2, [pc, #156]	@ (800a3f0 <USB_SetTurnaroundTime+0x124>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d906      	bls.n	800a364 <USB_SetTurnaroundTime+0x98>
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	4a26      	ldr	r2, [pc, #152]	@ (800a3f4 <USB_SetTurnaroundTime+0x128>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d802      	bhi.n	800a364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a35e:	230a      	movs	r3, #10
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	e025      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	4a23      	ldr	r2, [pc, #140]	@ (800a3f4 <USB_SetTurnaroundTime+0x128>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d906      	bls.n	800a37a <USB_SetTurnaroundTime+0xae>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	4a22      	ldr	r2, [pc, #136]	@ (800a3f8 <USB_SetTurnaroundTime+0x12c>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d202      	bcs.n	800a37a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a374:	2309      	movs	r3, #9
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e01a      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f8 <USB_SetTurnaroundTime+0x12c>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d306      	bcc.n	800a390 <USB_SetTurnaroundTime+0xc4>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4a1d      	ldr	r2, [pc, #116]	@ (800a3fc <USB_SetTurnaroundTime+0x130>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d802      	bhi.n	800a390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a38a:	2308      	movs	r3, #8
 800a38c:	617b      	str	r3, [r7, #20]
 800a38e:	e00f      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	4a1a      	ldr	r2, [pc, #104]	@ (800a3fc <USB_SetTurnaroundTime+0x130>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d906      	bls.n	800a3a6 <USB_SetTurnaroundTime+0xda>
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4a19      	ldr	r2, [pc, #100]	@ (800a400 <USB_SetTurnaroundTime+0x134>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d202      	bcs.n	800a3a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e004      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a3a6:	2306      	movs	r3, #6
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e001      	b.n	800a3b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3ac:	2309      	movs	r3, #9
 800a3ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	68da      	ldr	r2, [r3, #12]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	029b      	lsls	r3, r3, #10
 800a3c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	00d8acbf 	.word	0x00d8acbf
 800a3e0:	00e4e1c0 	.word	0x00e4e1c0
 800a3e4:	00f42400 	.word	0x00f42400
 800a3e8:	01067380 	.word	0x01067380
 800a3ec:	011a499f 	.word	0x011a499f
 800a3f0:	01312cff 	.word	0x01312cff
 800a3f4:	014ca43f 	.word	0x014ca43f
 800a3f8:	016e3600 	.word	0x016e3600
 800a3fc:	01a6ab1f 	.word	0x01a6ab1f
 800a400:	01e84800 	.word	0x01e84800

0800a404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f043 0201 	orr.w	r2, r3, #1
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f023 0201 	bic.w	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d115      	bne.n	800a496 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a476:	200a      	movs	r0, #10
 800a478:	f7f7 fef0 	bl	800225c <HAL_Delay>
      ms += 10U;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	330a      	adds	r3, #10
 800a480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 f8b3 	bl	800b5ee <USB_GetMode>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d01e      	beq.n	800a4cc <USB_SetCurrentMode+0x84>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2bc7      	cmp	r3, #199	@ 0xc7
 800a492:	d9f0      	bls.n	800a476 <USB_SetCurrentMode+0x2e>
 800a494:	e01a      	b.n	800a4cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d115      	bne.n	800a4c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a4a8:	200a      	movs	r0, #10
 800a4aa:	f7f7 fed7 	bl	800225c <HAL_Delay>
      ms += 10U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	330a      	adds	r3, #10
 800a4b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 f89a 	bl	800b5ee <USB_GetMode>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d005      	beq.n	800a4cc <USB_SetCurrentMode+0x84>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2bc7      	cmp	r3, #199	@ 0xc7
 800a4c4:	d9f0      	bls.n	800a4a8 <USB_SetCurrentMode+0x60>
 800a4c6:	e001      	b.n	800a4cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e005      	b.n	800a4d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2bc8      	cmp	r3, #200	@ 0xc8
 800a4d0:	d101      	bne.n	800a4d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a4ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	e009      	b.n	800a514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	3340      	adds	r3, #64	@ 0x40
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	2b0e      	cmp	r3, #14
 800a518:	d9f2      	bls.n	800a500 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a51a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d11c      	bne.n	800a55c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a530:	f043 0302 	orr.w	r3, r3, #2
 800a534:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e005      	b.n	800a568 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a560:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a56e:	461a      	mov	r2, r3
 800a570:	2300      	movs	r3, #0
 800a572:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a574:	2103      	movs	r1, #3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f95a 	bl	800a830 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a57c:	2110      	movs	r1, #16
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f8f6 	bl	800a770 <USB_FlushTxFifo>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f920 	bl	800a7d4 <USB_FlushRxFifo>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5bc:	461a      	mov	r2, r3
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	613b      	str	r3, [r7, #16]
 800a5c6:	e043      	b.n	800a650 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5de:	d118      	bne.n	800a612 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	e013      	b.n	800a624 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a608:	461a      	mov	r2, r3
 800a60a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	e008      	b.n	800a624 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a61e:	461a      	mov	r2, r3
 800a620:	2300      	movs	r3, #0
 800a622:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a630:	461a      	mov	r2, r3
 800a632:	2300      	movs	r3, #0
 800a634:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a642:	461a      	mov	r2, r3
 800a644:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	3301      	adds	r3, #1
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a654:	461a      	mov	r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	4293      	cmp	r3, r2
 800a65a:	d3b5      	bcc.n	800a5c8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a65c:	2300      	movs	r3, #0
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	e043      	b.n	800a6ea <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a678:	d118      	bne.n	800a6ac <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a68c:	461a      	mov	r2, r3
 800a68e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	e013      	b.n	800a6be <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	e008      	b.n	800a6be <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a6e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	613b      	str	r3, [r7, #16]
 800a6ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d3b5      	bcc.n	800a662 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a708:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a716:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	f043 0210 	orr.w	r2, r3, #16
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	4b10      	ldr	r3, [pc, #64]	@ (800a76c <USB_DevInit+0x28c>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a730:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f043 0208 	orr.w	r2, r3, #8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d107      	bne.n	800a75c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a754:	f043 0304 	orr.w	r3, r3, #4
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a768:	b004      	add	sp, #16
 800a76a:	4770      	bx	lr
 800a76c:	803c3800 	.word	0x803c3800

0800a770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a78a:	d901      	bls.n	800a790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e01b      	b.n	800a7c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	daf2      	bge.n	800a77e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	019b      	lsls	r3, r3, #6
 800a7a0:	f043 0220 	orr.w	r2, r3, #32
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7b4:	d901      	bls.n	800a7ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e006      	b.n	800a7c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	d0f0      	beq.n	800a7a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7ec:	d901      	bls.n	800a7f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e018      	b.n	800a824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	daf2      	bge.n	800a7e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2210      	movs	r2, #16
 800a802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3301      	adds	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a810:	d901      	bls.n	800a816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e006      	b.n	800a824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0310 	and.w	r3, r3, #16
 800a81e:	2b10      	cmp	r3, #16
 800a820:	d0f0      	beq.n	800a804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a850:	4313      	orrs	r3, r2
 800a852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a862:	b480      	push	{r7}
 800a864:	b087      	sub	sp, #28
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f003 0306 	and.w	r3, r3, #6
 800a87a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d002      	beq.n	800a888 <USB_GetDevSpeed+0x26>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b06      	cmp	r3, #6
 800a886:	d102      	bne.n	800a88e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a888:	2302      	movs	r3, #2
 800a88a:	75fb      	strb	r3, [r7, #23]
 800a88c:	e001      	b.n	800a892 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a88e:	230f      	movs	r3, #15
 800a890:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a892:	7dfb      	ldrb	r3, [r7, #23]
}
 800a894:	4618      	mov	r0, r3
 800a896:	371c      	adds	r7, #28
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d13a      	bne.n	800a932 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c2:	69da      	ldr	r2, [r3, #28]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f003 030f 	and.w	r3, r3, #15
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	68f9      	ldr	r1, [r7, #12]
 800a8d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d155      	bne.n	800a9a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	791b      	ldrb	r3, [r3, #4]
 800a90e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a910:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	059b      	lsls	r3, r3, #22
 800a916:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a918:	4313      	orrs	r3, r2
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a92a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	e036      	b.n	800a9a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a938:	69da      	ldr	r2, [r3, #28]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f003 030f 	and.w	r3, r3, #15
 800a942:	2101      	movs	r1, #1
 800a944:	fa01 f303 	lsl.w	r3, r1, r3
 800a948:	041b      	lsls	r3, r3, #16
 800a94a:	68f9      	ldr	r1, [r7, #12]
 800a94c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a950:	4313      	orrs	r3, r2
 800a952:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d11a      	bne.n	800a9a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	791b      	ldrb	r3, [r3, #4]
 800a984:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a986:	430b      	orrs	r3, r1
 800a988:	4313      	orrs	r3, r2
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	0151      	lsls	r1, r2, #5
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	440a      	add	r2, r1
 800a992:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a99a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a99e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
	...

0800a9b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	785b      	ldrb	r3, [r3, #1]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d161      	bne.n	800aa90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9e2:	d11f      	bne.n	800aa24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	f003 030f 	and.w	r3, r3, #15
 800aa34:	2101      	movs	r1, #1
 800aa36:	fa01 f303 	lsl.w	r3, r1, r3
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	68f9      	ldr	r1, [r7, #12]
 800aa40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa44:	4013      	ands	r3, r2
 800aa46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa4e:	69da      	ldr	r2, [r3, #28]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	43db      	mvns	r3, r3
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa68:	4013      	ands	r3, r2
 800aa6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	0159      	lsls	r1, r3, #5
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	440b      	add	r3, r1
 800aa82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa86:	4619      	mov	r1, r3
 800aa88:	4b35      	ldr	r3, [pc, #212]	@ (800ab60 <USB_DeactivateEndpoint+0x1b0>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	600b      	str	r3, [r1, #0]
 800aa8e:	e060      	b.n	800ab52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaa6:	d11f      	bne.n	800aae8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aac6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	2101      	movs	r1, #1
 800aafa:	fa01 f303 	lsl.w	r3, r1, r3
 800aafe:	041b      	lsls	r3, r3, #16
 800ab00:	43db      	mvns	r3, r3
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab08:	4013      	ands	r3, r2
 800ab0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab12:	69da      	ldr	r2, [r3, #28]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 030f 	and.w	r3, r3, #15
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	43db      	mvns	r3, r3
 800ab26:	68f9      	ldr	r1, [r7, #12]
 800ab28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	0159      	lsls	r1, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	440b      	add	r3, r1
 800ab46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <USB_DeactivateEndpoint+0x1b4>)
 800ab4e:	4013      	ands	r3, r2
 800ab50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	ec337800 	.word	0xec337800
 800ab64:	eff37800 	.word	0xeff37800

0800ab68 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	785b      	ldrb	r3, [r3, #1]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	f040 812d 	bne.w	800ade0 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d132      	bne.n	800abf4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	0151      	lsls	r1, r2, #5
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	440a      	add	r2, r1
 800aba4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aba8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800abb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abec:	0cdb      	lsrs	r3, r3, #19
 800abee:	04db      	lsls	r3, r3, #19
 800abf0:	6113      	str	r3, [r2, #16]
 800abf2:	e097      	b.n	800ad24 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac0e:	0cdb      	lsrs	r3, r3, #19
 800ac10:	04db      	lsls	r3, r3, #19
 800ac12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d11a      	bne.n	800ac74 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d903      	bls.n	800ac52 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	689a      	ldr	r2, [r3, #8]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac70:	6113      	str	r3, [r2, #16]
 800ac72:	e044      	b.n	800acfe <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	1e5a      	subs	r2, r3, #1
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac88:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac96:	691a      	ldr	r2, [r3, #16]
 800ac98:	89fb      	ldrh	r3, [r7, #14]
 800ac9a:	04d9      	lsls	r1, r3, #19
 800ac9c:	4b8f      	ldr	r3, [pc, #572]	@ (800aedc <USB_EPStartXfer+0x374>)
 800ac9e:	400b      	ands	r3, r1
 800aca0:	6939      	ldr	r1, [r7, #16]
 800aca2:	0148      	lsls	r0, r1, #5
 800aca4:	6979      	ldr	r1, [r7, #20]
 800aca6:	4401      	add	r1, r0
 800aca8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800acac:	4313      	orrs	r3, r2
 800acae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	791b      	ldrb	r3, [r3, #4]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d122      	bne.n	800acfe <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	0151      	lsls	r1, r2, #5
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	440a      	add	r2, r1
 800acce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acd2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800acd6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace4:	691a      	ldr	r2, [r3, #16]
 800ace6:	89fb      	ldrh	r3, [r7, #14]
 800ace8:	075b      	lsls	r3, r3, #29
 800acea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800acee:	6939      	ldr	r1, [r7, #16]
 800acf0:	0148      	lsls	r0, r1, #5
 800acf2:	6979      	ldr	r1, [r7, #20]
 800acf4:	4401      	add	r1, r0
 800acf6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800acfa:	4313      	orrs	r3, r2
 800acfc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad14:	6939      	ldr	r1, [r7, #16]
 800ad16:	0148      	lsls	r0, r1, #5
 800ad18:	6979      	ldr	r1, [r7, #20]
 800ad1a:	4401      	add	r1, r0
 800ad1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad20:	4313      	orrs	r3, r2
 800ad22:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	015a      	lsls	r2, r3, #5
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	0151      	lsls	r1, r2, #5
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	440a      	add	r2, r1
 800ad3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad42:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d015      	beq.n	800ad78 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 813a 	beq.w	800afca <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	f003 030f 	and.w	r3, r3, #15
 800ad66:	2101      	movs	r1, #1
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	6979      	ldr	r1, [r7, #20]
 800ad6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad72:	4313      	orrs	r3, r2
 800ad74:	634b      	str	r3, [r1, #52]	@ 0x34
 800ad76:	e128      	b.n	800afca <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d110      	bne.n	800adaa <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ada2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	e00f      	b.n	800adca <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	0151      	lsls	r1, r2, #5
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	440a      	add	r2, r1
 800adc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adc8:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68d9      	ldr	r1, [r3, #12]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	b29b      	uxth	r3, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f9a7 	bl	800b12c <USB_WritePacket>
 800adde:	e0f4      	b.n	800afca <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfa:	0cdb      	lsrs	r3, r3, #19
 800adfc:	04db      	lsls	r3, r3, #19
 800adfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	0151      	lsls	r1, r2, #5
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	440a      	add	r2, r1
 800ae16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ae1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ae22:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d12f      	bne.n	800ae8a <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	689a      	ldr	r2, [r3, #8]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae58:	6939      	ldr	r1, [r7, #16]
 800ae5a:	0148      	lsls	r0, r1, #5
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	4401      	add	r1, r0
 800ae60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae64:	4313      	orrs	r3, r2
 800ae66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	0151      	lsls	r1, r2, #5
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae86:	6113      	str	r3, [r2, #16]
 800ae88:	e062      	b.n	800af50 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d126      	bne.n	800aee0 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9e:	691a      	ldr	r2, [r3, #16]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aea8:	6939      	ldr	r1, [r7, #16]
 800aeaa:	0148      	lsls	r0, r1, #5
 800aeac:	6979      	ldr	r1, [r7, #20]
 800aeae:	4401      	add	r1, r0
 800aeb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	0151      	lsls	r1, r2, #5
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	440a      	add	r2, r1
 800aece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aed6:	6113      	str	r3, [r2, #16]
 800aed8:	e03a      	b.n	800af50 <USB_EPStartXfer+0x3e8>
 800aeda:	bf00      	nop
 800aedc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	691a      	ldr	r2, [r3, #16]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	1e5a      	subs	r2, r3, #1
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	89fa      	ldrh	r2, [r7, #14]
 800aefc:	fb03 f202 	mul.w	r2, r3, r2
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af10:	691a      	ldr	r2, [r3, #16]
 800af12:	89fb      	ldrh	r3, [r7, #14]
 800af14:	04d9      	lsls	r1, r3, #19
 800af16:	4b2f      	ldr	r3, [pc, #188]	@ (800afd4 <USB_EPStartXfer+0x46c>)
 800af18:	400b      	ands	r3, r1
 800af1a:	6939      	ldr	r1, [r7, #16]
 800af1c:	0148      	lsls	r0, r1, #5
 800af1e:	6979      	ldr	r1, [r7, #20]
 800af20:	4401      	add	r1, r0
 800af22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af26:	4313      	orrs	r3, r2
 800af28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	4413      	add	r3, r2
 800af32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af40:	6939      	ldr	r1, [r7, #16]
 800af42:	0148      	lsls	r0, r1, #5
 800af44:	6979      	ldr	r1, [r7, #20]
 800af46:	4401      	add	r1, r0
 800af48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af4c:	4313      	orrs	r3, r2
 800af4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	791b      	ldrb	r3, [r3, #4]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d128      	bne.n	800afaa <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af64:	2b00      	cmp	r3, #0
 800af66:	d110      	bne.n	800af8a <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	015a      	lsls	r2, r3, #5
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	4413      	add	r3, r2
 800af70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	0151      	lsls	r1, r2, #5
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	440a      	add	r2, r1
 800af7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	e00f      	b.n	800afaa <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	015a      	lsls	r2, r3, #5
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	4413      	add	r3, r2
 800af92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	0151      	lsls	r1, r2, #5
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	440a      	add	r2, r1
 800afa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afa8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	0151      	lsls	r1, r2, #5
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	440a      	add	r2, r1
 800afc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afc4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800afc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	1ff80000 	.word	0x1ff80000

0800afd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	785b      	ldrb	r3, [r3, #1]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d14a      	bne.n	800b08c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b00a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b00e:	f040 8086 	bne.w	800b11e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	7812      	ldrb	r2, [r2, #0]
 800b026:	0151      	lsls	r1, r2, #5
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	440a      	add	r2, r1
 800b02c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b030:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b034:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	7812      	ldrb	r2, [r2, #0]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b054:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b058:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3301      	adds	r3, #1
 800b05e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b066:	4293      	cmp	r3, r2
 800b068:	d902      	bls.n	800b070 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	75fb      	strb	r3, [r7, #23]
          break;
 800b06e:	e056      	b.n	800b11e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b088:	d0e7      	beq.n	800b05a <USB_EPStopXfer+0x82>
 800b08a:	e048      	b.n	800b11e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0a4:	d13b      	bne.n	800b11e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	7812      	ldrb	r2, [r2, #0]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	7812      	ldrb	r2, [r2, #0]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d902      	bls.n	800b104 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]
          break;
 800b102:	e00c      	b.n	800b11e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b11c:	d0e7      	beq.n	800b0ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	371c      	adds	r7, #28
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b089      	sub	sp, #36	@ 0x24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4611      	mov	r1, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	460b      	mov	r3, r1
 800b13c:	71fb      	strb	r3, [r7, #7]
 800b13e:	4613      	mov	r3, r2
 800b140:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b14a:	88bb      	ldrh	r3, [r7, #4]
 800b14c:	3303      	adds	r3, #3
 800b14e:	089b      	lsrs	r3, r3, #2
 800b150:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b152:	2300      	movs	r3, #0
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	e018      	b.n	800b18a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	031a      	lsls	r2, r3, #12
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b164:	461a      	mov	r2, r3
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	3301      	adds	r3, #1
 800b170:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	3301      	adds	r3, #1
 800b176:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	3301      	adds	r3, #1
 800b17c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	3301      	adds	r3, #1
 800b182:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	3301      	adds	r3, #1
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d3e2      	bcc.n	800b158 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3724      	adds	r7, #36	@ 0x24
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b08b      	sub	sp, #44	@ 0x2c
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b1b6:	88fb      	ldrh	r3, [r7, #6]
 800b1b8:	089b      	lsrs	r3, r3, #2
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b1be:	88fb      	ldrh	r3, [r7, #6]
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	623b      	str	r3, [r7, #32]
 800b1ca:	e014      	b.n	800b1f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1da:	3301      	adds	r3, #1
 800b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	623b      	str	r3, [r7, #32]
 800b1f6:	6a3a      	ldr	r2, [r7, #32]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d3e6      	bcc.n	800b1cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b1fe:	8bfb      	ldrh	r3, [r7, #30]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01e      	beq.n	800b242 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b204:	2300      	movs	r3, #0
 800b206:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b20e:	461a      	mov	r2, r3
 800b210:	f107 0310 	add.w	r3, r7, #16
 800b214:	6812      	ldr	r2, [r2, #0]
 800b216:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	fa22 f303 	lsr.w	r3, r2, r3
 800b224:	b2da      	uxtb	r2, r3
 800b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b228:	701a      	strb	r2, [r3, #0]
      i++;
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	3301      	adds	r3, #1
 800b22e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	3301      	adds	r3, #1
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b236:	8bfb      	ldrh	r3, [r7, #30]
 800b238:	3b01      	subs	r3, #1
 800b23a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b23c:	8bfb      	ldrh	r3, [r7, #30]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1ea      	bne.n	800b218 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b244:	4618      	mov	r0, r3
 800b246:	372c      	adds	r7, #44	@ 0x2c
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	785b      	ldrb	r3, [r3, #1]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d12c      	bne.n	800b2c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	db12      	blt.n	800b2a4 <USB_EPSetStall+0x54>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00f      	beq.n	800b2a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	0151      	lsls	r1, r2, #5
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	440a      	add	r2, r1
 800b29a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b29e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b2a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	0151      	lsls	r1, r2, #5
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	440a      	add	r2, r1
 800b2ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	e02b      	b.n	800b31e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	db12      	blt.n	800b2fe <USB_EPSetStall+0xae>
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00f      	beq.n	800b2fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	0151      	lsls	r1, r2, #5
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	440a      	add	r2, r1
 800b2f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b2fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	0151      	lsls	r1, r2, #5
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	440a      	add	r2, r1
 800b314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b31c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	785b      	ldrb	r3, [r3, #1]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d128      	bne.n	800b39a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b362:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b366:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	791b      	ldrb	r3, [r3, #4]
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d003      	beq.n	800b378 <USB_EPClearStall+0x4c>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	791b      	ldrb	r3, [r3, #4]
 800b374:	2b02      	cmp	r3, #2
 800b376:	d138      	bne.n	800b3ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	0151      	lsls	r1, r2, #5
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	440a      	add	r2, r1
 800b38e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	e027      	b.n	800b3ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	791b      	ldrb	r3, [r3, #4]
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d003      	beq.n	800b3ca <USB_EPClearStall+0x9e>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	791b      	ldrb	r3, [r3, #4]
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d10f      	bne.n	800b3ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	0151      	lsls	r1, r2, #5
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	440a      	add	r2, r1
 800b3e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b416:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b41a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	78fb      	ldrb	r3, [r7, #3]
 800b426:	011b      	lsls	r3, r3, #4
 800b428:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b42c:	68f9      	ldr	r1, [r7, #12]
 800b42e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b432:	4313      	orrs	r3, r2
 800b434:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b472:	f023 0302 	bic.w	r3, r3, #2
 800b476:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b486:	b480      	push	{r7}
 800b488:	b085      	sub	sp, #20
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b4a0:	f023 0303 	bic.w	r3, r3, #3
 800b4a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4b4:	f043 0302 	orr.w	r3, r3, #2
 800b4b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	4013      	ands	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b50a:	69db      	ldr	r3, [r3, #28]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	4013      	ands	r3, r2
 800b510:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	0c1b      	lsrs	r3, r3, #16
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b522:	b480      	push	{r7}
 800b524:	b085      	sub	sp, #20
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	4013      	ands	r3, r2
 800b544:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	b29b      	uxth	r3, r3
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	4013      	ands	r3, r2
 800b582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b584:	68bb      	ldr	r3, [r7, #8]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b592:	b480      	push	{r7}
 800b594:	b087      	sub	sp, #28
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b5b6:	78fb      	ldrb	r3, [r7, #3]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c2:	01db      	lsls	r3, r3, #7
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b5cc:	78fb      	ldrb	r3, [r7, #3]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b624:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b628:	f023 0307 	bic.w	r3, r3, #7
 800b62c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b63c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	333c      	adds	r3, #60	@ 0x3c
 800b662:	3304      	adds	r3, #4
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	4a1c      	ldr	r2, [pc, #112]	@ (800b6dc <USB_EP0_OutStart+0x8c>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d90a      	bls.n	800b686 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b67c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b680:	d101      	bne.n	800b686 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e024      	b.n	800b6d0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68c:	461a      	mov	r2, r3
 800b68e:	2300      	movs	r3, #0
 800b690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6b4:	f043 0318 	orr.w	r3, r3, #24
 800b6b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b6cc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	4f54300a 	.word	0x4f54300a

0800b6e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6f8:	d901      	bls.n	800b6fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e01b      	b.n	800b736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	daf2      	bge.n	800b6ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	f043 0201 	orr.w	r2, r3, #1
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b722:	d901      	bls.n	800b728 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b724:	2303      	movs	r3, #3
 800b726:	e006      	b.n	800b736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b01      	cmp	r3, #1
 800b732:	d0f0      	beq.n	800b716 <USB_CoreReset+0x36>

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
	...

0800b744 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	460b      	mov	r3, r1
 800b74e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b750:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b754:	f002 fd9e 	bl	800e294 <USBD_static_malloc>
 800b758:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d109      	bne.n	800b774 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	32b0      	adds	r2, #176	@ 0xb0
 800b76a:	2100      	movs	r1, #0
 800b76c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b770:	2302      	movs	r3, #2
 800b772:	e0d4      	b.n	800b91e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b774:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b778:	2100      	movs	r1, #0
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f002 fda8 	bl	800e2d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	32b0      	adds	r2, #176	@ 0xb0
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	32b0      	adds	r2, #176	@ 0xb0
 800b79a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	7c1b      	ldrb	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d138      	bne.n	800b81e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7ac:	4b5e      	ldr	r3, [pc, #376]	@ (800b928 <USBD_CDC_Init+0x1e4>)
 800b7ae:	7819      	ldrb	r1, [r3, #0]
 800b7b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f002 fb58 	bl	800de6c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7bc:	4b5a      	ldr	r3, [pc, #360]	@ (800b928 <USBD_CDC_Init+0x1e4>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	f003 020f 	and.w	r2, r3, #15
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3324      	adds	r3, #36	@ 0x24
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7d6:	4b55      	ldr	r3, [pc, #340]	@ (800b92c <USBD_CDC_Init+0x1e8>)
 800b7d8:	7819      	ldrb	r1, [r3, #0]
 800b7da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7de:	2202      	movs	r2, #2
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f002 fb43 	bl	800de6c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7e6:	4b51      	ldr	r3, [pc, #324]	@ (800b92c <USBD_CDC_Init+0x1e8>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	f003 020f 	and.w	r2, r3, #15
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	440b      	add	r3, r1
 800b7fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7fe:	2201      	movs	r2, #1
 800b800:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b802:	4b4b      	ldr	r3, [pc, #300]	@ (800b930 <USBD_CDC_Init+0x1ec>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	f003 020f 	and.w	r2, r3, #15
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	440b      	add	r3, r1
 800b816:	3326      	adds	r3, #38	@ 0x26
 800b818:	2210      	movs	r2, #16
 800b81a:	801a      	strh	r2, [r3, #0]
 800b81c:	e035      	b.n	800b88a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b81e:	4b42      	ldr	r3, [pc, #264]	@ (800b928 <USBD_CDC_Init+0x1e4>)
 800b820:	7819      	ldrb	r1, [r3, #0]
 800b822:	2340      	movs	r3, #64	@ 0x40
 800b824:	2202      	movs	r2, #2
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f002 fb20 	bl	800de6c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b82c:	4b3e      	ldr	r3, [pc, #248]	@ (800b928 <USBD_CDC_Init+0x1e4>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	f003 020f 	and.w	r2, r3, #15
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	440b      	add	r3, r1
 800b840:	3324      	adds	r3, #36	@ 0x24
 800b842:	2201      	movs	r2, #1
 800b844:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b846:	4b39      	ldr	r3, [pc, #228]	@ (800b92c <USBD_CDC_Init+0x1e8>)
 800b848:	7819      	ldrb	r1, [r3, #0]
 800b84a:	2340      	movs	r3, #64	@ 0x40
 800b84c:	2202      	movs	r2, #2
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f002 fb0c 	bl	800de6c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b854:	4b35      	ldr	r3, [pc, #212]	@ (800b92c <USBD_CDC_Init+0x1e8>)
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	f003 020f 	and.w	r2, r3, #15
 800b85c:	6879      	ldr	r1, [r7, #4]
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	440b      	add	r3, r1
 800b868:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b86c:	2201      	movs	r2, #1
 800b86e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b870:	4b2f      	ldr	r3, [pc, #188]	@ (800b930 <USBD_CDC_Init+0x1ec>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	f003 020f 	and.w	r2, r3, #15
 800b878:	6879      	ldr	r1, [r7, #4]
 800b87a:	4613      	mov	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	440b      	add	r3, r1
 800b884:	3326      	adds	r3, #38	@ 0x26
 800b886:	2210      	movs	r2, #16
 800b888:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b88a:	4b29      	ldr	r3, [pc, #164]	@ (800b930 <USBD_CDC_Init+0x1ec>)
 800b88c:	7819      	ldrb	r1, [r3, #0]
 800b88e:	2308      	movs	r3, #8
 800b890:	2203      	movs	r2, #3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f002 faea 	bl	800de6c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b898:	4b25      	ldr	r3, [pc, #148]	@ (800b930 <USBD_CDC_Init+0x1ec>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 020f 	and.w	r2, r3, #15
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	3324      	adds	r3, #36	@ 0x24
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	33b0      	adds	r3, #176	@ 0xb0
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	e018      	b.n	800b91e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	7c1b      	ldrb	r3, [r3, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b92c <USBD_CDC_Init+0x1e8>)
 800b8f6:	7819      	ldrb	r1, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f002 fc2c 	bl	800e160 <USBD_LL_PrepareReceive>
 800b908:	e008      	b.n	800b91c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b90a:	4b08      	ldr	r3, [pc, #32]	@ (800b92c <USBD_CDC_Init+0x1e8>)
 800b90c:	7819      	ldrb	r1, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b914:	2340      	movs	r3, #64	@ 0x40
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f002 fc22 	bl	800e160 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20000093 	.word	0x20000093
 800b92c:	20000094 	.word	0x20000094
 800b930:	20000095 	.word	0x20000095

0800b934 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b940:	4b3a      	ldr	r3, [pc, #232]	@ (800ba2c <USBD_CDC_DeInit+0xf8>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f002 face 	bl	800dee8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b94c:	4b37      	ldr	r3, [pc, #220]	@ (800ba2c <USBD_CDC_DeInit+0xf8>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 020f 	and.w	r2, r3, #15
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	3324      	adds	r3, #36	@ 0x24
 800b962:	2200      	movs	r2, #0
 800b964:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b966:	4b32      	ldr	r3, [pc, #200]	@ (800ba30 <USBD_CDC_DeInit+0xfc>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f002 fabb 	bl	800dee8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b972:	4b2f      	ldr	r3, [pc, #188]	@ (800ba30 <USBD_CDC_DeInit+0xfc>)
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	f003 020f 	and.w	r2, r3, #15
 800b97a:	6879      	ldr	r1, [r7, #4]
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	440b      	add	r3, r1
 800b986:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b98a:	2200      	movs	r2, #0
 800b98c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b98e:	4b29      	ldr	r3, [pc, #164]	@ (800ba34 <USBD_CDC_DeInit+0x100>)
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f002 faa7 	bl	800dee8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b99a:	4b26      	ldr	r3, [pc, #152]	@ (800ba34 <USBD_CDC_DeInit+0x100>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	f003 020f 	and.w	r2, r3, #15
 800b9a2:	6879      	ldr	r1, [r7, #4]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4413      	add	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	440b      	add	r3, r1
 800b9ae:	3324      	adds	r3, #36	@ 0x24
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b9b4:	4b1f      	ldr	r3, [pc, #124]	@ (800ba34 <USBD_CDC_DeInit+0x100>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	f003 020f 	and.w	r2, r3, #15
 800b9bc:	6879      	ldr	r1, [r7, #4]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3326      	adds	r3, #38	@ 0x26
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	32b0      	adds	r2, #176	@ 0xb0
 800b9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d01f      	beq.n	800ba20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	33b0      	adds	r3, #176	@ 0xb0
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	32b0      	adds	r2, #176	@ 0xb0
 800b9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f002 fc54 	bl	800e2b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	32b0      	adds	r2, #176	@ 0xb0
 800ba12:	2100      	movs	r1, #0
 800ba14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20000093 	.word	0x20000093
 800ba30:	20000094 	.word	0x20000094
 800ba34:	20000095 	.word	0x20000095

0800ba38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	32b0      	adds	r2, #176	@ 0xb0
 800ba4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba56:	2300      	movs	r3, #0
 800ba58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e0bf      	b.n	800bbe8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d050      	beq.n	800bb16 <USBD_CDC_Setup+0xde>
 800ba74:	2b20      	cmp	r3, #32
 800ba76:	f040 80af 	bne.w	800bbd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	88db      	ldrh	r3, [r3, #6]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d03a      	beq.n	800baf8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b25b      	sxtb	r3, r3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	da1b      	bge.n	800bac4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	33b0      	adds	r3, #176	@ 0xb0
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800baa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	88d2      	ldrh	r2, [r2, #6]
 800baa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	88db      	ldrh	r3, [r3, #6]
 800baae:	2b07      	cmp	r3, #7
 800bab0:	bf28      	it	cs
 800bab2:	2307      	movcs	r3, #7
 800bab4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	89fa      	ldrh	r2, [r7, #14]
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 fd7d 	bl	800d5bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bac2:	e090      	b.n	800bbe6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	785a      	ldrb	r2, [r3, #1]
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	88db      	ldrh	r3, [r3, #6]
 800bad2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bad4:	d803      	bhi.n	800bade <USBD_CDC_Setup+0xa6>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	88db      	ldrh	r3, [r3, #6]
 800bada:	b2da      	uxtb	r2, r3
 800badc:	e000      	b.n	800bae0 <USBD_CDC_Setup+0xa8>
 800bade:	2240      	movs	r2, #64	@ 0x40
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bae6:	6939      	ldr	r1, [r7, #16]
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800baee:	461a      	mov	r2, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 fd8f 	bl	800d614 <USBD_CtlPrepareRx>
      break;
 800baf6:	e076      	b.n	800bbe6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	33b0      	adds	r3, #176	@ 0xb0
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	7850      	ldrb	r0, [r2, #1]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	4798      	blx	r3
      break;
 800bb14:	e067      	b.n	800bbe6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	785b      	ldrb	r3, [r3, #1]
 800bb1a:	2b0b      	cmp	r3, #11
 800bb1c:	d851      	bhi.n	800bbc2 <USBD_CDC_Setup+0x18a>
 800bb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb24 <USBD_CDC_Setup+0xec>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb55 	.word	0x0800bb55
 800bb28:	0800bbd1 	.word	0x0800bbd1
 800bb2c:	0800bbc3 	.word	0x0800bbc3
 800bb30:	0800bbc3 	.word	0x0800bbc3
 800bb34:	0800bbc3 	.word	0x0800bbc3
 800bb38:	0800bbc3 	.word	0x0800bbc3
 800bb3c:	0800bbc3 	.word	0x0800bbc3
 800bb40:	0800bbc3 	.word	0x0800bbc3
 800bb44:	0800bbc3 	.word	0x0800bbc3
 800bb48:	0800bbc3 	.word	0x0800bbc3
 800bb4c:	0800bb7f 	.word	0x0800bb7f
 800bb50:	0800bba9 	.word	0x0800bba9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d107      	bne.n	800bb70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb60:	f107 030a 	add.w	r3, r7, #10
 800bb64:	2202      	movs	r2, #2
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 fd27 	bl	800d5bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb6e:	e032      	b.n	800bbd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f001 fca5 	bl	800d4c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	75fb      	strb	r3, [r7, #23]
          break;
 800bb7c:	e02b      	b.n	800bbd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d107      	bne.n	800bb9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb8a:	f107 030d 	add.w	r3, r7, #13
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 fd12 	bl	800d5bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb98:	e01d      	b.n	800bbd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 fc90 	bl	800d4c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bba2:	2303      	movs	r3, #3
 800bba4:	75fb      	strb	r3, [r7, #23]
          break;
 800bba6:	e016      	b.n	800bbd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d00f      	beq.n	800bbd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 fc83 	bl	800d4c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bbc0:	e008      	b.n	800bbd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f001 fc7c 	bl	800d4c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	75fb      	strb	r3, [r7, #23]
          break;
 800bbce:	e002      	b.n	800bbd6 <USBD_CDC_Setup+0x19e>
          break;
 800bbd0:	bf00      	nop
 800bbd2:	e008      	b.n	800bbe6 <USBD_CDC_Setup+0x1ae>
          break;
 800bbd4:	bf00      	nop
      }
      break;
 800bbd6:	e006      	b.n	800bbe6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f001 fc71 	bl	800d4c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe4:	bf00      	nop
  }

  return (uint8_t)ret;
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	32b0      	adds	r2, #176	@ 0xb0
 800bc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bc16:	2303      	movs	r3, #3
 800bc18:	e065      	b.n	800bce6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	32b0      	adds	r2, #176	@ 0xb0
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc2a:	78fb      	ldrb	r3, [r7, #3]
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3318      	adds	r3, #24
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d02f      	beq.n	800bca4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bc44:	78fb      	ldrb	r3, [r7, #3]
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	3318      	adds	r3, #24
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	78fb      	ldrb	r3, [r7, #3]
 800bc5c:	f003 010f 	and.w	r1, r3, #15
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	460b      	mov	r3, r1
 800bc64:	00db      	lsls	r3, r3, #3
 800bc66:	440b      	add	r3, r1
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4403      	add	r3, r0
 800bc6c:	331c      	adds	r3, #28
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc74:	fb01 f303 	mul.w	r3, r1, r3
 800bc78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d112      	bne.n	800bca4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	f003 020f 	and.w	r2, r3, #15
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	3318      	adds	r3, #24
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc96:	78f9      	ldrb	r1, [r7, #3]
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f002 fa27 	bl	800e0f0 <USBD_LL_Transmit>
 800bca2:	e01f      	b.n	800bce4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	33b0      	adds	r3, #176	@ 0xb0
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d010      	beq.n	800bce4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	33b0      	adds	r3, #176	@ 0xb0
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bce0:	78fa      	ldrb	r2, [r7, #3]
 800bce2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	32b0      	adds	r2, #176	@ 0xb0
 800bd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	32b0      	adds	r2, #176	@ 0xb0
 800bd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e01a      	b.n	800bd56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f002 fa53 	bl	800e1d0 <USBD_LL_GetRxDataSize>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	33b0      	adds	r3, #176	@ 0xb0
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bd50:	4611      	mov	r1, r2
 800bd52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	32b0      	adds	r2, #176	@ 0xb0
 800bd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e024      	b.n	800bdca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	33b0      	adds	r3, #176	@ 0xb0
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d019      	beq.n	800bdc8 <USBD_CDC_EP0_RxReady+0x6a>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bd9a:	2bff      	cmp	r3, #255	@ 0xff
 800bd9c:	d014      	beq.n	800bdc8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	33b0      	adds	r3, #176	@ 0xb0
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bdb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bdbe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	22ff      	movs	r2, #255	@ 0xff
 800bdc4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bddc:	2182      	movs	r1, #130	@ 0x82
 800bdde:	4818      	ldr	r0, [pc, #96]	@ (800be40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bde0:	f000 fd0f 	bl	800c802 <USBD_GetEpDesc>
 800bde4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bde6:	2101      	movs	r1, #1
 800bde8:	4815      	ldr	r0, [pc, #84]	@ (800be40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdea:	f000 fd0a 	bl	800c802 <USBD_GetEpDesc>
 800bdee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdf0:	2181      	movs	r1, #129	@ 0x81
 800bdf2:	4813      	ldr	r0, [pc, #76]	@ (800be40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdf4:	f000 fd05 	bl	800c802 <USBD_GetEpDesc>
 800bdf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2210      	movs	r2, #16
 800be04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d006      	beq.n	800be1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2200      	movs	r2, #0
 800be10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be14:	711a      	strb	r2, [r3, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be28:	711a      	strb	r2, [r3, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2243      	movs	r2, #67	@ 0x43
 800be32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be34:	4b02      	ldr	r3, [pc, #8]	@ (800be40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20000050 	.word	0x20000050

0800be44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be4c:	2182      	movs	r1, #130	@ 0x82
 800be4e:	4818      	ldr	r0, [pc, #96]	@ (800beb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be50:	f000 fcd7 	bl	800c802 <USBD_GetEpDesc>
 800be54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be56:	2101      	movs	r1, #1
 800be58:	4815      	ldr	r0, [pc, #84]	@ (800beb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be5a:	f000 fcd2 	bl	800c802 <USBD_GetEpDesc>
 800be5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be60:	2181      	movs	r1, #129	@ 0x81
 800be62:	4813      	ldr	r0, [pc, #76]	@ (800beb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be64:	f000 fccd 	bl	800c802 <USBD_GetEpDesc>
 800be68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2210      	movs	r2, #16
 800be74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d006      	beq.n	800be8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	2200      	movs	r2, #0
 800be80:	711a      	strb	r2, [r3, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f042 0202 	orr.w	r2, r2, #2
 800be88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d006      	beq.n	800be9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	711a      	strb	r2, [r3, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f042 0202 	orr.w	r2, r2, #2
 800be9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2243      	movs	r2, #67	@ 0x43
 800bea2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bea4:	4b02      	ldr	r3, [pc, #8]	@ (800beb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20000050 	.word	0x20000050

0800beb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bebc:	2182      	movs	r1, #130	@ 0x82
 800bebe:	4818      	ldr	r0, [pc, #96]	@ (800bf20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bec0:	f000 fc9f 	bl	800c802 <USBD_GetEpDesc>
 800bec4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bec6:	2101      	movs	r1, #1
 800bec8:	4815      	ldr	r0, [pc, #84]	@ (800bf20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800beca:	f000 fc9a 	bl	800c802 <USBD_GetEpDesc>
 800bece:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bed0:	2181      	movs	r1, #129	@ 0x81
 800bed2:	4813      	ldr	r0, [pc, #76]	@ (800bf20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bed4:	f000 fc95 	bl	800c802 <USBD_GetEpDesc>
 800bed8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2210      	movs	r2, #16
 800bee4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d006      	beq.n	800befa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	2200      	movs	r2, #0
 800bef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bef4:	711a      	strb	r2, [r3, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d006      	beq.n	800bf0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf08:	711a      	strb	r2, [r3, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2243      	movs	r2, #67	@ 0x43
 800bf12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf14:	4b02      	ldr	r3, [pc, #8]	@ (800bf20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000050 	.word	0x20000050

0800bf24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	220a      	movs	r2, #10
 800bf30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bf32:	4b03      	ldr	r3, [pc, #12]	@ (800bf40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	2000000c 	.word	0x2000000c

0800bf44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e009      	b.n	800bf6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	33b0      	adds	r3, #176	@ 0xb0
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b087      	sub	sp, #28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	32b0      	adds	r2, #176	@ 0xb0
 800bf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e008      	b.n	800bfb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	371c      	adds	r7, #28
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	32b0      	adds	r2, #176	@ 0xb0
 800bfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e004      	b.n	800bfea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
	...

0800bff8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32b0      	adds	r2, #176	@ 0xb0
 800c00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	32b0      	adds	r2, #176	@ 0xb0
 800c01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c022:	2303      	movs	r3, #3
 800c024:	e018      	b.n	800c058 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	7c1b      	ldrb	r3, [r3, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c02e:	4b0c      	ldr	r3, [pc, #48]	@ (800c060 <USBD_CDC_ReceivePacket+0x68>)
 800c030:	7819      	ldrb	r1, [r3, #0]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c038:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f002 f88f 	bl	800e160 <USBD_LL_PrepareReceive>
 800c042:	e008      	b.n	800c056 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c044:	4b06      	ldr	r3, [pc, #24]	@ (800c060 <USBD_CDC_ReceivePacket+0x68>)
 800c046:	7819      	ldrb	r1, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c04e:	2340      	movs	r3, #64	@ 0x40
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 f885 	bl	800e160 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	20000094 	.word	0x20000094

0800c064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4613      	mov	r3, r2
 800c070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c078:	2303      	movs	r3, #3
 800c07a:	e01f      	b.n	800c0bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	79fa      	ldrb	r2, [r7, #7]
 800c0ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f001 fe5d 	bl	800dd70 <USBD_LL_Init>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	e025      	b.n	800c128 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	32ae      	adds	r2, #174	@ 0xae
 800c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00f      	beq.n	800c118 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	32ae      	adds	r2, #174	@ 0xae
 800c102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c108:	f107 020e 	add.w	r2, r7, #14
 800c10c:	4610      	mov	r0, r2
 800c10e:	4798      	blx	r3
 800c110:	4602      	mov	r2, r0
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 fe65 	bl	800de08 <USBD_LL_Start>
 800c13e:	4603      	mov	r3, r0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c150:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c174:	2b00      	cmp	r3, #0
 800c176:	d009      	beq.n	800c18c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	78fa      	ldrb	r2, [r7, #3]
 800c182:	4611      	mov	r1, r2
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	4798      	blx	r3
 800c188:	4603      	mov	r3, r0
 800c18a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	78fa      	ldrb	r2, [r7, #3]
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	4798      	blx	r3
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f001 f936 	bl	800d44e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1fe:	f003 031f 	and.w	r3, r3, #31
 800c202:	2b02      	cmp	r3, #2
 800c204:	d01a      	beq.n	800c23c <USBD_LL_SetupStage+0x72>
 800c206:	2b02      	cmp	r3, #2
 800c208:	d822      	bhi.n	800c250 <USBD_LL_SetupStage+0x86>
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <USBD_LL_SetupStage+0x4a>
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d00a      	beq.n	800c228 <USBD_LL_SetupStage+0x5e>
 800c212:	e01d      	b.n	800c250 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fb63 	bl	800c8e8 <USBD_StdDevReq>
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]
      break;
 800c226:	e020      	b.n	800c26a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fbcb 	bl	800c9cc <USBD_StdItfReq>
 800c236:	4603      	mov	r3, r0
 800c238:	73fb      	strb	r3, [r7, #15]
      break;
 800c23a:	e016      	b.n	800c26a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fc2d 	bl	800caa4 <USBD_StdEPReq>
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]
      break;
 800c24e:	e00c      	b.n	800c26a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c256:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 fe78 	bl	800df54 <USBD_LL_StallEP>
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]
      break;
 800c268:	bf00      	nop
  }

  return ret;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	460b      	mov	r3, r1
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d16e      	bne.n	800c36a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	f040 8098 	bne.w	800c3d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	689a      	ldr	r2, [r3, #8]
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d913      	bls.n	800c2d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	1ad2      	subs	r2, r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	bf28      	it	cs
 800c2c6:	4613      	movcs	r3, r2
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f001 f9be 	bl	800d64e <USBD_CtlContinueRx>
 800c2d2:	e07d      	b.n	800c3d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2da:	f003 031f 	and.w	r3, r3, #31
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d014      	beq.n	800c30c <USBD_LL_DataOutStage+0x98>
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d81d      	bhi.n	800c322 <USBD_LL_DataOutStage+0xae>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <USBD_LL_DataOutStage+0x7c>
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d003      	beq.n	800c2f6 <USBD_LL_DataOutStage+0x82>
 800c2ee:	e018      	b.n	800c322 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	75bb      	strb	r3, [r7, #22]
            break;
 800c2f4:	e018      	b.n	800c328 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	4619      	mov	r1, r3
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 fa64 	bl	800c7ce <USBD_CoreFindIF>
 800c306:	4603      	mov	r3, r0
 800c308:	75bb      	strb	r3, [r7, #22]
            break;
 800c30a:	e00d      	b.n	800c328 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c312:	b2db      	uxtb	r3, r3
 800c314:	4619      	mov	r1, r3
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fa66 	bl	800c7e8 <USBD_CoreFindEP>
 800c31c:	4603      	mov	r3, r0
 800c31e:	75bb      	strb	r3, [r7, #22]
            break;
 800c320:	e002      	b.n	800c328 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c322:	2300      	movs	r3, #0
 800c324:	75bb      	strb	r3, [r7, #22]
            break;
 800c326:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c328:	7dbb      	ldrb	r3, [r7, #22]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d119      	bne.n	800c362 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b03      	cmp	r3, #3
 800c338:	d113      	bne.n	800c362 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c33a:	7dba      	ldrb	r2, [r7, #22]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	32ae      	adds	r2, #174	@ 0xae
 800c340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00b      	beq.n	800c362 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c34a:	7dba      	ldrb	r2, [r7, #22]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c352:	7dba      	ldrb	r2, [r7, #22]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	32ae      	adds	r2, #174	@ 0xae
 800c358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f001 f984 	bl	800d670 <USBD_CtlSendStatus>
 800c368:	e032      	b.n	800c3d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c36a:	7afb      	ldrb	r3, [r7, #11]
 800c36c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c370:	b2db      	uxtb	r3, r3
 800c372:	4619      	mov	r1, r3
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 fa37 	bl	800c7e8 <USBD_CoreFindEP>
 800c37a:	4603      	mov	r3, r0
 800c37c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c37e:	7dbb      	ldrb	r3, [r7, #22]
 800c380:	2bff      	cmp	r3, #255	@ 0xff
 800c382:	d025      	beq.n	800c3d0 <USBD_LL_DataOutStage+0x15c>
 800c384:	7dbb      	ldrb	r3, [r7, #22]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d122      	bne.n	800c3d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b03      	cmp	r3, #3
 800c394:	d117      	bne.n	800c3c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c396:	7dba      	ldrb	r2, [r7, #22]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	32ae      	adds	r2, #174	@ 0xae
 800c39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00f      	beq.n	800c3c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c3a6:	7dba      	ldrb	r2, [r7, #22]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c3ae:	7dba      	ldrb	r2, [r7, #22]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	32ae      	adds	r2, #174	@ 0xae
 800c3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	7afa      	ldrb	r2, [r7, #11]
 800c3bc:	4611      	mov	r1, r2
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	4798      	blx	r3
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	e000      	b.n	800c3d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3718      	adds	r7, #24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b086      	sub	sp, #24
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	607a      	str	r2, [r7, #4]
 800c3e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d16f      	bne.n	800c4ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3314      	adds	r3, #20
 800c3f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d15a      	bne.n	800c4b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	689a      	ldr	r2, [r3, #8]
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	429a      	cmp	r2, r3
 800c408:	d914      	bls.n	800c434 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	689a      	ldr	r2, [r3, #8]
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	461a      	mov	r2, r3
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f001 f8e6 	bl	800d5f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c426:	2300      	movs	r3, #0
 800c428:	2200      	movs	r2, #0
 800c42a:	2100      	movs	r1, #0
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f001 fe97 	bl	800e160 <USBD_LL_PrepareReceive>
 800c432:	e03f      	b.n	800c4b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	68da      	ldr	r2, [r3, #12]
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d11c      	bne.n	800c47a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c448:	429a      	cmp	r2, r3
 800c44a:	d316      	bcc.n	800c47a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c456:	429a      	cmp	r2, r3
 800c458:	d20f      	bcs.n	800c47a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c45a:	2200      	movs	r2, #0
 800c45c:	2100      	movs	r1, #0
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f001 f8c7 	bl	800d5f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c46c:	2300      	movs	r3, #0
 800c46e:	2200      	movs	r2, #0
 800c470:	2100      	movs	r1, #0
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f001 fe74 	bl	800e160 <USBD_LL_PrepareReceive>
 800c478:	e01c      	b.n	800c4b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b03      	cmp	r3, #3
 800c484:	d10f      	bne.n	800c4a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d009      	beq.n	800c4a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a6:	2180      	movs	r1, #128	@ 0x80
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f001 fd53 	bl	800df54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f001 f8f1 	bl	800d696 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d03a      	beq.n	800c534 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff fe42 	bl	800c148 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c4cc:	e032      	b.n	800c534 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 f985 	bl	800c7e8 <USBD_CoreFindEP>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	2bff      	cmp	r3, #255	@ 0xff
 800c4e6:	d025      	beq.n	800c534 <USBD_LL_DataInStage+0x15a>
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d122      	bne.n	800c534 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d11c      	bne.n	800c534 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c4fa:	7dfa      	ldrb	r2, [r7, #23]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	32ae      	adds	r2, #174	@ 0xae
 800c500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d014      	beq.n	800c534 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c50a:	7dfa      	ldrb	r2, [r7, #23]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c512:	7dfa      	ldrb	r2, [r7, #23]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	32ae      	adds	r2, #174	@ 0xae
 800c518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	7afa      	ldrb	r2, [r7, #11]
 800c520:	4611      	mov	r1, r2
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	4798      	blx	r3
 800c526:	4603      	mov	r3, r0
 800c528:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c52a:	7dbb      	ldrb	r3, [r7, #22]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c530:	7dbb      	ldrb	r3, [r7, #22]
 800c532:	e000      	b.n	800c536 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3718      	adds	r7, #24
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c576:	2b00      	cmp	r3, #0
 800c578:	d014      	beq.n	800c5a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00e      	beq.n	800c5a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	6852      	ldr	r2, [r2, #4]
 800c592:	b2d2      	uxtb	r2, r2
 800c594:	4611      	mov	r1, r2
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5a4:	2340      	movs	r3, #64	@ 0x40
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f001 fc5e 	bl	800de6c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2240      	movs	r2, #64	@ 0x40
 800c5bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5c0:	2340      	movs	r3, #64	@ 0x40
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2180      	movs	r1, #128	@ 0x80
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f001 fc50 	bl	800de6c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2240      	movs	r2, #64	@ 0x40
 800c5d6:	621a      	str	r2, [r3, #32]

  return ret;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	78fa      	ldrb	r2, [r7, #3]
 800c5f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b04      	cmp	r3, #4
 800c614:	d006      	beq.n	800c624 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2204      	movs	r2, #4
 800c628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	d106      	bne.n	800c65c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c654:	b2da      	uxtb	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr

0800c66a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d110      	bne.n	800c6a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00b      	beq.n	800c6a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c68e:	69db      	ldr	r3, [r3, #28]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d005      	beq.n	800c6a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c69a:	69db      	ldr	r3, [r3, #28]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	32ae      	adds	r2, #174	@ 0xae
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e01c      	b.n	800c706 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d115      	bne.n	800c704 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	32ae      	adds	r2, #174	@ 0xae
 800c6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e6:	6a1b      	ldr	r3, [r3, #32]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00b      	beq.n	800c704 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	32ae      	adds	r2, #174	@ 0xae
 800c6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	4611      	mov	r1, r2
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b082      	sub	sp, #8
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	32ae      	adds	r2, #174	@ 0xae
 800c724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e01c      	b.n	800c76a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d115      	bne.n	800c768 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	32ae      	adds	r2, #174	@ 0xae
 800c746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00b      	beq.n	800c768 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	32ae      	adds	r2, #174	@ 0xae
 800c75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c760:	78fa      	ldrb	r2, [r7, #3]
 800c762:	4611      	mov	r1, r2
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00e      	beq.n	800c7c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	6852      	ldr	r2, [r2, #4]
 800c7b2:	b2d2      	uxtb	r2, r2
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	4798      	blx	r3
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b086      	sub	sp, #24
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	885b      	ldrh	r3, [r3, #2]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	7812      	ldrb	r2, [r2, #0]
 800c824:	4293      	cmp	r3, r2
 800c826:	d91f      	bls.n	800c868 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c82e:	e013      	b.n	800c858 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c830:	f107 030a 	add.w	r3, r7, #10
 800c834:	4619      	mov	r1, r3
 800c836:	6978      	ldr	r0, [r7, #20]
 800c838:	f000 f81b 	bl	800c872 <USBD_GetNextDesc>
 800c83c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	785b      	ldrb	r3, [r3, #1]
 800c842:	2b05      	cmp	r3, #5
 800c844:	d108      	bne.n	800c858 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	789b      	ldrb	r3, [r3, #2]
 800c84e:	78fa      	ldrb	r2, [r7, #3]
 800c850:	429a      	cmp	r2, r3
 800c852:	d008      	beq.n	800c866 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c854:	2300      	movs	r3, #0
 800c856:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	885b      	ldrh	r3, [r3, #2]
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	897b      	ldrh	r3, [r7, #10]
 800c860:	429a      	cmp	r2, r3
 800c862:	d8e5      	bhi.n	800c830 <USBD_GetEpDesc+0x2e>
 800c864:	e000      	b.n	800c868 <USBD_GetEpDesc+0x66>
          break;
 800c866:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c868:	693b      	ldr	r3, [r7, #16]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3718      	adds	r7, #24
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c872:	b480      	push	{r7}
 800c874:	b085      	sub	sp, #20
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	7812      	ldrb	r2, [r2, #0]
 800c888:	4413      	add	r3, r2
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	461a      	mov	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4413      	add	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c89c:	68fb      	ldr	r3, [r7, #12]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b087      	sub	sp, #28
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	b21a      	sxth	r2, r3
 800c8d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	b21b      	sxth	r3, r3
 800c8d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8da:	89fb      	ldrh	r3, [r7, #14]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	371c      	adds	r7, #28
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8fe:	2b40      	cmp	r3, #64	@ 0x40
 800c900:	d005      	beq.n	800c90e <USBD_StdDevReq+0x26>
 800c902:	2b40      	cmp	r3, #64	@ 0x40
 800c904:	d857      	bhi.n	800c9b6 <USBD_StdDevReq+0xce>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00f      	beq.n	800c92a <USBD_StdDevReq+0x42>
 800c90a:	2b20      	cmp	r3, #32
 800c90c:	d153      	bne.n	800c9b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	32ae      	adds	r2, #174	@ 0xae
 800c918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	4798      	blx	r3
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]
      break;
 800c928:	e04a      	b.n	800c9c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b09      	cmp	r3, #9
 800c930:	d83b      	bhi.n	800c9aa <USBD_StdDevReq+0xc2>
 800c932:	a201      	add	r2, pc, #4	@ (adr r2, 800c938 <USBD_StdDevReq+0x50>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c98d 	.word	0x0800c98d
 800c93c:	0800c9a1 	.word	0x0800c9a1
 800c940:	0800c9ab 	.word	0x0800c9ab
 800c944:	0800c997 	.word	0x0800c997
 800c948:	0800c9ab 	.word	0x0800c9ab
 800c94c:	0800c96b 	.word	0x0800c96b
 800c950:	0800c961 	.word	0x0800c961
 800c954:	0800c9ab 	.word	0x0800c9ab
 800c958:	0800c983 	.word	0x0800c983
 800c95c:	0800c975 	.word	0x0800c975
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fa3c 	bl	800cde0 <USBD_GetDescriptor>
          break;
 800c968:	e024      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fbcb 	bl	800d108 <USBD_SetAddress>
          break;
 800c972:	e01f      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fc0a 	bl	800d190 <USBD_SetConfig>
 800c97c:	4603      	mov	r3, r0
 800c97e:	73fb      	strb	r3, [r7, #15]
          break;
 800c980:	e018      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fcad 	bl	800d2e4 <USBD_GetConfig>
          break;
 800c98a:	e013      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fcde 	bl	800d350 <USBD_GetStatus>
          break;
 800c994:	e00e      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fd0d 	bl	800d3b8 <USBD_SetFeature>
          break;
 800c99e:	e009      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fd31 	bl	800d40a <USBD_ClrFeature>
          break;
 800c9a8:	e004      	b.n	800c9b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fd88 	bl	800d4c2 <USBD_CtlError>
          break;
 800c9b2:	bf00      	nop
      }
      break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fd82 	bl	800d4c2 <USBD_CtlError>
      break;
 800c9be:	bf00      	nop
  }

  return ret;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop

0800c9cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9e2:	2b40      	cmp	r3, #64	@ 0x40
 800c9e4:	d005      	beq.n	800c9f2 <USBD_StdItfReq+0x26>
 800c9e6:	2b40      	cmp	r3, #64	@ 0x40
 800c9e8:	d852      	bhi.n	800ca90 <USBD_StdItfReq+0xc4>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <USBD_StdItfReq+0x26>
 800c9ee:	2b20      	cmp	r3, #32
 800c9f0:	d14e      	bne.n	800ca90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d840      	bhi.n	800ca82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	889b      	ldrh	r3, [r3, #4]
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d836      	bhi.n	800ca78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	889b      	ldrh	r3, [r3, #4]
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff fedb 	bl	800c7ce <USBD_CoreFindIF>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	2bff      	cmp	r3, #255	@ 0xff
 800ca20:	d01d      	beq.n	800ca5e <USBD_StdItfReq+0x92>
 800ca22:	7bbb      	ldrb	r3, [r7, #14]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d11a      	bne.n	800ca5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca28:	7bba      	ldrb	r2, [r7, #14]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	32ae      	adds	r2, #174	@ 0xae
 800ca2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00f      	beq.n	800ca58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca38:	7bba      	ldrb	r2, [r7, #14]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca40:	7bba      	ldrb	r2, [r7, #14]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	32ae      	adds	r2, #174	@ 0xae
 800ca46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	4798      	blx	r3
 800ca52:	4603      	mov	r3, r0
 800ca54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca56:	e004      	b.n	800ca62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca5c:	e001      	b.n	800ca62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	88db      	ldrh	r3, [r3, #6]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d110      	bne.n	800ca8c <USBD_StdItfReq+0xc0>
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10d      	bne.n	800ca8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 fdfd 	bl	800d670 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca76:	e009      	b.n	800ca8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fd21 	bl	800d4c2 <USBD_CtlError>
          break;
 800ca80:	e004      	b.n	800ca8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fd1c 	bl	800d4c2 <USBD_CtlError>
          break;
 800ca8a:	e000      	b.n	800ca8e <USBD_StdItfReq+0xc2>
          break;
 800ca8c:	bf00      	nop
      }
      break;
 800ca8e:	e004      	b.n	800ca9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fd15 	bl	800d4c2 <USBD_CtlError>
      break;
 800ca98:	bf00      	nop
  }

  return ret;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	889b      	ldrh	r3, [r3, #4]
 800cab6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cac0:	2b40      	cmp	r3, #64	@ 0x40
 800cac2:	d007      	beq.n	800cad4 <USBD_StdEPReq+0x30>
 800cac4:	2b40      	cmp	r3, #64	@ 0x40
 800cac6:	f200 817f 	bhi.w	800cdc8 <USBD_StdEPReq+0x324>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d02a      	beq.n	800cb24 <USBD_StdEPReq+0x80>
 800cace:	2b20      	cmp	r3, #32
 800cad0:	f040 817a 	bne.w	800cdc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fe85 	bl	800c7e8 <USBD_CoreFindEP>
 800cade:	4603      	mov	r3, r0
 800cae0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cae2:	7b7b      	ldrb	r3, [r7, #13]
 800cae4:	2bff      	cmp	r3, #255	@ 0xff
 800cae6:	f000 8174 	beq.w	800cdd2 <USBD_StdEPReq+0x32e>
 800caea:	7b7b      	ldrb	r3, [r7, #13]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f040 8170 	bne.w	800cdd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800caf2:	7b7a      	ldrb	r2, [r7, #13]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cafa:	7b7a      	ldrb	r2, [r7, #13]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	32ae      	adds	r2, #174	@ 0xae
 800cb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 8163 	beq.w	800cdd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb0c:	7b7a      	ldrb	r2, [r7, #13]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	32ae      	adds	r2, #174	@ 0xae
 800cb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	4798      	blx	r3
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb22:	e156      	b.n	800cdd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	2b03      	cmp	r3, #3
 800cb2a:	d008      	beq.n	800cb3e <USBD_StdEPReq+0x9a>
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	f300 8145 	bgt.w	800cdbc <USBD_StdEPReq+0x318>
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 809b 	beq.w	800cc6e <USBD_StdEPReq+0x1ca>
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d03c      	beq.n	800cbb6 <USBD_StdEPReq+0x112>
 800cb3c:	e13e      	b.n	800cdbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d002      	beq.n	800cb50 <USBD_StdEPReq+0xac>
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d016      	beq.n	800cb7c <USBD_StdEPReq+0xd8>
 800cb4e:	e02c      	b.n	800cbaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00d      	beq.n	800cb72 <USBD_StdEPReq+0xce>
 800cb56:	7bbb      	ldrb	r3, [r7, #14]
 800cb58:	2b80      	cmp	r3, #128	@ 0x80
 800cb5a:	d00a      	beq.n	800cb72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 f9f7 	bl	800df54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb66:	2180      	movs	r1, #128	@ 0x80
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 f9f3 	bl	800df54 <USBD_LL_StallEP>
 800cb6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb70:	e020      	b.n	800cbb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fca4 	bl	800d4c2 <USBD_CtlError>
              break;
 800cb7a:	e01b      	b.n	800cbb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	885b      	ldrh	r3, [r3, #2]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10e      	bne.n	800cba2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00b      	beq.n	800cba2 <USBD_StdEPReq+0xfe>
 800cb8a:	7bbb      	ldrb	r3, [r7, #14]
 800cb8c:	2b80      	cmp	r3, #128	@ 0x80
 800cb8e:	d008      	beq.n	800cba2 <USBD_StdEPReq+0xfe>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	88db      	ldrh	r3, [r3, #6]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d104      	bne.n	800cba2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 f9d9 	bl	800df54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fd64 	bl	800d670 <USBD_CtlSendStatus>

              break;
 800cba8:	e004      	b.n	800cbb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 fc88 	bl	800d4c2 <USBD_CtlError>
              break;
 800cbb2:	bf00      	nop
          }
          break;
 800cbb4:	e107      	b.n	800cdc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d002      	beq.n	800cbc8 <USBD_StdEPReq+0x124>
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d016      	beq.n	800cbf4 <USBD_StdEPReq+0x150>
 800cbc6:	e04b      	b.n	800cc60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbc8:	7bbb      	ldrb	r3, [r7, #14]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00d      	beq.n	800cbea <USBD_StdEPReq+0x146>
 800cbce:	7bbb      	ldrb	r3, [r7, #14]
 800cbd0:	2b80      	cmp	r3, #128	@ 0x80
 800cbd2:	d00a      	beq.n	800cbea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f001 f9bb 	bl	800df54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbde:	2180      	movs	r1, #128	@ 0x80
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f001 f9b7 	bl	800df54 <USBD_LL_StallEP>
 800cbe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbe8:	e040      	b.n	800cc6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fc68 	bl	800d4c2 <USBD_CtlError>
              break;
 800cbf2:	e03b      	b.n	800cc6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	885b      	ldrh	r3, [r3, #2]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d136      	bne.n	800cc6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cbfc:	7bbb      	ldrb	r3, [r7, #14]
 800cbfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d004      	beq.n	800cc10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f001 f9d8 	bl	800dfc0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fd2d 	bl	800d670 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fde4 	bl	800c7e8 <USBD_CoreFindEP>
 800cc20:	4603      	mov	r3, r0
 800cc22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc24:	7b7b      	ldrb	r3, [r7, #13]
 800cc26:	2bff      	cmp	r3, #255	@ 0xff
 800cc28:	d01f      	beq.n	800cc6a <USBD_StdEPReq+0x1c6>
 800cc2a:	7b7b      	ldrb	r3, [r7, #13]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d11c      	bne.n	800cc6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc30:	7b7a      	ldrb	r2, [r7, #13]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc38:	7b7a      	ldrb	r2, [r7, #13]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	32ae      	adds	r2, #174	@ 0xae
 800cc3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d010      	beq.n	800cc6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc48:	7b7a      	ldrb	r2, [r7, #13]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	32ae      	adds	r2, #174	@ 0xae
 800cc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	4798      	blx	r3
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cc5e:	e004      	b.n	800cc6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fc2d 	bl	800d4c2 <USBD_CtlError>
              break;
 800cc68:	e000      	b.n	800cc6c <USBD_StdEPReq+0x1c8>
              break;
 800cc6a:	bf00      	nop
          }
          break;
 800cc6c:	e0ab      	b.n	800cdc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d002      	beq.n	800cc80 <USBD_StdEPReq+0x1dc>
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d032      	beq.n	800cce4 <USBD_StdEPReq+0x240>
 800cc7e:	e097      	b.n	800cdb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d007      	beq.n	800cc96 <USBD_StdEPReq+0x1f2>
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	2b80      	cmp	r3, #128	@ 0x80
 800cc8a:	d004      	beq.n	800cc96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fc17 	bl	800d4c2 <USBD_CtlError>
                break;
 800cc94:	e091      	b.n	800cdba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	da0b      	bge.n	800ccb6 <USBD_StdEPReq+0x212>
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	3310      	adds	r3, #16
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	e00b      	b.n	800ccce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccb6:	7bbb      	ldrb	r3, [r7, #14]
 800ccb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4413      	add	r3, r2
 800cccc:	3304      	adds	r3, #4
 800ccce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fc6d 	bl	800d5bc <USBD_CtlSendData>
              break;
 800cce2:	e06a      	b.n	800cdba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da11      	bge.n	800cd10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	f003 020f 	and.w	r2, r3, #15
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3324      	adds	r3, #36	@ 0x24
 800cd00:	881b      	ldrh	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d117      	bne.n	800cd36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fbda 	bl	800d4c2 <USBD_CtlError>
                  break;
 800cd0e:	e054      	b.n	800cdba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	f003 020f 	and.w	r2, r3, #15
 800cd16:	6879      	ldr	r1, [r7, #4]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	440b      	add	r3, r1
 800cd22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d104      	bne.n	800cd36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fbc7 	bl	800d4c2 <USBD_CtlError>
                  break;
 800cd34:	e041      	b.n	800cdba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da0b      	bge.n	800cd56 <USBD_StdEPReq+0x2b2>
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	3310      	adds	r3, #16
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	4413      	add	r3, r2
 800cd52:	3304      	adds	r3, #4
 800cd54:	e00b      	b.n	800cd6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd56:	7bbb      	ldrb	r3, [r7, #14]
 800cd58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <USBD_StdEPReq+0x2d8>
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
 800cd78:	2b80      	cmp	r3, #128	@ 0x80
 800cd7a:	d103      	bne.n	800cd84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	601a      	str	r2, [r3, #0]
 800cd82:	e00e      	b.n	800cda2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 f94f 	bl	800e02c <USBD_LL_IsStallEP>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2201      	movs	r2, #1
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	e002      	b.n	800cda2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2202      	movs	r2, #2
 800cda6:	4619      	mov	r1, r3
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fc07 	bl	800d5bc <USBD_CtlSendData>
              break;
 800cdae:	e004      	b.n	800cdba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fb85 	bl	800d4c2 <USBD_CtlError>
              break;
 800cdb8:	bf00      	nop
          }
          break;
 800cdba:	e004      	b.n	800cdc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fb7f 	bl	800d4c2 <USBD_CtlError>
          break;
 800cdc4:	bf00      	nop
      }
      break;
 800cdc6:	e005      	b.n	800cdd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fb79 	bl	800d4c2 <USBD_CtlError>
      break;
 800cdd0:	e000      	b.n	800cdd4 <USBD_StdEPReq+0x330>
      break;
 800cdd2:	bf00      	nop
  }

  return ret;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	885b      	ldrh	r3, [r3, #2]
 800cdfa:	0a1b      	lsrs	r3, r3, #8
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	2b0e      	cmp	r3, #14
 800ce02:	f200 8152 	bhi.w	800d0aa <USBD_GetDescriptor+0x2ca>
 800ce06:	a201      	add	r2, pc, #4	@ (adr r2, 800ce0c <USBD_GetDescriptor+0x2c>)
 800ce08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0c:	0800ce7d 	.word	0x0800ce7d
 800ce10:	0800ce95 	.word	0x0800ce95
 800ce14:	0800ced5 	.word	0x0800ced5
 800ce18:	0800d0ab 	.word	0x0800d0ab
 800ce1c:	0800d0ab 	.word	0x0800d0ab
 800ce20:	0800d04b 	.word	0x0800d04b
 800ce24:	0800d077 	.word	0x0800d077
 800ce28:	0800d0ab 	.word	0x0800d0ab
 800ce2c:	0800d0ab 	.word	0x0800d0ab
 800ce30:	0800d0ab 	.word	0x0800d0ab
 800ce34:	0800d0ab 	.word	0x0800d0ab
 800ce38:	0800d0ab 	.word	0x0800d0ab
 800ce3c:	0800d0ab 	.word	0x0800d0ab
 800ce40:	0800d0ab 	.word	0x0800d0ab
 800ce44:	0800ce49 	.word	0x0800ce49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce4e:	69db      	ldr	r3, [r3, #28]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	7c12      	ldrb	r2, [r2, #16]
 800ce60:	f107 0108 	add.w	r1, r7, #8
 800ce64:	4610      	mov	r0, r2
 800ce66:	4798      	blx	r3
 800ce68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce6a:	e126      	b.n	800d0ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fb27 	bl	800d4c2 <USBD_CtlError>
        err++;
 800ce74:	7afb      	ldrb	r3, [r7, #11]
 800ce76:	3301      	adds	r3, #1
 800ce78:	72fb      	strb	r3, [r7, #11]
      break;
 800ce7a:	e11e      	b.n	800d0ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	7c12      	ldrb	r2, [r2, #16]
 800ce88:	f107 0108 	add.w	r1, r7, #8
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4798      	blx	r3
 800ce90:	60f8      	str	r0, [r7, #12]
      break;
 800ce92:	e112      	b.n	800d0ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	7c1b      	ldrb	r3, [r3, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10d      	bne.n	800ceb8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cea4:	f107 0208 	add.w	r2, r7, #8
 800cea8:	4610      	mov	r0, r2
 800ceaa:	4798      	blx	r3
 800ceac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceb6:	e100      	b.n	800d0ba <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec0:	f107 0208 	add.w	r2, r7, #8
 800cec4:	4610      	mov	r0, r2
 800cec6:	4798      	blx	r3
 800cec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3301      	adds	r3, #1
 800cece:	2202      	movs	r2, #2
 800ced0:	701a      	strb	r2, [r3, #0]
      break;
 800ced2:	e0f2      	b.n	800d0ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	885b      	ldrh	r3, [r3, #2]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b05      	cmp	r3, #5
 800cedc:	f200 80ac 	bhi.w	800d038 <USBD_GetDescriptor+0x258>
 800cee0:	a201      	add	r2, pc, #4	@ (adr r2, 800cee8 <USBD_GetDescriptor+0x108>)
 800cee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee6:	bf00      	nop
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cf35 	.word	0x0800cf35
 800cef0:	0800cf69 	.word	0x0800cf69
 800cef4:	0800cf9d 	.word	0x0800cf9d
 800cef8:	0800cfd1 	.word	0x0800cfd1
 800cefc:	0800d005 	.word	0x0800d005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00b      	beq.n	800cf24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	7c12      	ldrb	r2, [r2, #16]
 800cf18:	f107 0108 	add.w	r1, r7, #8
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	4798      	blx	r3
 800cf20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf22:	e091      	b.n	800d048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf24:	6839      	ldr	r1, [r7, #0]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 facb 	bl	800d4c2 <USBD_CtlError>
            err++;
 800cf2c:	7afb      	ldrb	r3, [r7, #11]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	72fb      	strb	r3, [r7, #11]
          break;
 800cf32:	e089      	b.n	800d048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	7c12      	ldrb	r2, [r2, #16]
 800cf4c:	f107 0108 	add.w	r1, r7, #8
 800cf50:	4610      	mov	r0, r2
 800cf52:	4798      	blx	r3
 800cf54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf56:	e077      	b.n	800d048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fab1 	bl	800d4c2 <USBD_CtlError>
            err++;
 800cf60:	7afb      	ldrb	r3, [r7, #11]
 800cf62:	3301      	adds	r3, #1
 800cf64:	72fb      	strb	r3, [r7, #11]
          break;
 800cf66:	e06f      	b.n	800d048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00b      	beq.n	800cf8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	7c12      	ldrb	r2, [r2, #16]
 800cf80:	f107 0108 	add.w	r1, r7, #8
 800cf84:	4610      	mov	r0, r2
 800cf86:	4798      	blx	r3
 800cf88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf8a:	e05d      	b.n	800d048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 fa97 	bl	800d4c2 <USBD_CtlError>
            err++;
 800cf94:	7afb      	ldrb	r3, [r7, #11]
 800cf96:	3301      	adds	r3, #1
 800cf98:	72fb      	strb	r3, [r7, #11]
          break;
 800cf9a:	e055      	b.n	800d048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfa2:	691b      	ldr	r3, [r3, #16]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	7c12      	ldrb	r2, [r2, #16]
 800cfb4:	f107 0108 	add.w	r1, r7, #8
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4798      	blx	r3
 800cfbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfbe:	e043      	b.n	800d048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fa7d 	bl	800d4c2 <USBD_CtlError>
            err++;
 800cfc8:	7afb      	ldrb	r3, [r7, #11]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	72fb      	strb	r3, [r7, #11]
          break;
 800cfce:	e03b      	b.n	800d048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00b      	beq.n	800cff4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	7c12      	ldrb	r2, [r2, #16]
 800cfe8:	f107 0108 	add.w	r1, r7, #8
 800cfec:	4610      	mov	r0, r2
 800cfee:	4798      	blx	r3
 800cff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cff2:	e029      	b.n	800d048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fa63 	bl	800d4c2 <USBD_CtlError>
            err++;
 800cffc:	7afb      	ldrb	r3, [r7, #11]
 800cffe:	3301      	adds	r3, #1
 800d000:	72fb      	strb	r3, [r7, #11]
          break;
 800d002:	e021      	b.n	800d048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00b      	beq.n	800d028 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	7c12      	ldrb	r2, [r2, #16]
 800d01c:	f107 0108 	add.w	r1, r7, #8
 800d020:	4610      	mov	r0, r2
 800d022:	4798      	blx	r3
 800d024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d026:	e00f      	b.n	800d048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fa49 	bl	800d4c2 <USBD_CtlError>
            err++;
 800d030:	7afb      	ldrb	r3, [r7, #11]
 800d032:	3301      	adds	r3, #1
 800d034:	72fb      	strb	r3, [r7, #11]
          break;
 800d036:	e007      	b.n	800d048 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fa41 	bl	800d4c2 <USBD_CtlError>
          err++;
 800d040:	7afb      	ldrb	r3, [r7, #11]
 800d042:	3301      	adds	r3, #1
 800d044:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d046:	bf00      	nop
      }
      break;
 800d048:	e037      	b.n	800d0ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	7c1b      	ldrb	r3, [r3, #16]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d109      	bne.n	800d066 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d05a:	f107 0208 	add.w	r2, r7, #8
 800d05e:	4610      	mov	r0, r2
 800d060:	4798      	blx	r3
 800d062:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d064:	e029      	b.n	800d0ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fa2a 	bl	800d4c2 <USBD_CtlError>
        err++;
 800d06e:	7afb      	ldrb	r3, [r7, #11]
 800d070:	3301      	adds	r3, #1
 800d072:	72fb      	strb	r3, [r7, #11]
      break;
 800d074:	e021      	b.n	800d0ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7c1b      	ldrb	r3, [r3, #16]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10d      	bne.n	800d09a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d086:	f107 0208 	add.w	r2, r7, #8
 800d08a:	4610      	mov	r0, r2
 800d08c:	4798      	blx	r3
 800d08e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3301      	adds	r3, #1
 800d094:	2207      	movs	r2, #7
 800d096:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d098:	e00f      	b.n	800d0ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fa10 	bl	800d4c2 <USBD_CtlError>
        err++;
 800d0a2:	7afb      	ldrb	r3, [r7, #11]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d0a8:	e007      	b.n	800d0ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0aa:	6839      	ldr	r1, [r7, #0]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fa08 	bl	800d4c2 <USBD_CtlError>
      err++;
 800d0b2:	7afb      	ldrb	r3, [r7, #11]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d0b8:	bf00      	nop
  }

  if (err != 0U)
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d11e      	bne.n	800d0fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	88db      	ldrh	r3, [r3, #6]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d016      	beq.n	800d0f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0c8:	893b      	ldrh	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00e      	beq.n	800d0ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	88da      	ldrh	r2, [r3, #6]
 800d0d2:	893b      	ldrh	r3, [r7, #8]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	bf28      	it	cs
 800d0d8:	4613      	movcs	r3, r2
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0de:	893b      	ldrh	r3, [r7, #8]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	68f9      	ldr	r1, [r7, #12]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fa69 	bl	800d5bc <USBD_CtlSendData>
 800d0ea:	e009      	b.n	800d100 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f9e7 	bl	800d4c2 <USBD_CtlError>
 800d0f4:	e004      	b.n	800d100 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 faba 	bl	800d670 <USBD_CtlSendStatus>
 800d0fc:	e000      	b.n	800d100 <USBD_GetDescriptor+0x320>
    return;
 800d0fe:	bf00      	nop
  }
}
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop

0800d108 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	889b      	ldrh	r3, [r3, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d131      	bne.n	800d17e <USBD_SetAddress+0x76>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	88db      	ldrh	r3, [r3, #6]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d12d      	bne.n	800d17e <USBD_SetAddress+0x76>
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	885b      	ldrh	r3, [r3, #2]
 800d126:	2b7f      	cmp	r3, #127	@ 0x7f
 800d128:	d829      	bhi.n	800d17e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	885b      	ldrh	r3, [r3, #2]
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d134:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d104      	bne.n	800d14c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f9bc 	bl	800d4c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14a:	e01d      	b.n	800d188 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7bfa      	ldrb	r2, [r7, #15]
 800d150:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 ff93 	bl	800e084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fa86 	bl	800d670 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d004      	beq.n	800d174 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2202      	movs	r2, #2
 800d16e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d172:	e009      	b.n	800d188 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17c:	e004      	b.n	800d188 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d17e:	6839      	ldr	r1, [r7, #0]
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 f99e 	bl	800d4c2 <USBD_CtlError>
  }
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	885b      	ldrh	r3, [r3, #2]
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	4b4e      	ldr	r3, [pc, #312]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d1a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1a8:	4b4d      	ldr	r3, [pc, #308]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d905      	bls.n	800d1bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f985 	bl	800d4c2 <USBD_CtlError>
    return USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e08c      	b.n	800d2d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d002      	beq.n	800d1ce <USBD_SetConfig+0x3e>
 800d1c8:	2b03      	cmp	r3, #3
 800d1ca:	d029      	beq.n	800d220 <USBD_SetConfig+0x90>
 800d1cc:	e075      	b.n	800d2ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1ce:	4b44      	ldr	r3, [pc, #272]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d020      	beq.n	800d218 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d1d6:	4b42      	ldr	r3, [pc, #264]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1e0:	4b3f      	ldr	r3, [pc, #252]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7fe ffb9 	bl	800c15e <USBD_SetClassConfig>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d008      	beq.n	800d208 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f962 	bl	800d4c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2202      	movs	r2, #2
 800d202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d206:	e065      	b.n	800d2d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fa31 	bl	800d670 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2203      	movs	r2, #3
 800d212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d216:	e05d      	b.n	800d2d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fa29 	bl	800d670 <USBD_CtlSendStatus>
      break;
 800d21e:	e059      	b.n	800d2d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d220:	4b2f      	ldr	r3, [pc, #188]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d112      	bne.n	800d24e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d230:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	461a      	mov	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d23a:	4b29      	ldr	r3, [pc, #164]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7fe ffa8 	bl	800c196 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fa12 	bl	800d670 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d24c:	e042      	b.n	800d2d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d24e:	4b24      	ldr	r3, [pc, #144]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d02a      	beq.n	800d2b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7fe ff96 	bl	800c196 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d26a:	4b1d      	ldr	r3, [pc, #116]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d274:	4b1a      	ldr	r3, [pc, #104]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7fe ff6f 	bl	800c15e <USBD_SetClassConfig>
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f918 	bl	800d4c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	b2db      	uxtb	r3, r3
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7fe ff7b 	bl	800c196 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d2a8:	e014      	b.n	800d2d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f9e0 	bl	800d670 <USBD_CtlSendStatus>
      break;
 800d2b0:	e010      	b.n	800d2d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f9dc 	bl	800d670 <USBD_CtlSendStatus>
      break;
 800d2b8:	e00c      	b.n	800d2d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f900 	bl	800d4c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2c2:	4b07      	ldr	r3, [pc, #28]	@ (800d2e0 <USBD_SetConfig+0x150>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7fe ff64 	bl	800c196 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d2:	bf00      	nop
  }

  return ret;
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	20000910 	.word	0x20000910

0800d2e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	88db      	ldrh	r3, [r3, #6]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d004      	beq.n	800d300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f8e2 	bl	800d4c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2fe:	e023      	b.n	800d348 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b02      	cmp	r3, #2
 800d30a:	dc02      	bgt.n	800d312 <USBD_GetConfig+0x2e>
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	dc03      	bgt.n	800d318 <USBD_GetConfig+0x34>
 800d310:	e015      	b.n	800d33e <USBD_GetConfig+0x5a>
 800d312:	2b03      	cmp	r3, #3
 800d314:	d00b      	beq.n	800d32e <USBD_GetConfig+0x4a>
 800d316:	e012      	b.n	800d33e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3308      	adds	r3, #8
 800d322:	2201      	movs	r2, #1
 800d324:	4619      	mov	r1, r3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f948 	bl	800d5bc <USBD_CtlSendData>
        break;
 800d32c:	e00c      	b.n	800d348 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3304      	adds	r3, #4
 800d332:	2201      	movs	r2, #1
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f940 	bl	800d5bc <USBD_CtlSendData>
        break;
 800d33c:	e004      	b.n	800d348 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f8be 	bl	800d4c2 <USBD_CtlError>
        break;
 800d346:	bf00      	nop
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d360:	b2db      	uxtb	r3, r3
 800d362:	3b01      	subs	r3, #1
 800d364:	2b02      	cmp	r3, #2
 800d366:	d81e      	bhi.n	800d3a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	88db      	ldrh	r3, [r3, #6]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d004      	beq.n	800d37a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f8a5 	bl	800d4c2 <USBD_CtlError>
        break;
 800d378:	e01a      	b.n	800d3b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d386:	2b00      	cmp	r3, #0
 800d388:	d005      	beq.n	800d396 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f043 0202 	orr.w	r2, r3, #2
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	330c      	adds	r3, #12
 800d39a:	2202      	movs	r2, #2
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f90c 	bl	800d5bc <USBD_CtlSendData>
      break;
 800d3a4:	e004      	b.n	800d3b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f88a 	bl	800d4c2 <USBD_CtlError>
      break;
 800d3ae:	bf00      	nop
  }
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d107      	bne.n	800d3da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f94c 	bl	800d670 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d3d8:	e013      	b.n	800d402 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	885b      	ldrh	r3, [r3, #2]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d10b      	bne.n	800d3fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	889b      	ldrh	r3, [r3, #4]
 800d3e6:	0a1b      	lsrs	r3, r3, #8
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f93c 	bl	800d670 <USBD_CtlSendStatus>
}
 800d3f8:	e003      	b.n	800d402 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f860 	bl	800d4c2 <USBD_CtlError>
}
 800d402:	bf00      	nop
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	3b01      	subs	r3, #1
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d80b      	bhi.n	800d43a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	885b      	ldrh	r3, [r3, #2]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d10c      	bne.n	800d444 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f91c 	bl	800d670 <USBD_CtlSendStatus>
      }
      break;
 800d438:	e004      	b.n	800d444 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f840 	bl	800d4c2 <USBD_CtlError>
      break;
 800d442:	e000      	b.n	800d446 <USBD_ClrFeature+0x3c>
      break;
 800d444:	bf00      	nop
  }
}
 800d446:	bf00      	nop
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b084      	sub	sp, #16
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3301      	adds	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	781a      	ldrb	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	3301      	adds	r3, #1
 800d476:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff fa16 	bl	800c8aa <SWAPBYTE>
 800d47e:	4603      	mov	r3, r0
 800d480:	461a      	mov	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3301      	adds	r3, #1
 800d490:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff fa09 	bl	800c8aa <SWAPBYTE>
 800d498:	4603      	mov	r3, r0
 800d49a:	461a      	mov	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7ff f9fc 	bl	800c8aa <SWAPBYTE>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	80da      	strh	r2, [r3, #6]
}
 800d4ba:	bf00      	nop
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b082      	sub	sp, #8
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4cc:	2180      	movs	r1, #128	@ 0x80
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fd40 	bl	800df54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fd3c 	bl	800df54 <USBD_LL_StallEP>
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d042      	beq.n	800d580 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d4fe:	6938      	ldr	r0, [r7, #16]
 800d500:	f000 f842 	bl	800d588 <USBD_GetLen>
 800d504:	4603      	mov	r3, r0
 800d506:	3301      	adds	r3, #1
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d50e:	d808      	bhi.n	800d522 <USBD_GetString+0x3e>
 800d510:	6938      	ldr	r0, [r7, #16]
 800d512:	f000 f839 	bl	800d588 <USBD_GetLen>
 800d516:	4603      	mov	r3, r0
 800d518:	3301      	adds	r3, #1
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	b29a      	uxth	r2, r3
 800d520:	e001      	b.n	800d526 <USBD_GetString+0x42>
 800d522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	4413      	add	r3, r2
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	7812      	ldrb	r2, [r2, #0]
 800d534:	701a      	strb	r2, [r3, #0]
  idx++;
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	3301      	adds	r3, #1
 800d53a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	4413      	add	r3, r2
 800d542:	2203      	movs	r2, #3
 800d544:	701a      	strb	r2, [r3, #0]
  idx++;
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	3301      	adds	r3, #1
 800d54a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d54c:	e013      	b.n	800d576 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	68ba      	ldr	r2, [r7, #8]
 800d552:	4413      	add	r3, r2
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	7812      	ldrb	r2, [r2, #0]
 800d558:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	3301      	adds	r3, #1
 800d55e:	613b      	str	r3, [r7, #16]
    idx++;
 800d560:	7dfb      	ldrb	r3, [r7, #23]
 800d562:	3301      	adds	r3, #1
 800d564:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	4413      	add	r3, r2
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	3301      	adds	r3, #1
 800d574:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1e7      	bne.n	800d54e <USBD_GetString+0x6a>
 800d57e:	e000      	b.n	800d582 <USBD_GetString+0x9e>
    return;
 800d580:	bf00      	nop
  }
}
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d590:	2300      	movs	r3, #0
 800d592:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d598:	e005      	b.n	800d5a6 <USBD_GetLen+0x1e>
  {
    len++;
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	3301      	adds	r3, #1
 800d59e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1f5      	bne.n	800d59a <USBD_GetLen+0x12>
  }

  return len;
 800d5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3714      	adds	r7, #20
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 fd84 	bl	800e0f0 <USBD_LL_Transmit>

  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	60f8      	str	r0, [r7, #12]
 800d5fa:	60b9      	str	r1, [r7, #8]
 800d5fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	2100      	movs	r1, #0
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fd73 	bl	800e0f0 <USBD_LL_Transmit>

  return USBD_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2203      	movs	r2, #3
 800d624:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	2100      	movs	r1, #0
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 fd8e 	bl	800e160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	60f8      	str	r0, [r7, #12]
 800d656:	60b9      	str	r1, [r7, #8]
 800d658:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	2100      	movs	r1, #0
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 fd7d 	bl	800e160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2204      	movs	r2, #4
 800d67c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d680:	2300      	movs	r3, #0
 800d682:	2200      	movs	r2, #0
 800d684:	2100      	movs	r1, #0
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fd32 	bl	800e0f0 <USBD_LL_Transmit>

  return USBD_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2205      	movs	r2, #5
 800d6a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fd57 	bl	800e160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	4912      	ldr	r1, [pc, #72]	@ (800d70c <MX_USB_DEVICE_Init+0x50>)
 800d6c4:	4812      	ldr	r0, [pc, #72]	@ (800d710 <MX_USB_DEVICE_Init+0x54>)
 800d6c6:	f7fe fccd 	bl	800c064 <USBD_Init>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d6d0:	f7f3 fe4a 	bl	8001368 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d6d4:	490f      	ldr	r1, [pc, #60]	@ (800d714 <MX_USB_DEVICE_Init+0x58>)
 800d6d6:	480e      	ldr	r0, [pc, #56]	@ (800d710 <MX_USB_DEVICE_Init+0x54>)
 800d6d8:	f7fe fcf4 	bl	800c0c4 <USBD_RegisterClass>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d6e2:	f7f3 fe41 	bl	8001368 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d6e6:	490c      	ldr	r1, [pc, #48]	@ (800d718 <MX_USB_DEVICE_Init+0x5c>)
 800d6e8:	4809      	ldr	r0, [pc, #36]	@ (800d710 <MX_USB_DEVICE_Init+0x54>)
 800d6ea:	f7fe fc2b 	bl	800bf44 <USBD_CDC_RegisterInterface>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d6f4:	f7f3 fe38 	bl	8001368 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d6f8:	4805      	ldr	r0, [pc, #20]	@ (800d710 <MX_USB_DEVICE_Init+0x54>)
 800d6fa:	f7fe fd19 	bl	800c130 <USBD_Start>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d704:	f7f3 fe30 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d708:	bf00      	nop
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	200000ac 	.word	0x200000ac
 800d710:	20000914 	.word	0x20000914
 800d714:	20000018 	.word	0x20000018
 800d718:	20000098 	.word	0x20000098

0800d71c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d720:	2200      	movs	r2, #0
 800d722:	4905      	ldr	r1, [pc, #20]	@ (800d738 <CDC_Init_FS+0x1c>)
 800d724:	4805      	ldr	r0, [pc, #20]	@ (800d73c <CDC_Init_FS+0x20>)
 800d726:	f7fe fc27 	bl	800bf78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d72a:	4905      	ldr	r1, [pc, #20]	@ (800d740 <CDC_Init_FS+0x24>)
 800d72c:	4803      	ldr	r0, [pc, #12]	@ (800d73c <CDC_Init_FS+0x20>)
 800d72e:	f7fe fc45 	bl	800bfbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d734:	4618      	mov	r0, r3
 800d736:	bd80      	pop	{r7, pc}
 800d738:	200013f0 	.word	0x200013f0
 800d73c:	20000914 	.word	0x20000914
 800d740:	20000bf0 	.word	0x20000bf0

0800d744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d744:	b480      	push	{r7}
 800d746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	6039      	str	r1, [r7, #0]
 800d75e:	71fb      	strb	r3, [r7, #7]
 800d760:	4613      	mov	r3, r2
 800d762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	2b23      	cmp	r3, #35	@ 0x23
 800d768:	d84a      	bhi.n	800d800 <CDC_Control_FS+0xac>
 800d76a:	a201      	add	r2, pc, #4	@ (adr r2, 800d770 <CDC_Control_FS+0x1c>)
 800d76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d770:	0800d801 	.word	0x0800d801
 800d774:	0800d801 	.word	0x0800d801
 800d778:	0800d801 	.word	0x0800d801
 800d77c:	0800d801 	.word	0x0800d801
 800d780:	0800d801 	.word	0x0800d801
 800d784:	0800d801 	.word	0x0800d801
 800d788:	0800d801 	.word	0x0800d801
 800d78c:	0800d801 	.word	0x0800d801
 800d790:	0800d801 	.word	0x0800d801
 800d794:	0800d801 	.word	0x0800d801
 800d798:	0800d801 	.word	0x0800d801
 800d79c:	0800d801 	.word	0x0800d801
 800d7a0:	0800d801 	.word	0x0800d801
 800d7a4:	0800d801 	.word	0x0800d801
 800d7a8:	0800d801 	.word	0x0800d801
 800d7ac:	0800d801 	.word	0x0800d801
 800d7b0:	0800d801 	.word	0x0800d801
 800d7b4:	0800d801 	.word	0x0800d801
 800d7b8:	0800d801 	.word	0x0800d801
 800d7bc:	0800d801 	.word	0x0800d801
 800d7c0:	0800d801 	.word	0x0800d801
 800d7c4:	0800d801 	.word	0x0800d801
 800d7c8:	0800d801 	.word	0x0800d801
 800d7cc:	0800d801 	.word	0x0800d801
 800d7d0:	0800d801 	.word	0x0800d801
 800d7d4:	0800d801 	.word	0x0800d801
 800d7d8:	0800d801 	.word	0x0800d801
 800d7dc:	0800d801 	.word	0x0800d801
 800d7e0:	0800d801 	.word	0x0800d801
 800d7e4:	0800d801 	.word	0x0800d801
 800d7e8:	0800d801 	.word	0x0800d801
 800d7ec:	0800d801 	.word	0x0800d801
 800d7f0:	0800d801 	.word	0x0800d801
 800d7f4:	0800d801 	.word	0x0800d801
 800d7f8:	0800d801 	.word	0x0800d801
 800d7fc:	0800d801 	.word	0x0800d801
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d800:	bf00      	nop
  }

  return (USBD_OK);
 800d802:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d81a:	6879      	ldr	r1, [r7, #4]
 800d81c:	4805      	ldr	r0, [pc, #20]	@ (800d834 <CDC_Receive_FS+0x24>)
 800d81e:	f7fe fbcd 	bl	800bfbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d822:	4804      	ldr	r0, [pc, #16]	@ (800d834 <CDC_Receive_FS+0x24>)
 800d824:	f7fe fbe8 	bl	800bff8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d828:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	20000914 	.word	0x20000914

0800d838 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d838:	b480      	push	{r7}
 800d83a:	b087      	sub	sp, #28
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	4613      	mov	r3, r2
 800d844:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	371c      	adds	r7, #28
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
	...

0800d85c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	4603      	mov	r3, r0
 800d864:	6039      	str	r1, [r7, #0]
 800d866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	2212      	movs	r2, #18
 800d86c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d86e:	4b03      	ldr	r3, [pc, #12]	@ (800d87c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d870:	4618      	mov	r0, r3
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	200000cc 	.word	0x200000cc

0800d880 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	6039      	str	r1, [r7, #0]
 800d88a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2204      	movs	r2, #4
 800d890:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d892:	4b03      	ldr	r3, [pc, #12]	@ (800d8a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d894:	4618      	mov	r0, r3
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	200000ec 	.word	0x200000ec

0800d8a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	6039      	str	r1, [r7, #0]
 800d8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d105      	bne.n	800d8c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	4907      	ldr	r1, [pc, #28]	@ (800d8d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8ba:	4808      	ldr	r0, [pc, #32]	@ (800d8dc <USBD_FS_ProductStrDescriptor+0x38>)
 800d8bc:	f7ff fe12 	bl	800d4e4 <USBD_GetString>
 800d8c0:	e004      	b.n	800d8cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8c2:	683a      	ldr	r2, [r7, #0]
 800d8c4:	4904      	ldr	r1, [pc, #16]	@ (800d8d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8c6:	4805      	ldr	r0, [pc, #20]	@ (800d8dc <USBD_FS_ProductStrDescriptor+0x38>)
 800d8c8:	f7ff fe0c 	bl	800d4e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8cc:	4b02      	ldr	r3, [pc, #8]	@ (800d8d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20001bf0 	.word	0x20001bf0
 800d8dc:	0800e340 	.word	0x0800e340

0800d8e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	6039      	str	r1, [r7, #0]
 800d8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	4904      	ldr	r1, [pc, #16]	@ (800d900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d8f0:	4804      	ldr	r0, [pc, #16]	@ (800d904 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8f2:	f7ff fdf7 	bl	800d4e4 <USBD_GetString>
  return USBD_StrDesc;
 800d8f6:	4b02      	ldr	r3, [pc, #8]	@ (800d900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	20001bf0 	.word	0x20001bf0
 800d904:	0800e358 	.word	0x0800e358

0800d908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	6039      	str	r1, [r7, #0]
 800d912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	221a      	movs	r2, #26
 800d918:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d91a:	f000 f855 	bl	800d9c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d91e:	4b02      	ldr	r3, [pc, #8]	@ (800d928 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	200000f0 	.word	0x200000f0

0800d92c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d938:	79fb      	ldrb	r3, [r7, #7]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d105      	bne.n	800d94a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	4907      	ldr	r1, [pc, #28]	@ (800d960 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d942:	4808      	ldr	r0, [pc, #32]	@ (800d964 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d944:	f7ff fdce 	bl	800d4e4 <USBD_GetString>
 800d948:	e004      	b.n	800d954 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	4904      	ldr	r1, [pc, #16]	@ (800d960 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d94e:	4805      	ldr	r0, [pc, #20]	@ (800d964 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d950:	f7ff fdc8 	bl	800d4e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d954:	4b02      	ldr	r3, [pc, #8]	@ (800d960 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20001bf0 	.word	0x20001bf0
 800d964:	0800e36c 	.word	0x0800e36c

0800d968 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	6039      	str	r1, [r7, #0]
 800d972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d974:	79fb      	ldrb	r3, [r7, #7]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d105      	bne.n	800d986 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	4907      	ldr	r1, [pc, #28]	@ (800d99c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d97e:	4808      	ldr	r0, [pc, #32]	@ (800d9a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d980:	f7ff fdb0 	bl	800d4e4 <USBD_GetString>
 800d984:	e004      	b.n	800d990 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	4904      	ldr	r1, [pc, #16]	@ (800d99c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d98a:	4805      	ldr	r0, [pc, #20]	@ (800d9a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d98c:	f7ff fdaa 	bl	800d4e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d990:	4b02      	ldr	r3, [pc, #8]	@ (800d99c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	20001bf0 	.word	0x20001bf0
 800d9a0:	0800e378 	.word	0x0800e378

0800d9a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	6039      	str	r1, [r7, #0]
 800d9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	220c      	movs	r2, #12
 800d9b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d9b6:	4b03      	ldr	r3, [pc, #12]	@ (800d9c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	200000e0 	.word	0x200000e0

0800d9c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800da0c <Get_SerialNum+0x44>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d9d4:	4b0e      	ldr	r3, [pc, #56]	@ (800da10 <Get_SerialNum+0x48>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d9da:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <Get_SerialNum+0x4c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d009      	beq.n	800da02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9ee:	2208      	movs	r2, #8
 800d9f0:	4909      	ldr	r1, [pc, #36]	@ (800da18 <Get_SerialNum+0x50>)
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 f814 	bl	800da20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9f8:	2204      	movs	r2, #4
 800d9fa:	4908      	ldr	r1, [pc, #32]	@ (800da1c <Get_SerialNum+0x54>)
 800d9fc:	68b8      	ldr	r0, [r7, #8]
 800d9fe:	f000 f80f 	bl	800da20 <IntToUnicode>
  }
}
 800da02:	bf00      	nop
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	1fff7590 	.word	0x1fff7590
 800da10:	1fff7594 	.word	0x1fff7594
 800da14:	1fff7598 	.word	0x1fff7598
 800da18:	200000f2 	.word	0x200000f2
 800da1c:	20000102 	.word	0x20000102

0800da20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800da20:	b480      	push	{r7}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	4613      	mov	r3, r2
 800da2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800da32:	2300      	movs	r3, #0
 800da34:	75fb      	strb	r3, [r7, #23]
 800da36:	e027      	b.n	800da88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	0f1b      	lsrs	r3, r3, #28
 800da3c:	2b09      	cmp	r3, #9
 800da3e:	d80b      	bhi.n	800da58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	0f1b      	lsrs	r3, r3, #28
 800da44:	b2da      	uxtb	r2, r3
 800da46:	7dfb      	ldrb	r3, [r7, #23]
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	4619      	mov	r1, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	440b      	add	r3, r1
 800da50:	3230      	adds	r2, #48	@ 0x30
 800da52:	b2d2      	uxtb	r2, r2
 800da54:	701a      	strb	r2, [r3, #0]
 800da56:	e00a      	b.n	800da6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	0f1b      	lsrs	r3, r3, #28
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	7dfb      	ldrb	r3, [r7, #23]
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	4619      	mov	r1, r3
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	440b      	add	r3, r1
 800da68:	3237      	adds	r2, #55	@ 0x37
 800da6a:	b2d2      	uxtb	r2, r2
 800da6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	011b      	lsls	r3, r3, #4
 800da72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da74:	7dfb      	ldrb	r3, [r7, #23]
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	3301      	adds	r3, #1
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	4413      	add	r3, r2
 800da7e:	2200      	movs	r2, #0
 800da80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	3301      	adds	r3, #1
 800da86:	75fb      	strb	r3, [r7, #23]
 800da88:	7dfa      	ldrb	r2, [r7, #23]
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d3d3      	bcc.n	800da38 <IntToUnicode+0x18>
  }
}
 800da90:	bf00      	nop
 800da92:	bf00      	nop
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
	...

0800daa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b08a      	sub	sp, #40	@ 0x28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daa8:	f107 0314 	add.w	r3, r7, #20
 800daac:	2200      	movs	r2, #0
 800daae:	601a      	str	r2, [r3, #0]
 800dab0:	605a      	str	r2, [r3, #4]
 800dab2:	609a      	str	r2, [r3, #8]
 800dab4:	60da      	str	r2, [r3, #12]
 800dab6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dac0:	d14e      	bne.n	800db60 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dac2:	4b29      	ldr	r3, [pc, #164]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800dac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dac6:	4a28      	ldr	r2, [pc, #160]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800dac8:	f043 0301 	orr.w	r3, r3, #1
 800dacc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dace:	4b26      	ldr	r3, [pc, #152]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800dad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800dada:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800dade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dae0:	2302      	movs	r3, #2
 800dae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dae4:	2300      	movs	r3, #0
 800dae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dae8:	2303      	movs	r3, #3
 800daea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800daec:	230a      	movs	r3, #10
 800daee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daf0:	f107 0314 	add.w	r3, r7, #20
 800daf4:	4619      	mov	r1, r3
 800daf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dafa:	f7f5 fe4d 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dafe:	4b1a      	ldr	r3, [pc, #104]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db02:	4a19      	ldr	r2, [pc, #100]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800db0a:	4b17      	ldr	r3, [pc, #92]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db16:	4b14      	ldr	r3, [pc, #80]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d114      	bne.n	800db4c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db22:	4b11      	ldr	r3, [pc, #68]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db26:	4a10      	ldr	r2, [pc, #64]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800db2e:	4b0e      	ldr	r3, [pc, #56]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db36:	60bb      	str	r3, [r7, #8]
 800db38:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800db3a:	f7f7 fb2d 	bl	8005198 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800db3e:	4b0a      	ldr	r3, [pc, #40]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db42:	4a09      	ldr	r2, [pc, #36]	@ (800db68 <HAL_PCD_MspInit+0xc8>)
 800db44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800db48:	6593      	str	r3, [r2, #88]	@ 0x58
 800db4a:	e001      	b.n	800db50 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800db4c:	f7f7 fb24 	bl	8005198 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db50:	2200      	movs	r2, #0
 800db52:	2100      	movs	r1, #0
 800db54:	2043      	movs	r0, #67	@ 0x43
 800db56:	f7f5 fc56 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db5a:	2043      	movs	r0, #67	@ 0x43
 800db5c:	f7f5 fc6f 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db60:	bf00      	nop
 800db62:	3728      	adds	r7, #40	@ 0x28
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	40021000 	.word	0x40021000

0800db6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f7fe fb21 	bl	800c1ca <USBD_LL_SetupStage>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dba2:	78fa      	ldrb	r2, [r7, #3]
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	4613      	mov	r3, r2
 800dba8:	00db      	lsls	r3, r3, #3
 800dbaa:	4413      	add	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	440b      	add	r3, r1
 800dbb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	78fb      	ldrb	r3, [r7, #3]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	f7fe fb5b 	bl	800c274 <USBD_LL_DataOutStage>
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b082      	sub	sp, #8
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	460b      	mov	r3, r1
 800dbd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dbd8:	78fa      	ldrb	r2, [r7, #3]
 800dbda:	6879      	ldr	r1, [r7, #4]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	4413      	add	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	440b      	add	r3, r1
 800dbe6:	3320      	adds	r3, #32
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	78fb      	ldrb	r3, [r7, #3]
 800dbec:	4619      	mov	r1, r3
 800dbee:	f7fe fbf4 	bl	800c3da <USBD_LL_DataInStage>
}
 800dbf2:	bf00      	nop
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b082      	sub	sp, #8
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fd2e 	bl	800c66a <USBD_LL_SOF>
}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b084      	sub	sp, #16
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	79db      	ldrb	r3, [r3, #7]
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d001      	beq.n	800dc2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dc2a:	f7f3 fb9d 	bl	8001368 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc34:	7bfa      	ldrb	r2, [r7, #15]
 800dc36:	4611      	mov	r1, r2
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fe fcd2 	bl	800c5e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7fe fc7a 	bl	800c53e <USBD_LL_Reset>
}
 800dc4a:	bf00      	nop
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	6812      	ldr	r2, [r2, #0]
 800dc6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc6e:	f043 0301 	orr.w	r3, r3, #1
 800dc72:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fcc1 	bl	800c602 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	7adb      	ldrb	r3, [r3, #11]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d005      	beq.n	800dc94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc88:	4b04      	ldr	r3, [pc, #16]	@ (800dc9c <HAL_PCD_SuspendCallback+0x48>)
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	4a03      	ldr	r2, [pc, #12]	@ (800dc9c <HAL_PCD_SuspendCallback+0x48>)
 800dc8e:	f043 0306 	orr.w	r3, r3, #6
 800dc92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc94:	bf00      	nop
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	e000ed00 	.word	0xe000ed00

0800dca0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	6812      	ldr	r2, [r2, #0]
 800dcb6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dcba:	f023 0301 	bic.w	r3, r3, #1
 800dcbe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7adb      	ldrb	r3, [r3, #11]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d007      	beq.n	800dcd8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcc8:	4b08      	ldr	r3, [pc, #32]	@ (800dcec <HAL_PCD_ResumeCallback+0x4c>)
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	4a07      	ldr	r2, [pc, #28]	@ (800dcec <HAL_PCD_ResumeCallback+0x4c>)
 800dcce:	f023 0306 	bic.w	r3, r3, #6
 800dcd2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dcd4:	f000 faf6 	bl	800e2c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe fcab 	bl	800c63a <USBD_LL_Resume>
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	e000ed00 	.word	0xe000ed00

0800dcf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd02:	78fa      	ldrb	r2, [r7, #3]
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe fd01 	bl	800c70e <USBD_LL_IsoOUTIncomplete>
}
 800dd0c:	bf00      	nop
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd26:	78fa      	ldrb	r2, [r7, #3]
 800dd28:	4611      	mov	r1, r2
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe fcbd 	bl	800c6aa <USBD_LL_IsoINIncomplete>
}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fd13 	bl	800c772 <USBD_LL_DevConnected>
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fe fd10 	bl	800c788 <USBD_LL_DevDisconnected>
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d13c      	bne.n	800ddfa <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dd80:	4a20      	ldr	r2, [pc, #128]	@ (800de04 <USBD_LL_Init+0x94>)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a1e      	ldr	r2, [pc, #120]	@ (800de04 <USBD_LL_Init+0x94>)
 800dd8c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd90:	4b1c      	ldr	r3, [pc, #112]	@ (800de04 <USBD_LL_Init+0x94>)
 800dd92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dd96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dd98:	4b1a      	ldr	r3, [pc, #104]	@ (800de04 <USBD_LL_Init+0x94>)
 800dd9a:	2206      	movs	r2, #6
 800dd9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd9e:	4b19      	ldr	r3, [pc, #100]	@ (800de04 <USBD_LL_Init+0x94>)
 800dda0:	2202      	movs	r2, #2
 800dda2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dda4:	4b17      	ldr	r3, [pc, #92]	@ (800de04 <USBD_LL_Init+0x94>)
 800dda6:	2202      	movs	r2, #2
 800dda8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ddaa:	4b16      	ldr	r3, [pc, #88]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ddb0:	4b14      	ldr	r3, [pc, #80]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ddb6:	4b13      	ldr	r3, [pc, #76]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ddbc:	4b11      	ldr	r3, [pc, #68]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ddc2:	4b10      	ldr	r3, [pc, #64]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ddc8:	4b0e      	ldr	r3, [pc, #56]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ddce:	480d      	ldr	r0, [pc, #52]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddd0:	f7f5 ffd8 	bl	8003d84 <HAL_PCD_Init>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ddda:	f7f3 fac5 	bl	8001368 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ddde:	2180      	movs	r1, #128	@ 0x80
 800dde0:	4808      	ldr	r0, [pc, #32]	@ (800de04 <USBD_LL_Init+0x94>)
 800dde2:	f7f7 f930 	bl	8005046 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dde6:	2240      	movs	r2, #64	@ 0x40
 800dde8:	2100      	movs	r1, #0
 800ddea:	4806      	ldr	r0, [pc, #24]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddec:	f7f7 f8e4 	bl	8004fb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ddf0:	2280      	movs	r2, #128	@ 0x80
 800ddf2:	2101      	movs	r1, #1
 800ddf4:	4803      	ldr	r0, [pc, #12]	@ (800de04 <USBD_LL_Init+0x94>)
 800ddf6:	f7f7 f8df 	bl	8004fb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	20001df0 	.word	0x20001df0

0800de08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de1e:	4618      	mov	r0, r3
 800de20:	f7f6 f8bf 	bl	8003fa2 <HAL_PCD_Start>
 800de24:	4603      	mov	r3, r0
 800de26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d816      	bhi.n	800de5c <USBD_LL_Start+0x54>
 800de2e:	a201      	add	r2, pc, #4	@ (adr r2, 800de34 <USBD_LL_Start+0x2c>)
 800de30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de34:	0800de45 	.word	0x0800de45
 800de38:	0800de4b 	.word	0x0800de4b
 800de3c:	0800de51 	.word	0x0800de51
 800de40:	0800de57 	.word	0x0800de57
    case HAL_OK :
      usb_status = USBD_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	73fb      	strb	r3, [r7, #15]
    break;
 800de48:	e00b      	b.n	800de62 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de4a:	2303      	movs	r3, #3
 800de4c:	73fb      	strb	r3, [r7, #15]
    break;
 800de4e:	e008      	b.n	800de62 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de50:	2301      	movs	r3, #1
 800de52:	73fb      	strb	r3, [r7, #15]
    break;
 800de54:	e005      	b.n	800de62 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de56:	2303      	movs	r3, #3
 800de58:	73fb      	strb	r3, [r7, #15]
    break;
 800de5a:	e002      	b.n	800de62 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800de5c:	2303      	movs	r3, #3
 800de5e:	73fb      	strb	r3, [r7, #15]
    break;
 800de60:	bf00      	nop
  }
  return usb_status;
 800de62:	7bfb      	ldrb	r3, [r7, #15]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	4608      	mov	r0, r1
 800de76:	4611      	mov	r1, r2
 800de78:	461a      	mov	r2, r3
 800de7a:	4603      	mov	r3, r0
 800de7c:	70fb      	strb	r3, [r7, #3]
 800de7e:	460b      	mov	r3, r1
 800de80:	70bb      	strb	r3, [r7, #2]
 800de82:	4613      	mov	r3, r2
 800de84:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de94:	78bb      	ldrb	r3, [r7, #2]
 800de96:	883a      	ldrh	r2, [r7, #0]
 800de98:	78f9      	ldrb	r1, [r7, #3]
 800de9a:	f7f6 fd6b 	bl	8004974 <HAL_PCD_EP_Open>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
 800dea4:	2b03      	cmp	r3, #3
 800dea6:	d817      	bhi.n	800ded8 <USBD_LL_OpenEP+0x6c>
 800dea8:	a201      	add	r2, pc, #4	@ (adr r2, 800deb0 <USBD_LL_OpenEP+0x44>)
 800deaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deae:	bf00      	nop
 800deb0:	0800dec1 	.word	0x0800dec1
 800deb4:	0800dec7 	.word	0x0800dec7
 800deb8:	0800decd 	.word	0x0800decd
 800debc:	0800ded3 	.word	0x0800ded3
    case HAL_OK :
      usb_status = USBD_OK;
 800dec0:	2300      	movs	r3, #0
 800dec2:	73fb      	strb	r3, [r7, #15]
    break;
 800dec4:	e00b      	b.n	800dede <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dec6:	2303      	movs	r3, #3
 800dec8:	73fb      	strb	r3, [r7, #15]
    break;
 800deca:	e008      	b.n	800dede <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800decc:	2301      	movs	r3, #1
 800dece:	73fb      	strb	r3, [r7, #15]
    break;
 800ded0:	e005      	b.n	800dede <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ded2:	2303      	movs	r3, #3
 800ded4:	73fb      	strb	r3, [r7, #15]
    break;
 800ded6:	e002      	b.n	800dede <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ded8:	2303      	movs	r3, #3
 800deda:	73fb      	strb	r3, [r7, #15]
    break;
 800dedc:	bf00      	nop
  }
  return usb_status;
 800dede:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df02:	78fa      	ldrb	r2, [r7, #3]
 800df04:	4611      	mov	r1, r2
 800df06:	4618      	mov	r0, r3
 800df08:	f7f6 fd9e 	bl	8004a48 <HAL_PCD_EP_Close>
 800df0c:	4603      	mov	r3, r0
 800df0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df10:	7bbb      	ldrb	r3, [r7, #14]
 800df12:	2b03      	cmp	r3, #3
 800df14:	d816      	bhi.n	800df44 <USBD_LL_CloseEP+0x5c>
 800df16:	a201      	add	r2, pc, #4	@ (adr r2, 800df1c <USBD_LL_CloseEP+0x34>)
 800df18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1c:	0800df2d 	.word	0x0800df2d
 800df20:	0800df33 	.word	0x0800df33
 800df24:	0800df39 	.word	0x0800df39
 800df28:	0800df3f 	.word	0x0800df3f
    case HAL_OK :
      usb_status = USBD_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73fb      	strb	r3, [r7, #15]
    break;
 800df30:	e00b      	b.n	800df4a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df32:	2303      	movs	r3, #3
 800df34:	73fb      	strb	r3, [r7, #15]
    break;
 800df36:	e008      	b.n	800df4a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df38:	2301      	movs	r3, #1
 800df3a:	73fb      	strb	r3, [r7, #15]
    break;
 800df3c:	e005      	b.n	800df4a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df3e:	2303      	movs	r3, #3
 800df40:	73fb      	strb	r3, [r7, #15]
    break;
 800df42:	e002      	b.n	800df4a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800df44:	2303      	movs	r3, #3
 800df46:	73fb      	strb	r3, [r7, #15]
    break;
 800df48:	bf00      	nop
  }
  return usb_status;
 800df4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	460b      	mov	r3, r1
 800df5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df6e:	78fa      	ldrb	r2, [r7, #3]
 800df70:	4611      	mov	r1, r2
 800df72:	4618      	mov	r0, r3
 800df74:	f7f6 fe2d 	bl	8004bd2 <HAL_PCD_EP_SetStall>
 800df78:	4603      	mov	r3, r0
 800df7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df7c:	7bbb      	ldrb	r3, [r7, #14]
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d816      	bhi.n	800dfb0 <USBD_LL_StallEP+0x5c>
 800df82:	a201      	add	r2, pc, #4	@ (adr r2, 800df88 <USBD_LL_StallEP+0x34>)
 800df84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df88:	0800df99 	.word	0x0800df99
 800df8c:	0800df9f 	.word	0x0800df9f
 800df90:	0800dfa5 	.word	0x0800dfa5
 800df94:	0800dfab 	.word	0x0800dfab
    case HAL_OK :
      usb_status = USBD_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]
    break;
 800df9c:	e00b      	b.n	800dfb6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa2:	e008      	b.n	800dfb6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa8:	e005      	b.n	800dfb6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	73fb      	strb	r3, [r7, #15]
    break;
 800dfae:	e002      	b.n	800dfb6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb4:	bf00      	nop
  }
  return usb_status;
 800dfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfda:	78fa      	ldrb	r2, [r7, #3]
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f6 fe59 	bl	8004c96 <HAL_PCD_EP_ClrStall>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dfe8:	7bbb      	ldrb	r3, [r7, #14]
 800dfea:	2b03      	cmp	r3, #3
 800dfec:	d816      	bhi.n	800e01c <USBD_LL_ClearStallEP+0x5c>
 800dfee:	a201      	add	r2, pc, #4	@ (adr r2, 800dff4 <USBD_LL_ClearStallEP+0x34>)
 800dff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff4:	0800e005 	.word	0x0800e005
 800dff8:	0800e00b 	.word	0x0800e00b
 800dffc:	0800e011 	.word	0x0800e011
 800e000:	0800e017 	.word	0x0800e017
    case HAL_OK :
      usb_status = USBD_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
    break;
 800e008:	e00b      	b.n	800e022 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e00a:	2303      	movs	r3, #3
 800e00c:	73fb      	strb	r3, [r7, #15]
    break;
 800e00e:	e008      	b.n	800e022 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e010:	2301      	movs	r3, #1
 800e012:	73fb      	strb	r3, [r7, #15]
    break;
 800e014:	e005      	b.n	800e022 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e016:	2303      	movs	r3, #3
 800e018:	73fb      	strb	r3, [r7, #15]
    break;
 800e01a:	e002      	b.n	800e022 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e01c:	2303      	movs	r3, #3
 800e01e:	73fb      	strb	r3, [r7, #15]
    break;
 800e020:	bf00      	nop
  }
  return usb_status;
 800e022:	7bfb      	ldrb	r3, [r7, #15]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e03e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e044:	2b00      	cmp	r3, #0
 800e046:	da0b      	bge.n	800e060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	4613      	mov	r3, r2
 800e052:	00db      	lsls	r3, r3, #3
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	440b      	add	r3, r1
 800e05a:	3316      	adds	r3, #22
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	e00b      	b.n	800e078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e066:	68f9      	ldr	r1, [r7, #12]
 800e068:	4613      	mov	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e076:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3714      	adds	r7, #20
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e09e:	78fa      	ldrb	r2, [r7, #3]
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f6 fc42 	bl	800492c <HAL_PCD_SetAddress>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e0ac:	7bbb      	ldrb	r3, [r7, #14]
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d816      	bhi.n	800e0e0 <USBD_LL_SetUSBAddress+0x5c>
 800e0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b8 <USBD_LL_SetUSBAddress+0x34>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0c9 	.word	0x0800e0c9
 800e0bc:	0800e0cf 	.word	0x0800e0cf
 800e0c0:	0800e0d5 	.word	0x0800e0d5
 800e0c4:	0800e0db 	.word	0x0800e0db
    case HAL_OK :
      usb_status = USBD_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e0cc:	e00b      	b.n	800e0e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d2:	e008      	b.n	800e0e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d8:	e005      	b.n	800e0e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0da:	2303      	movs	r3, #3
 800e0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e0de:	e002      	b.n	800e0e6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e4:	bf00      	nop
  }
  return usb_status;
 800e0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	607a      	str	r2, [r7, #4]
 800e0fa:	603b      	str	r3, [r7, #0]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e100:	2300      	movs	r3, #0
 800e102:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e104:	2300      	movs	r3, #0
 800e106:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e10e:	7af9      	ldrb	r1, [r7, #11]
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	f7f6 fd2c 	bl	8004b70 <HAL_PCD_EP_Transmit>
 800e118:	4603      	mov	r3, r0
 800e11a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e11c:	7dbb      	ldrb	r3, [r7, #22]
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d816      	bhi.n	800e150 <USBD_LL_Transmit+0x60>
 800e122:	a201      	add	r2, pc, #4	@ (adr r2, 800e128 <USBD_LL_Transmit+0x38>)
 800e124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e128:	0800e139 	.word	0x0800e139
 800e12c:	0800e13f 	.word	0x0800e13f
 800e130:	0800e145 	.word	0x0800e145
 800e134:	0800e14b 	.word	0x0800e14b
    case HAL_OK :
      usb_status = USBD_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	75fb      	strb	r3, [r7, #23]
    break;
 800e13c:	e00b      	b.n	800e156 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e13e:	2303      	movs	r3, #3
 800e140:	75fb      	strb	r3, [r7, #23]
    break;
 800e142:	e008      	b.n	800e156 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e144:	2301      	movs	r3, #1
 800e146:	75fb      	strb	r3, [r7, #23]
    break;
 800e148:	e005      	b.n	800e156 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e14a:	2303      	movs	r3, #3
 800e14c:	75fb      	strb	r3, [r7, #23]
    break;
 800e14e:	e002      	b.n	800e156 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e150:	2303      	movs	r3, #3
 800e152:	75fb      	strb	r3, [r7, #23]
    break;
 800e154:	bf00      	nop
  }
  return usb_status;
 800e156:	7dfb      	ldrb	r3, [r7, #23]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3718      	adds	r7, #24
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	607a      	str	r2, [r7, #4]
 800e16a:	603b      	str	r3, [r7, #0]
 800e16c:	460b      	mov	r3, r1
 800e16e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e17e:	7af9      	ldrb	r1, [r7, #11]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	f7f6 fcaa 	bl	8004adc <HAL_PCD_EP_Receive>
 800e188:	4603      	mov	r3, r0
 800e18a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e18c:	7dbb      	ldrb	r3, [r7, #22]
 800e18e:	2b03      	cmp	r3, #3
 800e190:	d816      	bhi.n	800e1c0 <USBD_LL_PrepareReceive+0x60>
 800e192:	a201      	add	r2, pc, #4	@ (adr r2, 800e198 <USBD_LL_PrepareReceive+0x38>)
 800e194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e198:	0800e1a9 	.word	0x0800e1a9
 800e19c:	0800e1af 	.word	0x0800e1af
 800e1a0:	0800e1b5 	.word	0x0800e1b5
 800e1a4:	0800e1bb 	.word	0x0800e1bb
    case HAL_OK :
      usb_status = USBD_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	75fb      	strb	r3, [r7, #23]
    break;
 800e1ac:	e00b      	b.n	800e1c6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	75fb      	strb	r3, [r7, #23]
    break;
 800e1b2:	e008      	b.n	800e1c6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	75fb      	strb	r3, [r7, #23]
    break;
 800e1b8:	e005      	b.n	800e1c6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	75fb      	strb	r3, [r7, #23]
    break;
 800e1be:	e002      	b.n	800e1c6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	75fb      	strb	r3, [r7, #23]
    break;
 800e1c4:	bf00      	nop
  }
  return usb_status;
 800e1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1e2:	78fa      	ldrb	r2, [r7, #3]
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7f6 fcaa 	bl	8004b40 <HAL_PCD_EP_GetRxCount>
 800e1ec:	4603      	mov	r3, r0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
	...

0800e1f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	460b      	mov	r3, r1
 800e202:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <HAL_PCDEx_LPM_Callback+0x18>
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d01f      	beq.n	800e24e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e20e:	e03b      	b.n	800e288 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	7adb      	ldrb	r3, [r3, #11]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d007      	beq.n	800e228 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e218:	f000 f854 	bl	800e2c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e21c:	4b1c      	ldr	r3, [pc, #112]	@ (800e290 <HAL_PCDEx_LPM_Callback+0x98>)
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	4a1b      	ldr	r2, [pc, #108]	@ (800e290 <HAL_PCDEx_LPM_Callback+0x98>)
 800e222:	f023 0306 	bic.w	r3, r3, #6
 800e226:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	6812      	ldr	r2, [r2, #0]
 800e236:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e23a:	f023 0301 	bic.w	r3, r3, #1
 800e23e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe f9f7 	bl	800c63a <USBD_LL_Resume>
    break;
 800e24c:	e01c      	b.n	800e288 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	6812      	ldr	r2, [r2, #0]
 800e25c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e260:	f043 0301 	orr.w	r3, r3, #1
 800e264:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fe f9c8 	bl	800c602 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	7adb      	ldrb	r3, [r3, #11]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d005      	beq.n	800e286 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e27a:	4b05      	ldr	r3, [pc, #20]	@ (800e290 <HAL_PCDEx_LPM_Callback+0x98>)
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	4a04      	ldr	r2, [pc, #16]	@ (800e290 <HAL_PCDEx_LPM_Callback+0x98>)
 800e280:	f043 0306 	orr.w	r3, r3, #6
 800e284:	6113      	str	r3, [r2, #16]
    break;
 800e286:	bf00      	nop
}
 800e288:	bf00      	nop
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	e000ed00 	.word	0xe000ed00

0800e294 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e29c:	4b03      	ldr	r3, [pc, #12]	@ (800e2ac <USBD_static_malloc+0x18>)
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	200022d4 	.word	0x200022d4

0800e2b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]

}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e2c8:	f7f2 f960 	bl	800058c <SystemClock_Config>
}
 800e2cc:	bf00      	nop
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <memset>:
 800e2d0:	4402      	add	r2, r0
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d100      	bne.n	800e2da <memset+0xa>
 800e2d8:	4770      	bx	lr
 800e2da:	f803 1b01 	strb.w	r1, [r3], #1
 800e2de:	e7f9      	b.n	800e2d4 <memset+0x4>

0800e2e0 <__libc_init_array>:
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	4d0d      	ldr	r5, [pc, #52]	@ (800e318 <__libc_init_array+0x38>)
 800e2e4:	4c0d      	ldr	r4, [pc, #52]	@ (800e31c <__libc_init_array+0x3c>)
 800e2e6:	1b64      	subs	r4, r4, r5
 800e2e8:	10a4      	asrs	r4, r4, #2
 800e2ea:	2600      	movs	r6, #0
 800e2ec:	42a6      	cmp	r6, r4
 800e2ee:	d109      	bne.n	800e304 <__libc_init_array+0x24>
 800e2f0:	4d0b      	ldr	r5, [pc, #44]	@ (800e320 <__libc_init_array+0x40>)
 800e2f2:	4c0c      	ldr	r4, [pc, #48]	@ (800e324 <__libc_init_array+0x44>)
 800e2f4:	f000 f818 	bl	800e328 <_init>
 800e2f8:	1b64      	subs	r4, r4, r5
 800e2fa:	10a4      	asrs	r4, r4, #2
 800e2fc:	2600      	movs	r6, #0
 800e2fe:	42a6      	cmp	r6, r4
 800e300:	d105      	bne.n	800e30e <__libc_init_array+0x2e>
 800e302:	bd70      	pop	{r4, r5, r6, pc}
 800e304:	f855 3b04 	ldr.w	r3, [r5], #4
 800e308:	4798      	blx	r3
 800e30a:	3601      	adds	r6, #1
 800e30c:	e7ee      	b.n	800e2ec <__libc_init_array+0xc>
 800e30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e312:	4798      	blx	r3
 800e314:	3601      	adds	r6, #1
 800e316:	e7f2      	b.n	800e2fe <__libc_init_array+0x1e>
 800e318:	0800e3d8 	.word	0x0800e3d8
 800e31c:	0800e3d8 	.word	0x0800e3d8
 800e320:	0800e3d8 	.word	0x0800e3d8
 800e324:	0800e3dc 	.word	0x0800e3dc

0800e328 <_init>:
 800e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32a:	bf00      	nop
 800e32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e32e:	bc08      	pop	{r3}
 800e330:	469e      	mov	lr, r3
 800e332:	4770      	bx	lr

0800e334 <_fini>:
 800e334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e336:	bf00      	nop
 800e338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e33a:	bc08      	pop	{r3}
 800e33c:	469e      	mov	lr, r3
 800e33e:	4770      	bx	lr
