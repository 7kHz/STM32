
LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed8c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800ef3c  0800ef3c  0000ff3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f028  0800f028  00011168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f028  0800f028  00010028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f030  0800f030  00011168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f030  0800f030  00010030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f034  0800f034  00010034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800f038  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002514  20000168  0800f1a0  00011168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000267c  0800f1a0  0001167c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a2ca  00000000  00000000  00011198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056c2  00000000  00000000  0003b462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002598  00000000  00000000  00040b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d0f  00000000  00000000  000430c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003318b  00000000  00000000  00044dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dc67  00000000  00000000  00077f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126585  00000000  00000000  000a5bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cc146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a934  00000000  00000000  001cc18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001d6ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ef24 	.word	0x0800ef24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800ef24 	.word	0x0800ef24

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Send printf to uart1

int _write(int fd, char* ptr, int len) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d002      	beq.n	80005d4 <_write+0x18>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d111      	bne.n	80005f8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4809      	ldr	r0, [pc, #36]	@ (8000604 <_write+0x48>)
 80005e0:	f008 f9db 	bl	800899a <HAL_UART_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <_write+0x36>
      return len;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	e004      	b.n	80005fc <_write+0x40>
    else
      return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e001      	b.n	80005fc <_write+0x40>
  }
  return -1;
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000548 	.word	0x20000548

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 fe42 	bl	8002296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f845 	bl	80006a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000616:	f000 f8a5 	bl	8000764 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 fdf3 	bl	8001204 <MX_GPIO_Init>
  MX_ADC1_Init();
 800061e:	f000 f8d7 	bl	80007d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000622:	f000 f94b 	bl	80008bc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000626:	f000 f9ad 	bl	8000984 <MX_ADC3_Init>
  MX_DCMI_Init();
 800062a:	f000 fa0f 	bl	8000a4c <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800062e:	f000 fa41 	bl	8000ab4 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8000632:	f000 fd39 	bl	80010a8 <MX_FMC_Init>
  MX_I2C1_Init();
 8000636:	f000 faa9 	bl	8000b8c <MX_I2C1_Init>
  MX_I2C2_Init();
 800063a:	f000 fae7 	bl	8000c0c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800063e:	f000 fb25 	bl	8000c8c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000642:	f000 fb51 	bl	8000ce8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000646:	f000 fb7f 	bl	8000d48 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800064a:	f000 fbad 	bl	8000da8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800064e:	f000 fbd7 	bl	8000e00 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000652:	f000 fc7d 	bl	8000f50 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000656:	f000 fcab 	bl	8000fb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800065a:	f000 fce7 	bl	800102c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800065e:	f00c fecb 	bl	800d3f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
printf("First application\r\n");
 8000662:	480c      	ldr	r0, [pc, #48]	@ (8000694 <main+0x8c>)
 8000664:	f00d fdfc 	bl	800e260 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

uint32_t now = 0, last_print = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  now = HAL_GetTick();
 8000670:	f001 fe7a 	bl	8002368 <HAL_GetTick>
 8000674:	6038      	str	r0, [r7, #0]

	  if (now - last_print >= 1000)
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000680:	d3f6      	bcc.n	8000670 <main+0x68>
	  {
		  printf("Loop %lu %s\r\n", now, "ms");
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <main+0x90>)
 8000684:	6839      	ldr	r1, [r7, #0]
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <main+0x94>)
 8000688:	f00d fd82 	bl	800e190 <iprintf>
		  last_print = now;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 8000690:	e7ee      	b.n	8000670 <main+0x68>
 8000692:	bf00      	nop
 8000694:	0800ef3c 	.word	0x0800ef3c
 8000698:	0800ef50 	.word	0x0800ef50
 800069c:	0800ef54 	.word	0x0800ef54

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b096      	sub	sp, #88	@ 0x58
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2244      	movs	r2, #68	@ 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00d feb6 	bl	800e420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006c6:	f004 fd89 	bl	80051dc <HAL_PWREx_ControlVoltageScaling>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d0:	f000 fe86 	bl	80013e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d4:	f004 fd64 	bl	80051a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d8:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <SystemClock_Config+0xc0>)
 80006da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006de:	4a20      	ldr	r2, [pc, #128]	@ (8000760 <SystemClock_Config+0xc0>)
 80006e0:	f023 0318 	bic.w	r3, r3, #24
 80006e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006e8:	2314      	movs	r3, #20
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80006f8:	2390      	movs	r3, #144	@ 0x90
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000700:	2301      	movs	r3, #1
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000704:	2305      	movs	r3, #5
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000708:	2347      	movs	r3, #71	@ 0x47
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000714:	2306      	movs	r3, #6
 8000716:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fe95 	bl	800544c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000728:	f000 fe5a 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000734:	2390      	movs	r3, #144	@ 0x90
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fa9b 	bl	8005c80 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000750:	f000 fe46 	bl	80013e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000754:	f006 fd6c 	bl	8007230 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000758:	bf00      	nop
 800075a:	3758      	adds	r7, #88	@ 0x58
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0a4      	sub	sp, #144	@ 0x90
 8000768:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	228c      	movs	r2, #140	@ 0x8c
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00d fe55 	bl	800e420 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <PeriphCommonClock_Config+0x64>)
 8000778:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800077e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000786:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800078a:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800078c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000790:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000792:	2301      	movs	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000796:	2305      	movs	r3, #5
 8000798:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800079a:	2314      	movs	r3, #20
 800079c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <PeriphCommonClock_Config+0x68>)
 80007ac:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 fc89 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fe10 	bl	80013e0 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3790      	adds	r7, #144	@ 0x90
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	00086800 	.word	0x00086800
 80007cc:	01110000 	.word	0x01110000

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 80007f4:	4a2f      	ldr	r2, [pc, #188]	@ (80008b4 <MX_ADC1_Init+0xe4>)
 80007f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000812:	2204      	movs	r2, #4
 8000814:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800081e:	2200      	movs	r2, #0
 8000820:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000824:	2201      	movs	r2, #1
 8000826:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000828:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000830:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000852:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 8000854:	f001 ff58 	bl	8002708 <HAL_ADC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800085e:	f000 fdbf 	bl	80013e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800086e:	f002 fcd1 	bl	8003214 <HAL_ADCEx_MultiModeConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000878:	f000 fdb2 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_ADC1_Init+0xe8>)
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2306      	movs	r3, #6
 8000882:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000888:	237f      	movs	r3, #127	@ 0x7f
 800088a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088c:	2304      	movs	r3, #4
 800088e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_ADC1_Init+0xe0>)
 800089a:	f002 f889 	bl	80029b0 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80008a4:	f000 fd9c 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000184 	.word	0x20000184
 80008b4:	50040000 	.word	0x50040000
 80008b8:	10c00010 	.word	0x10c00010

080008bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008d2:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008d4:	4a29      	ldr	r2, [pc, #164]	@ (800097c <MX_ADC2_Init+0xc0>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_ADC2_Init+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_ADC2_Init+0xbc>)
 8000904:	2201      	movs	r2, #1
 8000906:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_ADC2_Init+0xbc>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_ADC2_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_ADC2_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_ADC2_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_ADC2_Init+0xbc>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_ADC2_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000932:	4811      	ldr	r0, [pc, #68]	@ (8000978 <MX_ADC2_Init+0xbc>)
 8000934:	f001 fee8 	bl	8002708 <HAL_ADC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800093e:	f000 fd4f 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_ADC2_Init+0xc4>)
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000946:	2306      	movs	r3, #6
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094e:	237f      	movs	r3, #127	@ 0x7f
 8000950:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000952:	2304      	movs	r3, #4
 8000954:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <MX_ADC2_Init+0xbc>)
 8000960:	f002 f826 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800096a:	f000 fd39 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200001ec 	.word	0x200001ec
 800097c:	50040100 	.word	0x50040100
 8000980:	25b00200 	.word	0x25b00200

08000984 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800099a:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 800099c:	4a29      	ldr	r2, [pc, #164]	@ (8000a44 <MX_ADC3_Init+0xc0>)
 800099e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009a6:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ac:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b2:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b8:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009fa:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 80009fc:	f001 fe84 	bl	8002708 <HAL_ADC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000a06:	f000 fceb 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_ADC3_Init+0xc4>)
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a16:	237f      	movs	r3, #127	@ 0x7f
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_ADC3_Init+0xbc>)
 8000a28:	f001 ffc2 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000a32:	f000 fcd5 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000254 	.word	0x20000254
 8000a44:	50040200 	.word	0x50040200
 8000a48:	36902000 	.word	0x36902000

08000a4c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a52:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <MX_DCMI_Init+0x64>)
 8000a54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <MX_DCMI_Init+0x60>)
 8000a9a:	f002 fd7d 	bl	8003598 <HAL_DCMI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f000 fc9c 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200002bc 	.word	0x200002bc
 8000ab0:	50050000 	.word	0x50050000

08000ab4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000aba:	4a31      	ldr	r2, [pc, #196]	@ (8000b80 <MX_DFSDM1_Init+0xcc>)
 8000abc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000adc:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b06:	481d      	ldr	r0, [pc, #116]	@ (8000b7c <MX_DFSDM1_Init+0xc8>)
 8000b08:	f002 fdcc 	bl	80036a4 <HAL_DFSDM_ChannelInit>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b12:	f000 fc65 	bl	80013e0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <MX_DFSDM1_Init+0xd4>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b40:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <MX_DFSDM1_Init+0xd0>)
 8000b68:	f002 fd9c 	bl	80036a4 <HAL_DFSDM_ChannelInit>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000b72:	f000 fc35 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000320 	.word	0x20000320
 8000b80:	40016020 	.word	0x40016020
 8000b84:	20000358 	.word	0x20000358
 8000b88:	40016040 	.word	0x40016040

08000b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000b92:	4a1c      	ldr	r2, [pc, #112]	@ (8000c04 <MX_I2C1_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0040364E;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000b98:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <MX_I2C1_Init+0x7c>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc6:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bc8:	f003 f822 	bl	8003c10 <HAL_I2C_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bd2:	f000 fc05 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bda:	f003 f8b4 	bl	8003d46 <HAL_I2CEx_ConfigAnalogFilter>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000be4:	f000 fbfc 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_I2C1_Init+0x74>)
 8000bec:	f003 f8f6 	bl	8003ddc <HAL_I2CEx_ConfigDigitalFilter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 fbf3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000390 	.word	0x20000390
 8000c04:	40005400 	.word	0x40005400
 8000c08:	0040364e 	.word	0x0040364e

08000c0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <MX_I2C2_Init+0x78>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040364E;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <MX_I2C2_Init+0x7c>)
 8000c1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c46:	480e      	ldr	r0, [pc, #56]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c48:	f002 ffe2 	bl	8003c10 <HAL_I2C_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c52:	f000 fbc5 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c5a:	f003 f874 	bl	8003d46 <HAL_I2CEx_ConfigAnalogFilter>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c64:	f000 fbbc 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_I2C2_Init+0x74>)
 8000c6c:	f003 f8b6 	bl	8003ddc <HAL_I2CEx_ConfigDigitalFilter>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 fbb3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200003e4 	.word	0x200003e4
 8000c84:	40005800 	.word	0x40005800
 8000c88:	0040364e 	.word	0x0040364e

08000c8c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_LPUART1_UART_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <MX_LPUART1_UART_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ca2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_LPUART1_UART_Init+0x50>)
 8000cca:	f007 fe18 	bl	80088fe <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 fb84 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000438 	.word	0x20000438
 8000ce0:	40008000 	.word	0x40008000
 8000ce4:	00033324 	.word	0x00033324

08000ce8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000cee:	4a15      	ldr	r2, [pc, #84]	@ (8000d44 <MX_USART1_UART_Init+0x5c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d2c:	f007 fde7 	bl	80088fe <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d36:	f000 fb53 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200004c0 	.word	0x200004c0
 8000d44:	40013800 	.word	0x40013800

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <MX_USART2_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d8c:	f007 fdb7 	bl	80088fe <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 fb23 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000548 	.word	0x20000548
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dae:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <MX_QUADSPI_Init+0x54>)
 8000db0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dc6:	2217      	movs	r2, #23
 8000dc8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000de4:	f004 fa70 	bl	80052c8 <HAL_QSPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000dee:	f000 faf7 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200005d0 	.word	0x200005d0
 8000dfc:	a0001000 	.word	0xa0001000

08000e00 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e04:	4b4d      	ldr	r3, [pc, #308]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e06:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <MX_SAI1_Init+0x140>)
 8000e08:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e10:	4b4a      	ldr	r3, [pc, #296]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e16:	4b49      	ldr	r3, [pc, #292]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e18:	2240      	movs	r2, #64	@ 0x40
 8000e1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e1c:	4b47      	ldr	r3, [pc, #284]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e28:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e2e:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e34:	4b41      	ldr	r3, [pc, #260]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e40:	4b3e      	ldr	r3, [pc, #248]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e42:	4a40      	ldr	r2, [pc, #256]	@ (8000f44 <MX_SAI1_Init+0x144>)
 8000e44:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e58:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e60:	2208      	movs	r2, #8
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e64:	4b35      	ldr	r3, [pc, #212]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e6a:	4b34      	ldr	r3, [pc, #208]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e94:	4829      	ldr	r0, [pc, #164]	@ (8000f3c <MX_SAI1_Init+0x13c>)
 8000e96:	f006 fcab 	bl	80077f0 <HAL_SAI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000ea0:	f000 fa9e 	bl	80013e0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ea6:	4a29      	ldr	r2, [pc, #164]	@ (8000f4c <MX_SAI1_Init+0x14c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000eb8:	2240      	movs	r2, #64	@ 0x40
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000f28:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <MX_SAI1_Init+0x148>)
 8000f2a:	f006 fc61 	bl	80077f0 <HAL_SAI_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000f34:	f000 fa54 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000061c 	.word	0x2000061c
 8000f40:	40015404 	.word	0x40015404
 8000f44:	0002ee00 	.word	0x0002ee00
 8000f48:	200006a0 	.word	0x200006a0
 8000f4c:	40015424 	.word	0x40015424

08000f50 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <MX_SDMMC1_SD_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f72:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f82:	f006 fde1 	bl	8007b48 <HAL_SD_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000f8c:	f000 fa28 	bl	80013e0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000f90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_SDMMC1_SD_Init+0x58>)
 8000f96:	f007 f85d 	bl	8008054 <HAL_SD_ConfigWideBusOperation>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SDMMC1_SD_Init+0x54>
  {
    Error_Handler();
 8000fa0:	f000 fa1e 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000724 	.word	0x20000724
 8000fac:	40012800 	.word	0x40012800

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <MX_SPI1_Init+0x78>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fde:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fe2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000ffe:	2207      	movs	r2, #7
 8001000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_SPI1_Init+0x74>)
 800100a:	2208      	movs	r2, #8
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_SPI1_Init+0x74>)
 8001010:	f007 fb8a 	bl	8008728 <HAL_SPI_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800101a:	f000 f9e1 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200007a8 	.word	0x200007a8
 8001028:	40013000 	.word	0x40013000

0800102c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <MX_SPI2_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001038:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001046:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800104a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800105a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800105e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800107a:	2207      	movs	r2, #7
 800107c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001086:	2208      	movs	r2, #8
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800108c:	f007 fb4c 	bl	8008728 <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 f9a3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000080c 	.word	0x2000080c
 80010a4:	40003800 	.word	0x40003800

080010a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00d f9b3 	bl	800e420 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80010ba:	4b4f      	ldr	r3, [pc, #316]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010bc:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80010c0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80010c2:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010c4:	4a4d      	ldr	r2, [pc, #308]	@ (80011fc <MX_FMC_Init+0x154>)
 80010c6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80010c8:	4b4b      	ldr	r3, [pc, #300]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80010ce:	4b4a      	ldr	r3, [pc, #296]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80010d4:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010da:	4b47      	ldr	r3, [pc, #284]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010dc:	2210      	movs	r2, #16
 80010de:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80010e0:	4b45      	ldr	r3, [pc, #276]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80010e6:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010ec:	4b42      	ldr	r3, [pc, #264]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80010f2:	4b41      	ldr	r3, [pc, #260]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010f8:	4b3f      	ldr	r3, [pc, #252]	@ (80011f8 <MX_FMC_Init+0x150>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010fe:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <MX_FMC_Init+0x150>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001104:	4b3c      	ldr	r3, [pc, #240]	@ (80011f8 <MX_FMC_Init+0x150>)
 8001106:	2200      	movs	r2, #0
 8001108:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800110a:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <MX_FMC_Init+0x150>)
 800110c:	2200      	movs	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <MX_FMC_Init+0x150>)
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <MX_FMC_Init+0x150>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800111c:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <MX_FMC_Init+0x150>)
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001122:	230f      	movs	r3, #15
 8001124:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001126:	230f      	movs	r3, #15
 8001128:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800112a:	23ff      	movs	r3, #255	@ 0xff
 800112c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800112e:	230f      	movs	r3, #15
 8001130:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001132:	2310      	movs	r3, #16
 8001134:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001136:	2311      	movs	r3, #17
 8001138:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	482c      	ldr	r0, [pc, #176]	@ (80011f8 <MX_FMC_Init+0x150>)
 8001146:	f007 fb92 	bl	800886e <HAL_SRAM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001150:	f000 f946 	bl	80013e0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_FMC_Init+0x158>)
 8001156:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800115a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800115c:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_FMC_Init+0x158>)
 800115e:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <MX_FMC_Init+0x154>)
 8001160:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_FMC_Init+0x158>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_FMC_Init+0x158>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_FMC_Init+0x158>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_FMC_Init+0x158>)
 8001176:	2210      	movs	r2, #16
 8001178:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_FMC_Init+0x158>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_FMC_Init+0x158>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_FMC_Init+0x158>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_FMC_Init+0x158>)
 800118e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_FMC_Init+0x158>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_FMC_Init+0x158>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_FMC_Init+0x158>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_FMC_Init+0x158>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_FMC_Init+0x158>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_FMC_Init+0x158>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_FMC_Init+0x158>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011be:	230f      	movs	r3, #15
 80011c0:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80011c2:	230f      	movs	r3, #15
 80011c4:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80011c6:	23ff      	movs	r3, #255	@ 0xff
 80011c8:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80011ca:	230f      	movs	r3, #15
 80011cc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011ce:	2310      	movs	r3, #16
 80011d0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011d2:	2311      	movs	r3, #17
 80011d4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_FMC_Init+0x158>)
 80011e2:	f007 fb44 	bl	800886e <HAL_SRAM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 80011ec:	f000 f8f8 	bl	80013e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000870 	.word	0x20000870
 80011fc:	a0000104 	.word	0xa0000104
 8001200:	200008c0 	.word	0x200008c0

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	@ 0x38
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121a:	4b6c      	ldr	r3, [pc, #432]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	4a6b      	ldr	r2, [pc, #428]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001226:	4b69      	ldr	r3, [pc, #420]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a65      	ldr	r2, [pc, #404]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b60      	ldr	r3, [pc, #384]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a5f      	ldr	r2, [pc, #380]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b5d      	ldr	r3, [pc, #372]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	4b5a      	ldr	r3, [pc, #360]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a59      	ldr	r2, [pc, #356]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800127a:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a53      	ldr	r2, [pc, #332]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001292:	4b4e      	ldr	r3, [pc, #312]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a4d      	ldr	r2, [pc, #308]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80012aa:	f003 fffd 	bl	80052a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b47      	ldr	r3, [pc, #284]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a46      	ldr	r2, [pc, #280]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a40      	ldr	r2, [pc, #256]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b3e      	ldr	r3, [pc, #248]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4a3a      	ldr	r2, [pc, #232]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <MX_GPIO_Init+0x1c8>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012fc:	4834      	ldr	r0, [pc, #208]	@ (80013d0 <MX_GPIO_Init+0x1cc>)
 80012fe:	f002 fc6f 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001302:	2340      	movs	r3, #64	@ 0x40
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001312:	2303      	movs	r3, #3
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131a:	4619      	mov	r1, r3
 800131c:	482d      	ldr	r0, [pc, #180]	@ (80013d4 <MX_GPIO_Init+0x1d0>)
 800131e:	f002 facd 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001322:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001334:	2303      	movs	r3, #3
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4826      	ldr	r0, [pc, #152]	@ (80013d8 <MX_GPIO_Init+0x1d4>)
 8001340:	f002 fabc 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001356:	2302      	movs	r3, #2
 8001358:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	481b      	ldr	r0, [pc, #108]	@ (80013d0 <MX_GPIO_Init+0x1cc>)
 8001362:	f002 faab 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800136c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001372:	2301      	movs	r3, #1
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4817      	ldr	r0, [pc, #92]	@ (80013dc <MX_GPIO_Init+0x1d8>)
 800137e:	f002 fa9d 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001394:	230e      	movs	r3, #14
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f002 fa8b 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ac:	2311      	movs	r3, #17
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_GPIO_Init+0x1cc>)
 80013c0:	f002 fa7c 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3738      	adds	r7, #56	@ 0x38
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48002000 	.word	0x48002000
 80013d8:	48001c00 	.word	0x48001c00
 80013dc:	48000800 	.word	0x48000800

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_MspInit+0x44>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001430 <HAL_MspInit+0x44>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_MspInit+0x44>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <HAL_MspInit+0x44>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001414:	6593      	str	r3, [r2, #88]	@ 0x58
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	@ 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a59      	ldr	r2, [pc, #356]	@ (80015b8 <HAL_ADC_MspInit+0x184>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12d      	bne.n	80014b2 <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001456:	4b59      	ldr	r3, [pc, #356]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a57      	ldr	r2, [pc, #348]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 800145e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001460:	4b56      	ldr	r3, [pc, #344]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10b      	bne.n	8001480 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	4a54      	ldr	r2, [pc, #336]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 800146e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001474:	4b52      	ldr	r3, [pc, #328]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001480:	4b4f      	ldr	r3, [pc, #316]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001484:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148c:	4b4c      	ldr	r3, [pc, #304]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8001498:	2318      	movs	r3, #24
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4846      	ldr	r0, [pc, #280]	@ (80015c4 <HAL_ADC_MspInit+0x190>)
 80014ac:	f002 fa06 	bl	80038bc <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014b0:	e07e      	b.n	80015b0 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a44      	ldr	r2, [pc, #272]	@ (80015c8 <HAL_ADC_MspInit+0x194>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d146      	bne.n	800154a <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80014bc:	4b3f      	ldr	r3, [pc, #252]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a3e      	ldr	r2, [pc, #248]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 80014c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10b      	bne.n	80014e6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80014ce:	4b3c      	ldr	r3, [pc, #240]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a3b      	ldr	r2, [pc, #236]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 80014d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a35      	ldr	r2, [pc, #212]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b33      	ldr	r3, [pc, #204]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b30      	ldr	r3, [pc, #192]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a2f      	ldr	r2, [pc, #188]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8001516:	2303      	movs	r3, #3
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4826      	ldr	r0, [pc, #152]	@ (80015c4 <HAL_ADC_MspInit+0x190>)
 800152a:	f002 f9c7 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800152e:	2312      	movs	r3, #18
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001544:	f002 f9ba 	bl	80038bc <HAL_GPIO_Init>
}
 8001548:	e032      	b.n	80015b0 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <HAL_ADC_MspInit+0x198>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d12d      	bne.n	80015b0 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a18      	ldr	r2, [pc, #96]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 800155c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_ADC_MspInit+0x188>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10b      	bne.n	800157e <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 800156c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	4a0f      	ldr	r2, [pc, #60]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_ADC_MspInit+0x18c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <HAL_ADC_MspInit+0x19c>)
 80015ac:	f002 f986 	bl	80038bc <HAL_GPIO_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3738      	adds	r7, #56	@ 0x38
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	50040000 	.word	0x50040000
 80015bc:	20000910 	.word	0x20000910
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000800 	.word	0x48000800
 80015c8:	50040100 	.word	0x50040100
 80015cc:	50040200 	.word	0x50040200
 80015d0:	48001400 	.word	0x48001400

080015d4 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a33      	ldr	r2, [pc, #204]	@ (80016c0 <HAL_DCMI_MspInit+0xec>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d160      	bne.n	80016b8 <HAL_DCMI_MspInit+0xe4>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80015f6:	4b33      	ldr	r3, [pc, #204]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a32      	ldr	r2, [pc, #200]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a2c      	ldr	r2, [pc, #176]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a26      	ldr	r2, [pc, #152]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800163e:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a20      	ldr	r2, [pc, #128]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <HAL_DCMI_MspInit+0xf0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8001656:	f645 7320 	movw	r3, #24352	@ 0x5f20
 800165a:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001668:	230a      	movs	r3, #10
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4815      	ldr	r0, [pc, #84]	@ (80016c8 <HAL_DCMI_MspInit+0xf4>)
 8001674:	f002 f922 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001678:	23b0      	movs	r3, #176	@ 0xb0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001688:	230a      	movs	r3, #10
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	480e      	ldr	r0, [pc, #56]	@ (80016cc <HAL_DCMI_MspInit+0xf8>)
 8001694:	f002 f912 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001698:	2320      	movs	r3, #32
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80016a8:	230a      	movs	r3, #10
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	@ (80016d0 <HAL_DCMI_MspInit+0xfc>)
 80016b4:	f002 f902 	bl	80038bc <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	@ 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	50050000 	.word	0x50050000
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48001c00 	.word	0x48001c00
 80016cc:	48002000 	.word	0x48002000
 80016d0:	48001000 	.word	0x48001000

080016d4 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0ae      	sub	sp, #184	@ 0xb8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	228c      	movs	r2, #140	@ 0x8c
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00c fe93 	bl	800e420 <memset>
  if(DFSDM1_Init == 0)
 80016fa:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <HAL_DFSDM_ChannelMspInit+0x100>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d163      	bne.n	80017ca <HAL_DFSDM_ChannelMspInit+0xf6>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001706:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fcd8 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800171e:	f7ff fe5f 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001722:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	4a2c      	ldr	r2, [pc, #176]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800172c:	6613      	str	r3, [r2, #96]	@ 0x60
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001732:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a26      	ldr	r2, [pc, #152]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800176a:	2384      	movs	r3, #132	@ 0x84
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001782:	2306      	movs	r3, #6
 8001784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800178c:	4619      	mov	r1, r3
 800178e:	4813      	ldr	r0, [pc, #76]	@ (80017dc <HAL_DFSDM_ChannelMspInit+0x108>)
 8001790:	f002 f894 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017ae:	2306      	movs	r3, #6
 80017b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80017bc:	f002 f87e 	bl	80038bc <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <HAL_DFSDM_ChannelMspInit+0x100>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a03      	ldr	r2, [pc, #12]	@ (80017d4 <HAL_DFSDM_ChannelMspInit+0x100>)
 80017c8:	6013      	str	r3, [r2, #0]
  }

}
 80017ca:	bf00      	nop
 80017cc:	37b8      	adds	r7, #184	@ 0xb8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000914 	.word	0x20000914
 80017d8:	40021000 	.word	0x40021000
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000400 	.word	0x48000400

080017e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0b0      	sub	sp, #192	@ 0xc0
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	228c      	movs	r2, #140	@ 0x8c
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f00c fe0b 	bl	800e420 <memset>
  if(hi2c->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a53      	ldr	r2, [pc, #332]	@ (800195c <HAL_I2C_MspInit+0x178>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d13c      	bne.n	800188e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001814:	2340      	movs	r3, #64	@ 0x40
 8001816:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fc51 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f7ff fdd8 	bl	80013e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a4a      	ldr	r2, [pc, #296]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b48      	ldr	r3, [pc, #288]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001848:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2312      	movs	r3, #18
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001856:	2301      	movs	r3, #1
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001862:	2304      	movs	r3, #4
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800186c:	4619      	mov	r1, r3
 800186e:	483d      	ldr	r0, [pc, #244]	@ (8001964 <HAL_I2C_MspInit+0x180>)
 8001870:	f002 f824 	bl	80038bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001874:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	4a39      	ldr	r2, [pc, #228]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 800187a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800187e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001880:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800188c:	e061      	b.n	8001952 <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a35      	ldr	r2, [pc, #212]	@ (8001968 <HAL_I2C_MspInit+0x184>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d15c      	bne.n	8001952 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800189c:	2300      	movs	r3, #0
 800189e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fc0f 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80018b0:	f7ff fd96 	bl	80013e0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	4a29      	ldr	r2, [pc, #164]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 80018ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d0:	4a23      	ldr	r2, [pc, #140]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d8:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80018e4:	2310      	movs	r3, #16
 80018e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ea:	2312      	movs	r3, #18
 80018ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001906:	4619      	mov	r1, r3
 8001908:	4818      	ldr	r0, [pc, #96]	@ (800196c <HAL_I2C_MspInit+0x188>)
 800190a:	f001 ffd7 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800190e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001916:	2312      	movs	r3, #18
 8001918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001928:	2304      	movs	r3, #4
 800192a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001932:	4619      	mov	r1, r3
 8001934:	480b      	ldr	r0, [pc, #44]	@ (8001964 <HAL_I2C_MspInit+0x180>)
 8001936:	f001 ffc1 	bl	80038bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 8001940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001944:	6593      	str	r3, [r2, #88]	@ 0x58
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_I2C_MspInit+0x17c>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	bf00      	nop
 8001954:	37c0      	adds	r7, #192	@ 0xc0
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40005400 	.word	0x40005400
 8001960:	40021000 	.word	0x40021000
 8001964:	48000400 	.word	0x48000400
 8001968:	40005800 	.word	0x40005800
 800196c:	48001c00 	.word	0x48001c00

08001970 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0b2      	sub	sp, #200	@ 0xc8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800198c:	228c      	movs	r2, #140	@ 0x8c
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f00c fd45 	bl	800e420 <memset>
  if(huart->Instance==LPUART1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a86      	ldr	r2, [pc, #536]	@ (8001bb4 <HAL_UART_MspInit+0x244>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13e      	bne.n	8001a1e <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019a0:	2320      	movs	r3, #32
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 fb8b 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fd12 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019bc:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 80019be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c0:	4a7d      	ldr	r2, [pc, #500]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019c8:	4b7b      	ldr	r3, [pc, #492]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019d4:	4b78      	ldr	r3, [pc, #480]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	4a77      	ldr	r2, [pc, #476]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 80019da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e0:	4b75      	ldr	r3, [pc, #468]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 80019ec:	f003 fc5c 	bl	80052a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80019f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a10:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4869      	ldr	r0, [pc, #420]	@ (8001bbc <HAL_UART_MspInit+0x24c>)
 8001a18:	f001 ff50 	bl	80038bc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a1c:	e0c6      	b.n	8001bac <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a67      	ldr	r2, [pc, #412]	@ (8001bc0 <HAL_UART_MspInit+0x250>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d15f      	bne.n	8001ae8 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fb47 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001a40:	f7ff fcce 	bl	80013e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a44:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a50:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b56      	ldr	r3, [pc, #344]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	4a55      	ldr	r2, [pc, #340]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a78:	4a4f      	ldr	r2, [pc, #316]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a80:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001a8c:	f003 fc0c 	bl	80052a8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001a90:	2340      	movs	r3, #64	@ 0x40
 8001a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4843      	ldr	r0, [pc, #268]	@ (8001bc4 <HAL_UART_MspInit+0x254>)
 8001ab6:	f001 ff01 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001aba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ada:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4836      	ldr	r0, [pc, #216]	@ (8001bbc <HAL_UART_MspInit+0x24c>)
 8001ae2:	f001 feeb 	bl	80038bc <HAL_GPIO_Init>
}
 8001ae6:	e061      	b.n	8001bac <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a36      	ldr	r2, [pc, #216]	@ (8001bc8 <HAL_UART_MspInit+0x258>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d15c      	bne.n	8001bac <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fae2 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001b0a:	f7ff fc69 	bl	80013e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	4a29      	ldr	r2, [pc, #164]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a23      	ldr	r2, [pc, #140]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_UART_MspInit+0x248>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001b56:	2340      	movs	r3, #64	@ 0x40
 8001b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <HAL_UART_MspInit+0x25c>)
 8001b7c:	f001 fe9e 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001b80:	2304      	movs	r3, #4
 8001b82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b98:	2307      	movs	r3, #7
 8001b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba8:	f001 fe88 	bl	80038bc <HAL_GPIO_Init>
}
 8001bac:	bf00      	nop
 8001bae:	37c8      	adds	r7, #200	@ 0xc8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40008000 	.word	0x40008000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48001800 	.word	0x48001800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	48000c00 	.word	0x48000c00

08001bd0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a26      	ldr	r2, [pc, #152]	@ (8001c88 <HAL_QSPI_MspInit+0xb8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d145      	bne.n	8001c7e <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf6:	4a25      	ldr	r2, [pc, #148]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_QSPI_MspInit+0xbc>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001c3a:	f640 0303 	movw	r3, #2051	@ 0x803
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <HAL_QSPI_MspInit+0xc0>)
 8001c58:	f001 fe30 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001c5c:	23c8      	movs	r3, #200	@ 0xc8
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f001 fe1f 	bl	80038bc <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	@ 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	a0001000 	.word	0xa0001000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	48000400 	.word	0x48000400

08001c94 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a25      	ldr	r2, [pc, #148]	@ (8001d48 <HAL_SD_MspInit+0xb4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d144      	bne.n	8001d40 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001cb6:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cba:	4a24      	ldr	r2, [pc, #144]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_SD_MspInit+0xb8>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d0e:	230c      	movs	r3, #12
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <HAL_SD_MspInit+0xbc>)
 8001d1a:	f001 fdcf 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001d1e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d22:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d30:	230c      	movs	r3, #12
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <HAL_SD_MspInit+0xc0>)
 8001d3c:	f001 fdbe 	bl	80038bc <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	@ 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40012800 	.word	0x40012800
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48000c00 	.word	0x48000c00
 8001d54:	48000800 	.word	0x48000800

08001d58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08e      	sub	sp, #56	@ 0x38
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea4 <HAL_SPI_MspInit+0x14c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d146      	bne.n	8001e08 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d86:	4b48      	ldr	r3, [pc, #288]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	4a44      	ldr	r2, [pc, #272]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001dc2:	2330      	movs	r3, #48	@ 0x30
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4833      	ldr	r0, [pc, #204]	@ (8001eac <HAL_SPI_MspInit+0x154>)
 8001dde:	f001 fd6d 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001de2:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df4:	2305      	movs	r3, #5
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e02:	f001 fd5b 	bl	80038bc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e06:	e049      	b.n	8001e9c <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	@ (8001eb0 <HAL_SPI_MspInit+0x158>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d144      	bne.n	8001e9c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_SPI_MspInit+0x150>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	480f      	ldr	r0, [pc, #60]	@ (8001eb4 <HAL_SPI_MspInit+0x15c>)
 8001e76:	f001 fd21 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <HAL_SPI_MspInit+0x154>)
 8001e98:	f001 fd10 	bl	80038bc <HAL_GPIO_Init>
}
 8001e9c:	bf00      	nop
 8001e9e:	3738      	adds	r7, #56	@ 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013000 	.word	0x40013000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	40003800 	.word	0x40003800
 8001eb4:	48002000 	.word	0x48002000

08001eb8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <HAL_FMC_MspInit+0xc4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d14f      	bne.n	8001f74 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001ed4:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <HAL_FMC_MspInit+0xc4>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eda:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_FMC_MspInit+0xc8>)
 8001edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ede:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <HAL_FMC_MspInit+0xc8>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ee6:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <HAL_FMC_MspInit+0xc8>)
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8001ef2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ef6:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f04:	230c      	movs	r3, #12
 8001f06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481d      	ldr	r0, [pc, #116]	@ (8001f84 <HAL_FMC_MspInit+0xcc>)
 8001f0e:	f001 fcd5 	bl	80038bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8001f12:	f240 233f 	movw	r3, #575	@ 0x23f
 8001f16:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f24:	230c      	movs	r3, #12
 8001f26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4816      	ldr	r0, [pc, #88]	@ (8001f88 <HAL_FMC_MspInit+0xd0>)
 8001f2e:	f001 fcc5 	bl	80038bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8001f32:	f64f 73b3 	movw	r3, #65459	@ 0xffb3
 8001f36:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f44:	230c      	movs	r3, #12
 8001f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480f      	ldr	r0, [pc, #60]	@ (8001f8c <HAL_FMC_MspInit+0xd4>)
 8001f4e:	f001 fcb5 	bl	80038bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001f52:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001f56:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f64:	230c      	movs	r3, #12
 8001f66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4808      	ldr	r0, [pc, #32]	@ (8001f90 <HAL_FMC_MspInit+0xd8>)
 8001f6e:	f001 fca5 	bl	80038bc <HAL_GPIO_Init>
 8001f72:	e000      	b.n	8001f76 <HAL_FMC_MspInit+0xbe>
    return;
 8001f74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000918 	.word	0x20000918
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001800 	.word	0x48001800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001400 	.word	0x48001400

08001f94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f9c:	f7ff ff8c 	bl	8001eb8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a33      	ldr	r2, [pc, #204]	@ (8002084 <HAL_SAI_MspInit+0xdc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d135      	bne.n	8002026 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fba:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_SAI_MspInit+0xe0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001fc2:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_SAI_MspInit+0xe4>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	4a31      	ldr	r2, [pc, #196]	@ (800208c <HAL_SAI_MspInit+0xe4>)
 8001fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_SAI_MspInit+0xe4>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001fda:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <HAL_SAI_MspInit+0xe0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <HAL_SAI_MspInit+0xe0>)
 8001fe2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001fe4:	2354      	movs	r3, #84	@ 0x54
 8001fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ff4:	230d      	movs	r3, #13
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4824      	ldr	r0, [pc, #144]	@ (8002090 <HAL_SAI_MspInit+0xe8>)
 8002000:	f001 fc5c 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002016:	230d      	movs	r3, #13
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	481c      	ldr	r0, [pc, #112]	@ (8002094 <HAL_SAI_MspInit+0xec>)
 8002022:	f001 fc4b 	bl	80038bc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_SAI_MspInit+0xf0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d124      	bne.n	800207a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002030:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_SAI_MspInit+0xe0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10b      	bne.n	8002050 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_SAI_MspInit+0xe4>)
 800203a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203c:	4a13      	ldr	r2, [pc, #76]	@ (800208c <HAL_SAI_MspInit+0xe4>)
 800203e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002042:	6613      	str	r3, [r2, #96]	@ 0x60
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_SAI_MspInit+0xe4>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_SAI_MspInit+0xe0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_SAI_MspInit+0xe0>)
 8002058:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800205a:	2308      	movs	r3, #8
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800206a:	230d      	movs	r3, #13
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4806      	ldr	r0, [pc, #24]	@ (8002090 <HAL_SAI_MspInit+0xe8>)
 8002076:	f001 fc21 	bl	80038bc <HAL_GPIO_Init>

    }
}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	@ 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40015404 	.word	0x40015404
 8002088:	2000091c 	.word	0x2000091c
 800208c:	40021000 	.word	0x40021000
 8002090:	48001000 	.word	0x48001000
 8002094:	48000400 	.word	0x48000400
 8002098:	40015424 	.word	0x40015424

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <NMI_Handler+0x4>

080020a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <MemManage_Handler+0x4>

080020b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f2:	f000 f925 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <OTG_FS_IRQHandler+0x10>)
 8002102:	f001 fff5 	bl	80040f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20001e2c 	.word	0x20001e2c

08002110 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
  }

  return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:
  }
  return len;
}

int _close(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002172:	605a      	str	r2, [r3, #4]
  return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_isatty>:

int _isatty(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f00c f96a 	bl	800e4bc <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20040000 	.word	0x20040000
 8002214:	00000400 	.word	0x00000400
 8002218:	20000920 	.word	0x20000920
 800221c:	20002680 	.word	0x20002680

08002220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800227c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff ffea 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <LoopForever+0x6>)
  ldr r1, =_edata
 800224e:	490d      	ldr	r1, [pc, #52]	@ (8002284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <LoopForever+0xe>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002264:	4c0a      	ldr	r4, [pc, #40]	@ (8002290 <LoopForever+0x16>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f00c f929 	bl	800e4c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002276:	f7fe f9c7 	bl	8000608 <main>

0800227a <LoopForever>:

LoopForever:
    b LoopForever
 800227a:	e7fe      	b.n	800227a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002288:	0800f038 	.word	0x0800f038
  ldr r2, =_sbss
 800228c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002290:	2000267c 	.word	0x2000267c

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>

08002296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f001 f937 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 f80e 	bl	80022c8 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	e001      	b.n	80022bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b8:	f7ff f898 	bl	80013ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022d4:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <HAL_InitTick+0x6c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_InitTick+0x70>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <HAL_InitTick+0x6c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 f943 	bl	800357e <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d809      	bhi.n	8002318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f001 f90d 	bl	800352a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002310:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_InitTick+0x74>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e007      	b.n	8002328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e004      	b.n	8002328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e001      	b.n	8002328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008
 8002364:	20000924 	.word	0x20000924

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000924 	.word	0x20000924

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000008 	.word	0x20000008

080023c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3360      	adds	r3, #96	@ 0x60
 8002442:	461a      	mov	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <LL_ADC_SetOffset+0x44>)
 8002452:	4013      	ands	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	4313      	orrs	r3, r2
 8002460:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	03fff000 	.word	0x03fff000

08002478 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3360      	adds	r3, #96	@ 0x60
 8002486:	461a      	mov	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3360      	adds	r3, #96	@ 0x60
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	615a      	str	r2, [r3, #20]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3330      	adds	r3, #48	@ 0x30
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	4413      	add	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	211f      	movs	r1, #31
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 011f 	and.w	r1, r3, #31
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3314      	adds	r3, #20
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0e5b      	lsrs	r3, r3, #25
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0d1b      	lsrs	r3, r3, #20
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2107      	movs	r1, #7
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	401a      	ands	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0d1b      	lsrs	r3, r3, #20
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	431a      	orrs	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0318 	and.w	r3, r3, #24
 80025d2:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025d4:	40d9      	lsrs	r1, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	400b      	ands	r3, r1
 80025da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025de:	431a      	orrs	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	0007ffff 	.word	0x0007ffff

080025f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6093      	str	r3, [r2, #8]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800262c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002658:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <LL_ADC_IsEnabled+0x18>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <LL_ADC_IsEnabled+0x1a>
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d101      	bne.n	80026d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d101      	bne.n	80026f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e133      	b.n	800298a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fe fe7f 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff67 	bl	800261c <LL_ADC_IsDeepPowerDownEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff4d 	bl	80025f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ff82 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff66 	bl	8002644 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002778:	4b86      	ldr	r3, [pc, #536]	@ (8002994 <HAL_ADC_Init+0x28c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	4a86      	ldr	r2, [pc, #536]	@ (8002998 <HAL_ADC_Init+0x290>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800278c:	e002      	b.n	8002794 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3b01      	subs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff64 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff75 	bl	80026ba <LL_ADC_REG_IsConversionOngoing>
 80027d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 80cc 	bne.w	8002978 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80c8 	bne.w	8002978 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027f0:	f043 0202 	orr.w	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff49 	bl	8002694 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d115      	bne.n	8002834 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002808:	4864      	ldr	r0, [pc, #400]	@ (800299c <HAL_ADC_Init+0x294>)
 800280a:	f7ff ff43 	bl	8002694 <LL_ADC_IsEnabled>
 800280e:	4604      	mov	r4, r0
 8002810:	4863      	ldr	r0, [pc, #396]	@ (80029a0 <HAL_ADC_Init+0x298>)
 8002812:	f7ff ff3f 	bl	8002694 <LL_ADC_IsEnabled>
 8002816:	4603      	mov	r3, r0
 8002818:	431c      	orrs	r4, r3
 800281a:	4862      	ldr	r0, [pc, #392]	@ (80029a4 <HAL_ADC_Init+0x29c>)
 800281c:	f7ff ff3a 	bl	8002694 <LL_ADC_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	4323      	orrs	r3, r4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4619      	mov	r1, r3
 800282e:	485e      	ldr	r0, [pc, #376]	@ (80029a8 <HAL_ADC_Init+0x2a0>)
 8002830:	f7ff fdca 	bl	80023c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7e5b      	ldrb	r3, [r3, #25]
 8002838:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800283e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002844:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800284a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002852:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d106      	bne.n	8002870 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	3b01      	subs	r3, #1
 8002868:	045b      	lsls	r3, r3, #17
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	4b46      	ldr	r3, [pc, #280]	@ (80029ac <HAL_ADC_Init+0x2a4>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	69b9      	ldr	r1, [r7, #24]
 800289c:	430b      	orrs	r3, r1
 800289e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff1b 	bl	80026e0 <LL_ADC_INJ_IsConversionOngoing>
 80028aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d140      	bne.n	8002934 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d13d      	bne.n	8002934 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
 80028c0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028c2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028da:	f023 0306 	bic.w	r3, r3, #6
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d118      	bne.n	8002924 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002914:	430a      	orrs	r2, r1
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	e007      	b.n	8002934 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10c      	bne.n	8002956 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f023 010f 	bic.w	r1, r3, #15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
 8002954:	e007      	b.n	8002966 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 020f 	bic.w	r2, r2, #15
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	659a      	str	r2, [r3, #88]	@ 0x58
 8002976:	e007      	b.n	8002988 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297c:	f043 0210 	orr.w	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002988:	7ffb      	ldrb	r3, [r7, #31]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd90      	pop	{r4, r7, pc}
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000
 8002998:	053e2d63 	.word	0x053e2d63
 800299c:	50040000 	.word	0x50040000
 80029a0:	50040100 	.word	0x50040100
 80029a4:	50040200 	.word	0x50040200
 80029a8:	50040300 	.word	0x50040300
 80029ac:	fff0c007 	.word	0xfff0c007

080029b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0b6      	sub	sp, #216	@ 0xd8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x22>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e3e3      	b.n	800319a <HAL_ADC_ConfigChannel+0x7ea>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fe6b 	bl	80026ba <LL_ADC_REG_IsConversionOngoing>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 83c4 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d824      	bhi.n	8002a46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	3b02      	subs	r3, #2
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d81b      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x8e>
 8002a06:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <HAL_ADC_ConfigChannel+0x5c>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a25 	.word	0x08002a25
 8002a14:	08002a2d 	.word	0x08002a2d
 8002a18:	08002a35 	.word	0x08002a35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a22:	e010      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a24:	2312      	movs	r3, #18
 8002a26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a2a:	e00c      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a2c:	2318      	movs	r3, #24
 8002a2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a32:	e008      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a3e:	2306      	movs	r3, #6
 8002a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a54:	f7ff fd54 	bl	8002500 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fe2c 	bl	80026ba <LL_ADC_REG_IsConversionOngoing>
 8002a62:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fe38 	bl	80026e0 <LL_ADC_INJ_IsConversionOngoing>
 8002a70:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 81bf 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 81ba 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a90:	d10f      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7ff fd5b 	bl	8002558 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fd15 	bl	80024da <LL_ADC_SetSamplingTimeCommonConfig>
 8002ab0:	e00e      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f7ff fd4a 	bl	8002558 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fd05 	bl	80024da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	08db      	lsrs	r3, r3, #3
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d00a      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6919      	ldr	r1, [r3, #16]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b02:	f7ff fc95 	bl	8002430 <LL_ADC_SetOffset>
 8002b06:	e179      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fcb2 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x184>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fca7 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 021f 	and.w	r2, r3, #31
 8002b32:	e01e      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1c2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fc9c 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e004      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x1da>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	e018      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x20c>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ba6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002bb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d106      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fc6b 	bl	80024a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fc4f 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x24a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fc44 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	e01e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x288>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fc39 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e004      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x2a0>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	e018      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x2d2>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e004      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d106      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fc08 	bl	80024a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fbec 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x310>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fbe1 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	e01e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x34e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fbd6 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x366>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	e014      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x390>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e004      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d106      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fba9 	bl	80024a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2103      	movs	r1, #3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fb8d 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x3ce>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fb82 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	e017      	b.n	8002dae <HAL_ADC_ConfigChannel+0x3fe>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2103      	movs	r1, #3
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fb77 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d98:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e003      	b.n	8002dac <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x416>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	e011      	b.n	8002dea <HAL_ADC_ConfigChannel+0x43a>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e003      	b.n	8002dea <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002de2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d106      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2103      	movs	r1, #3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fb54 	bl	80024a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fc47 	bl	8002694 <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 813f 	bne.w	800308c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f7ff fbc8 	bl	80025b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a8e      	ldr	r2, [pc, #568]	@ (8003060 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	f040 8130 	bne.w	800308c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x4a4>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e019      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x4d8>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002e70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2b09      	cmp	r3, #9
 8002e80:	bf94      	ite	ls
 8002e82:	2301      	movls	r3, #1
 8002e84:	2300      	movhi	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d079      	beq.n	8002f80 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d107      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x4f8>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	069b      	lsls	r3, r3, #26
 8002ea2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ea6:	e015      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x524>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e003      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x544>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	e017      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x574>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f04:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e003      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	ea42 0103 	orr.w	r1, r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x59a>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	051b      	lsls	r3, r3, #20
 8002f48:	e018      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x5cc>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	e080      	b.n	8003082 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x5ec>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	069b      	lsls	r3, r3, #26
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f9a:	e015      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x618>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e003      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x638>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	e017      	b.n	8003018 <HAL_ADC_ConfigChannel+0x668>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003000:	2320      	movs	r3, #32
 8003002:	e003      	b.n	800300c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	ea42 0103 	orr.w	r1, r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x694>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	3b1e      	subs	r3, #30
 800303c:	051b      	lsls	r3, r3, #20
 800303e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003042:	e01d      	b.n	8003080 <HAL_ADC_ConfigChannel+0x6d0>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	60fb      	str	r3, [r7, #12]
  return result;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d103      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e005      	b.n	800306c <HAL_ADC_ConfigChannel+0x6bc>
 8003060:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	3b1e      	subs	r3, #30
 800307a:	051b      	lsls	r3, r3, #20
 800307c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003080:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003086:	4619      	mov	r1, r3
 8003088:	f7ff fa66 	bl	8002558 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b44      	ldr	r3, [pc, #272]	@ (80031a4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d07a      	beq.n	800318e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003098:	4843      	ldr	r0, [pc, #268]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7f8>)
 800309a:	f7ff f9bb 	bl	8002414 <LL_ADC_GetCommonPathInternalCh>
 800309e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a41      	ldr	r2, [pc, #260]	@ (80031ac <HAL_ADC_ConfigChannel+0x7fc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d12c      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d126      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a3c      	ldr	r2, [pc, #240]	@ (80031b0 <HAL_ADC_ConfigChannel+0x800>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x71c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	@ (80031b4 <HAL_ADC_ConfigChannel+0x804>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d15d      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030d4:	4619      	mov	r1, r3
 80030d6:	4834      	ldr	r0, [pc, #208]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7f8>)
 80030d8:	f7ff f989 	bl	80023ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b36      	ldr	r3, [pc, #216]	@ (80031b8 <HAL_ADC_ConfigChannel+0x808>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a36      	ldr	r2, [pc, #216]	@ (80031bc <HAL_ADC_ConfigChannel+0x80c>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003104:	e040      	b.n	8003188 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2d      	ldr	r2, [pc, #180]	@ (80031c0 <HAL_ADC_ConfigChannel+0x810>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d118      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d112      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a23      	ldr	r2, [pc, #140]	@ (80031b0 <HAL_ADC_ConfigChannel+0x800>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x780>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <HAL_ADC_ConfigChannel+0x804>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d12d      	bne.n	800318c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003134:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003138:	4619      	mov	r1, r3
 800313a:	481b      	ldr	r0, [pc, #108]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7f8>)
 800313c:	f7ff f957 	bl	80023ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003140:	e024      	b.n	800318c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_ADC_ConfigChannel+0x814>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d120      	bne.n	800318e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800314c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11a      	bne.n	800318e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <HAL_ADC_ConfigChannel+0x800>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d115      	bne.n	800318e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003166:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800316a:	4619      	mov	r1, r3
 800316c:	480e      	ldr	r0, [pc, #56]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7f8>)
 800316e:	f7ff f93e 	bl	80023ee <LL_ADC_SetCommonPathInternalCh>
 8003172:	e00c      	b.n	800318e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003186:	e002      	b.n	800318e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003196:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800319a:	4618      	mov	r0, r3
 800319c:	37d8      	adds	r7, #216	@ 0xd8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	80080000 	.word	0x80080000
 80031a8:	50040300 	.word	0x50040300
 80031ac:	c7520000 	.word	0xc7520000
 80031b0:	50040000 	.word	0x50040000
 80031b4:	50040200 	.word	0x50040200
 80031b8:	20000000 	.word	0x20000000
 80031bc:	053e2d63 	.word	0x053e2d63
 80031c0:	cb840000 	.word	0xcb840000
 80031c4:	80000001 	.word	0x80000001

080031c8 <LL_ADC_IsEnabled>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <LL_ADC_IsEnabled+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_IsEnabled+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_IsConversionOngoing>:
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d101      	bne.n	8003206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b0a1      	sub	sp, #132	@ 0x84
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e093      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800323a:	2300      	movs	r3, #0
 800323c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800323e:	2300      	movs	r3, #0
 8003240:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a47      	ldr	r2, [pc, #284]	@ (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e001      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e072      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ffb9 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 800327c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ffb3 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d154      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800328e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003290:	2b00      	cmp	r3, #0
 8003292:	d151      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003294:	4b35      	ldr	r3, [pc, #212]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003296:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02c      	beq.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032b2:	035b      	lsls	r3, r3, #13
 80032b4:	430b      	orrs	r3, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032bc:	4829      	ldr	r0, [pc, #164]	@ (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032be:	f7ff ff83 	bl	80031c8 <LL_ADC_IsEnabled>
 80032c2:	4604      	mov	r4, r0
 80032c4:	4828      	ldr	r0, [pc, #160]	@ (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032c6:	f7ff ff7f 	bl	80031c8 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	431c      	orrs	r4, r3
 80032ce:	4828      	ldr	r0, [pc, #160]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032d0:	f7ff ff7a 	bl	80031c8 <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4323      	orrs	r3, r4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d137      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032e4:	f023 030f 	bic.w	r3, r3, #15
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	6811      	ldr	r1, [r2, #0]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f8:	e028      	b.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003304:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003306:	4817      	ldr	r0, [pc, #92]	@ (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003308:	f7ff ff5e 	bl	80031c8 <LL_ADC_IsEnabled>
 800330c:	4604      	mov	r4, r0
 800330e:	4816      	ldr	r0, [pc, #88]	@ (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003310:	f7ff ff5a 	bl	80031c8 <LL_ADC_IsEnabled>
 8003314:	4603      	mov	r3, r0
 8003316:	431c      	orrs	r4, r3
 8003318:	4815      	ldr	r0, [pc, #84]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800331a:	f7ff ff55 	bl	80031c8 <LL_ADC_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	4323      	orrs	r3, r4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d112      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800332e:	f023 030f 	bic.w	r3, r3, #15
 8003332:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003334:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003336:	e009      	b.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800334a:	e000      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800334c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003356:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800335a:	4618      	mov	r0, r3
 800335c:	3784      	adds	r7, #132	@ 0x84
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}
 8003362:	bf00      	nop
 8003364:	50040000 	.word	0x50040000
 8003368:	50040100 	.word	0x50040100
 800336c:	50040300 	.word	0x50040300
 8003370:	50040200 	.word	0x50040200

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	@ (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	@ (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e075      	b.n	8003696 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe f808 	bl	80015d4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035da:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_DCMI_Init+0x108>)
 80035f6:	400b      	ands	r3, r1
 80035f8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800360e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800361a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003626:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003632:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800363e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d112      	bne.n	8003676 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7f1b      	ldrb	r3, [r3, #28]
 8003654:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7f5b      	ldrb	r3, [r3, #29]
 800365a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800365c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7f9b      	ldrb	r3, [r3, #30]
 8003662:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003664:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7fdb      	ldrb	r3, [r3, #31]
 800366c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003672:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003674:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 021f 	orr.w	r2, r2, #31
 8003684:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	ffe0f007 	.word	0xffe0f007

080036a4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0ac      	b.n	8003810 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f8b2 	bl	8003824 <DFSDM_GetChannelFromInstance>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4a55      	ldr	r2, [pc, #340]	@ (8003818 <HAL_DFSDM_ChannelInit+0x174>)
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e09f      	b.n	8003810 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fd ffff 	bl	80016d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80036d6:	4b51      	ldr	r3, [pc, #324]	@ (800381c <HAL_DFSDM_ChannelInit+0x178>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a4f      	ldr	r2, [pc, #316]	@ (800381c <HAL_DFSDM_ChannelInit+0x178>)
 80036de:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80036e0:	4b4e      	ldr	r3, [pc, #312]	@ (800381c <HAL_DFSDM_ChannelInit+0x178>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d125      	bne.n	8003734 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80036e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 80036ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036f2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80036f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4948      	ldr	r1, [pc, #288]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003702:	4b47      	ldr	r3, [pc, #284]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a46      	ldr	r2, [pc, #280]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 8003708:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800370c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	791b      	ldrb	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003716:	4b42      	ldr	r3, [pc, #264]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	493f      	ldr	r1, [pc, #252]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003728:	4b3d      	ldr	r3, [pc, #244]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3c      	ldr	r2, [pc, #240]	@ (8003820 <HAL_DFSDM_ChannelInit+0x17c>)
 800372e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003732:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003742:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003752:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003758:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 020f 	bic.w	r2, r2, #15
 8003770:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003798:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f002 0207 	and.w	r2, r2, #7
 80037c4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037f0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f810 	bl	8003824 <DFSDM_GetChannelFromInstance>
 8003804:	4602      	mov	r2, r0
 8003806:	4904      	ldr	r1, [pc, #16]	@ (8003818 <HAL_DFSDM_ChannelInit+0x174>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	2000092c 	.word	0x2000092c
 800381c:	20000928 	.word	0x20000928
 8003820:	40016000 	.word	0x40016000

08003824 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d102      	bne.n	800383a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e02b      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a19      	ldr	r2, [pc, #100]	@ (80038a4 <DFSDM_GetChannelFromInstance+0x80>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d102      	bne.n	8003848 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e024      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <DFSDM_GetChannelFromInstance+0x84>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d102      	bne.n	8003856 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003850:	2302      	movs	r3, #2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e01d      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a14      	ldr	r2, [pc, #80]	@ (80038ac <DFSDM_GetChannelFromInstance+0x88>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d102      	bne.n	8003864 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800385e:	2304      	movs	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e016      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a12      	ldr	r2, [pc, #72]	@ (80038b0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d102      	bne.n	8003872 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800386c:	2305      	movs	r3, #5
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e00f      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a0f      	ldr	r2, [pc, #60]	@ (80038b4 <DFSDM_GetChannelFromInstance+0x90>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d102      	bne.n	8003880 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800387a:	2306      	movs	r3, #6
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e008      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <DFSDM_GetChannelFromInstance+0x94>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d102      	bne.n	800388e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003888:	2307      	movs	r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e001      	b.n	8003892 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800388e:	2303      	movs	r3, #3
 8003890:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40016000 	.word	0x40016000
 80038a4:	40016020 	.word	0x40016020
 80038a8:	40016040 	.word	0x40016040
 80038ac:	40016080 	.word	0x40016080
 80038b0:	400160a0 	.word	0x400160a0
 80038b4:	400160c0 	.word	0x400160c0
 80038b8:	400160e0 	.word	0x400160e0

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ca:	e166      	b.n	8003b9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8158 	beq.w	8003b94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d005      	beq.n	80038fc <HAL_GPIO_Init+0x40>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d130      	bne.n	800395e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003932:	2201      	movs	r2, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0201 	and.w	r2, r3, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d017      	beq.n	800399a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d123      	bne.n	80039ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	6939      	ldr	r1, [r7, #16]
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80b2 	beq.w	8003b94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a30:	4b61      	ldr	r3, [pc, #388]	@ (8003bb8 <HAL_GPIO_Init+0x2fc>)
 8003a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a34:	4a60      	ldr	r2, [pc, #384]	@ (8003bb8 <HAL_GPIO_Init+0x2fc>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb8 <HAL_GPIO_Init+0x2fc>)
 8003a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a48:	4a5c      	ldr	r2, [pc, #368]	@ (8003bbc <HAL_GPIO_Init+0x300>)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	220f      	movs	r2, #15
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a72:	d02b      	beq.n	8003acc <HAL_GPIO_Init+0x210>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a52      	ldr	r2, [pc, #328]	@ (8003bc0 <HAL_GPIO_Init+0x304>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d025      	beq.n	8003ac8 <HAL_GPIO_Init+0x20c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a51      	ldr	r2, [pc, #324]	@ (8003bc4 <HAL_GPIO_Init+0x308>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d01f      	beq.n	8003ac4 <HAL_GPIO_Init+0x208>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a50      	ldr	r2, [pc, #320]	@ (8003bc8 <HAL_GPIO_Init+0x30c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d019      	beq.n	8003ac0 <HAL_GPIO_Init+0x204>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a4f      	ldr	r2, [pc, #316]	@ (8003bcc <HAL_GPIO_Init+0x310>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_GPIO_Init+0x200>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a4e      	ldr	r2, [pc, #312]	@ (8003bd0 <HAL_GPIO_Init+0x314>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_GPIO_Init+0x1fc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd4 <HAL_GPIO_Init+0x318>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <HAL_GPIO_Init+0x1f8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd8 <HAL_GPIO_Init+0x31c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_GPIO_Init+0x1f4>
 8003aac:	2307      	movs	r3, #7
 8003aae:	e00e      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	e00c      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003ab4:	2306      	movs	r3, #6
 8003ab6:	e00a      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003ab8:	2305      	movs	r3, #5
 8003aba:	e008      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003abc:	2304      	movs	r3, #4
 8003abe:	e006      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e004      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e002      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <HAL_GPIO_Init+0x212>
 8003acc:	2300      	movs	r3, #0
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	f002 0203 	and.w	r2, r2, #3
 8003ad4:	0092      	lsls	r2, r2, #2
 8003ad6:	4093      	lsls	r3, r2
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ade:	4937      	ldr	r1, [pc, #220]	@ (8003bbc <HAL_GPIO_Init+0x300>)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aec:	4b3b      	ldr	r3, [pc, #236]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b10:	4a32      	ldr	r2, [pc, #200]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b3a:	4a28      	ldr	r2, [pc, #160]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b64:	4a1d      	ldr	r2, [pc, #116]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b8e:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <HAL_GPIO_Init+0x320>)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f ae91 	bne.w	80038cc <HAL_GPIO_Init+0x10>
  }
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	48000400 	.word	0x48000400
 8003bc4:	48000800 	.word	0x48000800
 8003bc8:	48000c00 	.word	0x48000c00
 8003bcc:	48001000 	.word	0x48001000
 8003bd0:	48001400 	.word	0x48001400
 8003bd4:	48001800 	.word	0x48001800
 8003bd8:	48001c00 	.word	0x48001c00
 8003bdc:	40010400 	.word	0x40010400

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bfc:	e002      	b.n	8003c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e08d      	b.n	8003d3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fdd4 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	@ 0x24
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	e006      	b.n	8003c98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d108      	bne.n	8003cb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	e007      	b.n	8003cc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69d9      	ldr	r1, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d138      	bne.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e032      	b.n	8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2224      	movs	r2, #36	@ 0x24
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d139      	bne.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e033      	b.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	@ 0x24
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e101      	b.n	800408a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f009 fc9e 	bl	800d7dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f006 f955 	bl	800a162 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7c1a      	ldrb	r2, [r3, #16]
 8003ec0:	f88d 2000 	strb.w	r2, [sp]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec8:	f006 f870 	bl	8009fac <USB_CoreInit>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0d5      	b.n	800408a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f006 f94d 	bl	800a184 <USB_SetCurrentMode>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0c6      	b.n	800408a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e04a      	b.n	8003f98 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	3315      	adds	r3, #21
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3314      	adds	r3, #20
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	b298      	uxth	r0, r3
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	332e      	adds	r3, #46	@ 0x2e
 8003f3e:	4602      	mov	r2, r0
 8003f40:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3318      	adds	r3, #24
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f56:	7bfa      	ldrb	r2, [r7, #15]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	331c      	adds	r3, #28
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3320      	adds	r3, #32
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3324      	adds	r3, #36	@ 0x24
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3301      	adds	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3af      	bcc.n	8003f02 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	e044      	b.n	8004032 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	3301      	adds	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	791b      	ldrb	r3, [r3, #4]
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	429a      	cmp	r2, r3
 800403a:	d3b5      	bcc.n	8003fa8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7c1a      	ldrb	r2, [r3, #16]
 8004044:	f88d 2000 	strb.w	r2, [sp]
 8004048:	3304      	adds	r3, #4
 800404a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800404c:	f006 f8e6 	bl	800a21c <USB_DevInit>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e013      	b.n	800408a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7b1b      	ldrb	r3, [r3, #12]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d102      	bne.n	800407e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f001 f86d 	bl	8005158 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f007 f89d 	bl	800b1c2 <USB_DevDisconnect>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_PCD_Start+0x1c>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e01c      	b.n	80040e8 <HAL_PCD_Start+0x56>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7b5b      	ldrb	r3, [r3, #13]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f006 f836 	bl	800a140 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f007 f851 	bl	800b180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b08d      	sub	sp, #52	@ 0x34
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f007 f90f 	bl	800b32a <USB_GetMode>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 8481 	bne.w	8004a16 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f007 f873 	bl	800b204 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8477 	beq.w	8004a14 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f007 f860 	bl	800b204 <USB_ReadInterrupts>
 8004144:	4603      	mov	r3, r0
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d107      	bne.n	800415e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f002 0202 	and.w	r2, r2, #2
 800415c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f007 f84e 	bl	800b204 <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b10      	cmp	r3, #16
 8004170:	d161      	bne.n	8004236 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0210 	bic.w	r2, r2, #16
 8004180:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80041a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ac:	d124      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d035      	beq.n	8004226 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	6a38      	ldr	r0, [r7, #32]
 80041ce:	f006 fe85 	bl	800aedc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041de:	441a      	add	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f0:	441a      	add	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	e016      	b.n	8004226 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80041fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004202:	d110      	bne.n	8004226 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800420a:	2208      	movs	r2, #8
 800420c:	4619      	mov	r1, r3
 800420e:	6a38      	ldr	r0, [r7, #32]
 8004210:	f006 fe64 	bl	800aedc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004220:	441a      	add	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0210 	orr.w	r2, r2, #16
 8004234:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f006 ffe2 	bl	800b204 <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004246:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800424a:	f040 80a7 	bne.w	800439c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f006 ffe7 	bl	800b22a <USB_ReadDevAllOutEpInterrupt>
 800425c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800425e:	e099      	b.n	8004394 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 808e 	beq.w	8004388 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f007 f80b 	bl	800b292 <USB_ReadDevOutEPInterrupt>
 800427c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00c      	beq.n	80042a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	2301      	movs	r3, #1
 8004298:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800429a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fe81 	bl	8004fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00c      	beq.n	80042c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	2308      	movs	r3, #8
 80042bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 febd 	bl	8005040 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042dc:	461a      	mov	r2, r3
 80042de:	2310      	movs	r3, #16
 80042e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d030      	beq.n	800434e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f4:	2b80      	cmp	r3, #128	@ 0x80
 80042f6:	d109      	bne.n	800430c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800430a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800430c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	78db      	ldrb	r3, [r3, #3]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d108      	bne.n	800433c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f009 fb78 	bl	800da2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	2302      	movs	r3, #2
 800434c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	2320      	movs	r3, #32
 8004368:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004386:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	3301      	adds	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	f47f af62 	bne.w	8004260 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f006 ff2f 	bl	800b204 <USB_ReadInterrupts>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043b0:	f040 80a4 	bne.w	80044fc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f006 ff50 	bl	800b25e <USB_ReadDevAllInEpInterrupt>
 80043be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80043c4:	e096      	b.n	80044f4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 808b 	beq.w	80044e8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f006 ff76 	bl	800b2ce <USB_ReadDevInEPInterrupt>
 80043e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	2201      	movs	r2, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	43db      	mvns	r3, r3
 8004408:	69f9      	ldr	r1, [r7, #28]
 800440a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800440e:	4013      	ands	r3, r2
 8004410:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441e:	461a      	mov	r2, r3
 8004420:	2301      	movs	r3, #1
 8004422:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f009 fa69 	bl	800d902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004446:	461a      	mov	r2, r3
 8004448:	2308      	movs	r3, #8
 800444a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004462:	461a      	mov	r2, r3
 8004464:	2310      	movs	r3, #16
 8004466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	2340      	movs	r3, #64	@ 0x40
 8004482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d023      	beq.n	80044d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800448e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004490:	6a38      	ldr	r0, [r7, #32]
 8004492:	f006 f80b 	bl	800a4ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	3310      	adds	r3, #16
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	3304      	adds	r3, #4
 80044a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	78db      	ldrb	r3, [r3, #3]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d108      	bne.n	80044c4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f009 fac6 	bl	800da50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	2302      	movs	r3, #2
 80044d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fcd6 	bl	8004e94 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f af65 	bne.w	80043c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f006 fe7f 	bl	800b204 <USB_ReadInterrupts>
 8004506:	4603      	mov	r3, r0
 8004508:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800450c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004510:	d122      	bne.n	8004558 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800452c:	2b01      	cmp	r3, #1
 800452e:	d108      	bne.n	8004542 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004538:	2100      	movs	r1, #0
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f009 fcfa 	bl	800df34 <HAL_PCDEx_LPM_Callback>
 8004540:	e002      	b.n	8004548 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f009 fa4a 	bl	800d9dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f006 fe51 	bl	800b204 <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800456c:	d112      	bne.n	8004594 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d102      	bne.n	8004584 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f009 fa06 	bl	800d990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004592:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f006 fe33 	bl	800b204 <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045a8:	d121      	bne.n	80045ee <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80045b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d111      	bne.n	80045e8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	f003 020f 	and.w	r2, r3, #15
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045de:	2101      	movs	r1, #1
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f009 fca7 	bl	800df34 <HAL_PCDEx_LPM_Callback>
 80045e6:	e002      	b.n	80045ee <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f009 f9d1 	bl	800d990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f006 fe06 	bl	800b204 <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004602:	f040 80b6 	bne.w	8004772 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2110      	movs	r1, #16
 8004620:	4618      	mov	r0, r3
 8004622:	f005 ff43 	bl	800a4ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462a:	e046      	b.n	80046ba <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004638:	461a      	mov	r2, r3
 800463a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800463e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	440a      	add	r2, r1
 8004656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800465a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800465e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466c:	461a      	mov	r2, r3
 800466e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004672:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800468e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004692:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b6:	3301      	adds	r3, #1
 80046b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	791b      	ldrb	r3, [r3, #4]
 80046be:	461a      	mov	r2, r3
 80046c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d3b2      	bcc.n	800462c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80046d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7bdb      	ldrb	r3, [r3, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f2:	f043 030b 	orr.w	r3, r3, #11
 80046f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004708:	f043 030b 	orr.w	r3, r3, #11
 800470c:	6453      	str	r3, [r2, #68]	@ 0x44
 800470e:	e015      	b.n	800473c <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800471e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004722:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004726:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004736:	f043 030b 	orr.w	r3, r3, #11
 800473a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800474a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800474e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f006 fe15 	bl	800b38c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f006 fd44 	bl	800b204 <USB_ReadInterrupts>
 800477c:	4603      	mov	r3, r0
 800477e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004786:	d123      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f006 fdda 	bl	800b346 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f005 ff01 	bl	800a59e <USB_GetDevSpeed>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	f001 fbf6 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 80047ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047b2:	461a      	mov	r2, r3
 80047b4:	4620      	mov	r0, r4
 80047b6:	f005 fc27 	bl	800a008 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f009 f8c9 	bl	800d952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80047ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f006 fd15 	bl	800b204 <USB_ReadInterrupts>
 80047da:	4603      	mov	r3, r0
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d10a      	bne.n	80047fa <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f009 f8a6 	bl	800d936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f002 0208 	and.w	r2, r2, #8
 80047f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f006 fd00 	bl	800b204 <USB_ReadInterrupts>
 8004804:	4603      	mov	r3, r0
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b80      	cmp	r3, #128	@ 0x80
 800480c:	d123      	bne.n	8004856 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481a:	2301      	movs	r3, #1
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
 800481e:	e014      	b.n	800484a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 faf7 	bl	8004e32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	3301      	adds	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	791b      	ldrb	r3, [r3, #4]
 800484e:	461a      	mov	r2, r3
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	4293      	cmp	r3, r2
 8004854:	d3e4      	bcc.n	8004820 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f006 fcd2 	bl	800b204 <USB_ReadInterrupts>
 8004860:	4603      	mov	r3, r0
 8004862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800486a:	d13c      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800486c:	2301      	movs	r3, #1
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	e02b      	b.n	80048ca <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3318      	adds	r3, #24
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d115      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004898:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800489a:	2b00      	cmp	r3, #0
 800489c:	da12      	bge.n	80048c4 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3317      	adds	r3, #23
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fab7 	bl	8004e32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	791b      	ldrb	r3, [r3, #4]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d3cd      	bcc.n	8004872 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f006 fc8a 	bl	800b204 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048fa:	d156      	bne.n	80049aa <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048fc:	2301      	movs	r3, #1
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004900:	e045      	b.n	800498e <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d12e      	bne.n	8004988 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800492a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800492c:	2b00      	cmp	r3, #0
 800492e:	da2b      	bge.n	8004988 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800493c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004940:	429a      	cmp	r2, r3
 8004942:	d121      	bne.n	8004988 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004980:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004984:	6053      	str	r3, [r2, #4]
            break;
 8004986:	e008      	b.n	800499a <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	3301      	adds	r3, #1
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	791b      	ldrb	r3, [r3, #4]
 8004992:	461a      	mov	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	4293      	cmp	r3, r2
 8004998:	d3b3      	bcc.n	8004902 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80049a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f006 fc28 	bl	800b204 <USB_ReadInterrupts>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049be:	d10a      	bne.n	80049d6 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f009 f857 	bl	800da74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f006 fc12 	bl	800b204 <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d115      	bne.n	8004a16 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f009 f847 	bl	800da90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	e000      	b.n	8004a16 <HAL_PCD_IRQHandler+0x926>
      return;
 8004a14:	bf00      	nop
    }
  }
}
 8004a16:	3734      	adds	r7, #52	@ 0x34
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}

08004a1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_PCD_SetAddress+0x1a>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e012      	b.n	8004a5c <HAL_PCD_SetAddress+0x40>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f006 fb71 	bl	800b134 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	70fb      	strb	r3, [r7, #3]
 8004a76:	460b      	mov	r3, r1
 8004a78:	803b      	strh	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da0f      	bge.n	8004aaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 020f 	and.w	r2, r3, #15
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	3310      	adds	r3, #16
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	705a      	strb	r2, [r3, #1]
 8004aa8:	e00f      	b.n	8004aca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ad6:	883b      	ldrh	r3, [r7, #0]
 8004ad8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	78ba      	ldrb	r2, [r7, #2]
 8004ae4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004af8:	78bb      	ldrb	r3, [r7, #2]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d102      	bne.n	8004b04 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_PCD_EP_Open+0xae>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e00e      	b.n	8004b30 <HAL_PCD_EP_Open+0xcc>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f005 fd5b 	bl	800a5dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da0f      	bge.n	8004b6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	f003 020f 	and.w	r2, r3, #15
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	3310      	adds	r3, #16
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4413      	add	r3, r2
 8004b60:	3304      	adds	r3, #4
 8004b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	705a      	strb	r2, [r3, #1]
 8004b6a:	e00f      	b.n	8004b8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	3304      	adds	r3, #4
 8004b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_PCD_EP_Close+0x6e>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e00e      	b.n	8004bc4 <HAL_PCD_EP_Close+0x8c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f005 fd99 	bl	800a6ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 020f 	and.w	r2, r3, #15
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6979      	ldr	r1, [r7, #20]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f005 fe3f 	bl	800a8a4 <USB_EPStartXfer>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c70:	7afb      	ldrb	r3, [r7, #11]
 8004c72:	f003 020f 	and.w	r2, r3, #15
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	3310      	adds	r3, #16
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f005 fdf6 	bl	800a8a4 <USB_EPStartXfer>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	7912      	ldrb	r2, [r2, #4]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e04e      	b.n	8004d7e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da0f      	bge.n	8004d08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 020f 	and.w	r2, r3, #15
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	3310      	adds	r3, #16
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	705a      	strb	r2, [r3, #1]
 8004d06:	e00d      	b.n	8004d24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_PCD_EP_SetStall+0x82>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e01c      	b.n	8004d7e <HAL_PCD_EP_SetStall+0xbc>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68f9      	ldr	r1, [r7, #12]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f006 f91a 	bl	800af8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f006 fb0c 	bl	800b38c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	7912      	ldrb	r2, [r2, #4]
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e042      	b.n	8004e2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0f      	bge.n	8004dcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 020f 	and.w	r2, r3, #15
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3310      	adds	r3, #16
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	705a      	strb	r2, [r3, #1]
 8004dca:	e00f      	b.n	8004dec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	3304      	adds	r3, #4
 8004de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_PCD_EP_ClrStall+0x86>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e00e      	b.n	8004e2a <HAL_PCD_EP_ClrStall+0xa4>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68f9      	ldr	r1, [r7, #12]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f006 f924 	bl	800b068 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da0c      	bge.n	8004e60 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	3310      	adds	r3, #16
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e00c      	b.n	8004e7a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f005 ff47 	bl	800ad14 <USB_EPStopXfer>
 8004e86:	4603      	mov	r3, r0
 8004e88:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	3310      	adds	r3, #16
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3304      	adds	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d901      	bls.n	8004ecc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e067      	b.n	8004f9c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d902      	bls.n	8004ee8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3303      	adds	r3, #3
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ef0:	e026      	b.n	8004f40 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d902      	bls.n	8004f0e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3303      	adds	r3, #3
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68d9      	ldr	r1, [r3, #12]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	6978      	ldr	r0, [r7, #20]
 8004f24:	f005 ffa0 	bl	800ae68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	441a      	add	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d809      	bhi.n	8004f6a <PCD_WriteEmptyTxFifo+0xd6>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d203      	bcs.n	8004f6a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1c3      	bne.n	8004ef2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d811      	bhi.n	8004f9a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	6939      	ldr	r1, [r7, #16]
 8004f92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f96:	4013      	ands	r3, r2
 8004f98:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	333c      	adds	r3, #60	@ 0x3c
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	@ (800503c <PCD_EP_OutXfrComplete_int+0x98>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d124      	bne.n	8005024 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff6:	6093      	str	r3, [r2, #8]
 8004ff8:	e01a      	b.n	8005030 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	2320      	movs	r3, #32
 8005014:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f008 fc55 	bl	800d8cc <HAL_PCD_DataOutStageCallback>
 8005022:	e005      	b.n	8005030 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f008 fc4e 	bl	800d8cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	4f54310a 	.word	0x4f54310a

08005040 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	333c      	adds	r3, #60	@ 0x3c
 8005058:	3304      	adds	r3, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <PCD_EP_OutSetupPacket_int+0x64>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d90e      	bls.n	8005094 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508c:	461a      	mov	r2, r3
 800508e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005092:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f008 fc07 	bl	800d8a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	4f54300a 	.word	0x4f54300a

080050a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
 80050b4:	4613      	mov	r3, r2
 80050b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050c6:	883b      	ldrh	r3, [r7, #0]
 80050c8:	0419      	lsls	r1, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80050d4:	e028      	b.n	8005128 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e00d      	b.n	8005106 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3340      	adds	r3, #64	@ 0x40
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	3301      	adds	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	3b01      	subs	r3, #1
 800510c:	429a      	cmp	r2, r3
 800510e:	d3ec      	bcc.n	80050ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005110:	883b      	ldrh	r3, [r7, #0]
 8005112:	0418      	lsls	r0, r3, #16
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	3b01      	subs	r3, #1
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4302      	orrs	r2, r0
 8005120:	3340      	adds	r3, #64	@ 0x40
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	460b      	mov	r3, r1
 8005140:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	887a      	ldrh	r2, [r7, #2]
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800518a:	f043 0303 	orr.w	r3, r3, #3
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a4:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a04      	ldr	r2, [pc, #16]	@ (80051bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40007000 	.word	0x40007000

080051c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051c4:	4b04      	ldr	r3, [pc, #16]	@ (80051d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40007000 	.word	0x40007000

080051dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ea:	d130      	bne.n	800524e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ec:	4b23      	ldr	r3, [pc, #140]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f8:	d038      	beq.n	800526c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051fa:	4b20      	ldr	r3, [pc, #128]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005202:	4a1e      	ldr	r2, [pc, #120]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005204:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005208:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800520a:	4b1d      	ldr	r3, [pc, #116]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2232      	movs	r2, #50	@ 0x32
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	4a1b      	ldr	r2, [pc, #108]	@ (8005284 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0c9b      	lsrs	r3, r3, #18
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005220:	e002      	b.n	8005228 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b01      	subs	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005228:	4b14      	ldr	r3, [pc, #80]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005234:	d102      	bne.n	800523c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f2      	bne.n	8005222 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800523c:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005248:	d110      	bne.n	800526c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e00f      	b.n	800526e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800524e:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525a:	d007      	beq.n	800526c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005264:	4a05      	ldr	r2, [pc, #20]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800526a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40007000 	.word	0x40007000
 8005280:	20000000 	.word	0x20000000
 8005284:	431bde83 	.word	0x431bde83

08005288 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4a04      	ldr	r2, [pc, #16]	@ (80052a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005296:	6053      	str	r3, [r2, #4]
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40007000 	.word	0x40007000

080052a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a04      	ldr	r2, [pc, #16]	@ (80052c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052b6:	6053      	str	r3, [r2, #4]
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40007000 	.word	0x40007000

080052c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80052d0:	f7fd f84a 	bl	8002368 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e069      	b.n	80053b4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10b      	bne.n	8005304 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fc fc6b 	bl	8001bd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80052fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f85e 	bl	80053c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	3b01      	subs	r3, #1
 8005314:	021a      	lsls	r2, r3, #8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	2120      	movs	r1, #32
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f856 	bl	80053dc <QSPI_WaitFlagStateUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005334:	7afb      	ldrb	r3, [r7, #11]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d137      	bne.n	80053aa <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005344:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6852      	ldr	r2, [r2, #4]
 800534c:	0611      	lsls	r1, r2, #24
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	4311      	orrs	r1, r2
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	69d2      	ldr	r2, [r2, #28]
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6a12      	ldr	r2, [r2, #32]
 800535e:	4311      	orrs	r1, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	430b      	orrs	r3, r1
 8005366:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	4b13      	ldr	r3, [pc, #76]	@ (80053bc <HAL_QSPI_Init+0xf4>)
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6912      	ldr	r2, [r2, #16]
 8005376:	0411      	lsls	r1, r2, #16
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6952      	ldr	r2, [r2, #20]
 800537c:	4311      	orrs	r1, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6992      	ldr	r2, [r2, #24]
 8005382:	4311      	orrs	r1, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	430b      	orrs	r3, r1
 800538a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80053b2:	7afb      	ldrb	r3, [r7, #11]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	ffe0f8fe 	.word	0xffe0f8fe

080053c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053ec:	e01a      	b.n	8005424 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d016      	beq.n	8005424 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fc ffb7 	bl	8002368 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2204      	movs	r2, #4
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e00e      	b.n	8005442 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf14      	ite	ne
 8005432:	2301      	movne	r3, #1
 8005434:	2300      	moveq	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	429a      	cmp	r2, r3
 800543e:	d1d6      	bne.n	80053ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f000 bc08 	b.w	8005c70 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005460:	4b96      	ldr	r3, [pc, #600]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800546a:	4b94      	ldr	r3, [pc, #592]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80e4 	beq.w	800564a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_RCC_OscConfig+0x4c>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b0c      	cmp	r3, #12
 800548c:	f040 808b 	bne.w	80055a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b01      	cmp	r3, #1
 8005494:	f040 8087 	bne.w	80055a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005498:	4b88      	ldr	r3, [pc, #544]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_OscConfig+0x64>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e3df      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	4b81      	ldr	r3, [pc, #516]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_RCC_OscConfig+0x7e>
 80054c0:	4b7e      	ldr	r3, [pc, #504]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054c8:	e005      	b.n	80054d6 <HAL_RCC_OscConfig+0x8a>
 80054ca:	4b7c      	ldr	r3, [pc, #496]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80054cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d223      	bcs.n	8005522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd92 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e3c0      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ee:	4b73      	ldr	r3, [pc, #460]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a72      	ldr	r2, [pc, #456]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	4b70      	ldr	r3, [pc, #448]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	496d      	ldr	r1, [pc, #436]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550c:	4b6b      	ldr	r3, [pc, #428]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	4968      	ldr	r1, [pc, #416]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800551c:	4313      	orrs	r3, r2
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	e025      	b.n	800556e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005522:	4b66      	ldr	r3, [pc, #408]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a65      	ldr	r2, [pc, #404]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005528:	f043 0308 	orr.w	r3, r3, #8
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b63      	ldr	r3, [pc, #396]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	4960      	ldr	r1, [pc, #384]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800553c:	4313      	orrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005540:	4b5e      	ldr	r3, [pc, #376]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	495b      	ldr	r1, [pc, #364]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fd52 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e380      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556e:	f000 fc87 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005572:	4602      	mov	r2, r0
 8005574:	4b51      	ldr	r3, [pc, #324]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	4950      	ldr	r1, [pc, #320]	@ (80056c0 <HAL_RCC_OscConfig+0x274>)
 8005580:	5ccb      	ldrb	r3, [r1, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	4a4e      	ldr	r2, [pc, #312]	@ (80056c4 <HAL_RCC_OscConfig+0x278>)
 800558c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800558e:	4b4e      	ldr	r3, [pc, #312]	@ (80056c8 <HAL_RCC_OscConfig+0x27c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fc fe98 	bl	80022c8 <HAL_InitTick>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d052      	beq.n	8005648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	e364      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d032      	beq.n	8005614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055ae:	4b43      	ldr	r3, [pc, #268]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a42      	ldr	r2, [pc, #264]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055ba:	f7fc fed5 	bl	8002368 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055c2:	f7fc fed1 	bl	8002368 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e34d      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d4:	4b39      	ldr	r3, [pc, #228]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055e0:	4b36      	ldr	r3, [pc, #216]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a35      	ldr	r2, [pc, #212]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055e6:	f043 0308 	orr.w	r3, r3, #8
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	4b33      	ldr	r3, [pc, #204]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	4930      	ldr	r1, [pc, #192]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fe:	4b2f      	ldr	r3, [pc, #188]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	492b      	ldr	r1, [pc, #172]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800560e:	4313      	orrs	r3, r2
 8005610:	604b      	str	r3, [r1, #4]
 8005612:	e01a      	b.n	800564a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005614:	4b29      	ldr	r3, [pc, #164]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a28      	ldr	r2, [pc, #160]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005620:	f7fc fea2 	bl	8002368 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005628:	f7fc fe9e 	bl	8002368 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e31a      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800563a:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x1dc>
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d073      	beq.n	800573e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d005      	beq.n	8005668 <HAL_RCC_OscConfig+0x21c>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d10e      	bne.n	8005680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d10b      	bne.n	8005680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005668:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d063      	beq.n	800573c <HAL_RCC_OscConfig+0x2f0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d15f      	bne.n	800573c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e2f7      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005688:	d106      	bne.n	8005698 <HAL_RCC_OscConfig+0x24c>
 800568a:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0b      	ldr	r2, [pc, #44]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e025      	b.n	80056e4 <HAL_RCC_OscConfig+0x298>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056a0:	d114      	bne.n	80056cc <HAL_RCC_OscConfig+0x280>
 80056a2:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80056a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b03      	ldr	r3, [pc, #12]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a02      	ldr	r2, [pc, #8]	@ (80056bc <HAL_RCC_OscConfig+0x270>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e013      	b.n	80056e4 <HAL_RCC_OscConfig+0x298>
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800efac 	.word	0x0800efac
 80056c4:	20000000 	.word	0x20000000
 80056c8:	20000004 	.word	0x20000004
 80056cc:	4ba0      	ldr	r3, [pc, #640]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a9f      	ldr	r2, [pc, #636]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80056d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	4b9d      	ldr	r3, [pc, #628]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a9c      	ldr	r2, [pc, #624]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80056de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d013      	beq.n	8005714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fc fe3c 	bl	8002368 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f4:	f7fc fe38 	bl	8002368 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	@ 0x64
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e2b4      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005706:	4b92      	ldr	r3, [pc, #584]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x2a8>
 8005712:	e014      	b.n	800573e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fc fe28 	bl	8002368 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800571c:	f7fc fe24 	bl	8002368 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	@ 0x64
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e2a0      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800572e:	4b88      	ldr	r3, [pc, #544]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x2d0>
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d060      	beq.n	800580c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d005      	beq.n	800575c <HAL_RCC_OscConfig+0x310>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d119      	bne.n	800578a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d116      	bne.n	800578a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575c:	4b7c      	ldr	r3, [pc, #496]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_OscConfig+0x328>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e27d      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b76      	ldr	r3, [pc, #472]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	4973      	ldr	r1, [pc, #460]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005788:	e040      	b.n	800580c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d023      	beq.n	80057da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005792:	4b6f      	ldr	r3, [pc, #444]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6e      	ldr	r2, [pc, #440]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc fde3 	bl	8002368 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a6:	f7fc fddf 	bl	8002368 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e25b      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b8:	4b65      	ldr	r3, [pc, #404]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c4:	4b62      	ldr	r3, [pc, #392]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	061b      	lsls	r3, r3, #24
 80057d2:	495f      	ldr	r1, [pc, #380]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	e018      	b.n	800580c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057da:	4b5d      	ldr	r3, [pc, #372]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a5c      	ldr	r2, [pc, #368]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80057e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fc fdbf 	bl	8002368 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ee:	f7fc fdbb 	bl	8002368 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e237      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005800:	4b53      	ldr	r3, [pc, #332]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d03c      	beq.n	8005892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01c      	beq.n	800585a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005820:	4b4b      	ldr	r3, [pc, #300]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005826:	4a4a      	ldr	r2, [pc, #296]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fc fd9a 	bl	8002368 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005838:	f7fc fd96 	bl	8002368 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e212      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800584a:	4b41      	ldr	r3, [pc, #260]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ef      	beq.n	8005838 <HAL_RCC_OscConfig+0x3ec>
 8005858:	e01b      	b.n	8005892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585a:	4b3d      	ldr	r3, [pc, #244]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005860:	4a3b      	ldr	r2, [pc, #236]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fc fd7d 	bl	8002368 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005872:	f7fc fd79 	bl	8002368 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e1f5      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005884:	4b32      	ldr	r3, [pc, #200]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1ef      	bne.n	8005872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a6 	beq.w	80059ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	4b27      	ldr	r3, [pc, #156]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b4:	4a26      	ldr	r2, [pc, #152]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80058bc:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c8:	2301      	movs	r3, #1
 80058ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058cc:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <HAL_RCC_OscConfig+0x508>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d118      	bne.n	800590a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <HAL_RCC_OscConfig+0x508>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_RCC_OscConfig+0x508>)
 80058de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e4:	f7fc fd40 	bl	8002368 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fc fd3c 	bl	8002368 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e1b8      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <HAL_RCC_OscConfig+0x508>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d108      	bne.n	8005924 <HAL_RCC_OscConfig+0x4d8>
 8005912:	4b0f      	ldr	r3, [pc, #60]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	4a0d      	ldr	r2, [pc, #52]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005922:	e029      	b.n	8005978 <HAL_RCC_OscConfig+0x52c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b05      	cmp	r3, #5
 800592a:	d115      	bne.n	8005958 <HAL_RCC_OscConfig+0x50c>
 800592c:	4b08      	ldr	r3, [pc, #32]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800593c:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005942:	4a03      	ldr	r2, [pc, #12]	@ (8005950 <HAL_RCC_OscConfig+0x504>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800594c:	e014      	b.n	8005978 <HAL_RCC_OscConfig+0x52c>
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
 8005958:	4b9d      	ldr	r3, [pc, #628]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	4a9c      	ldr	r2, [pc, #624]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005968:	4b99      	ldr	r3, [pc, #612]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596e:	4a98      	ldr	r2, [pc, #608]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005970:	f023 0304 	bic.w	r3, r3, #4
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d016      	beq.n	80059ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fc fcf2 	bl	8002368 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005986:	e00a      	b.n	800599e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005988:	f7fc fcee 	bl	8002368 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e168      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599e:	4b8c      	ldr	r3, [pc, #560]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ed      	beq.n	8005988 <HAL_RCC_OscConfig+0x53c>
 80059ac:	e015      	b.n	80059da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ae:	f7fc fcdb 	bl	8002368 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059b4:	e00a      	b.n	80059cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b6:	f7fc fcd7 	bl	8002368 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e151      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059cc:	4b80      	ldr	r3, [pc, #512]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ed      	bne.n	80059b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059da:	7ffb      	ldrb	r3, [r7, #31]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e4:	4a7a      	ldr	r2, [pc, #488]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d03c      	beq.n	8005a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01c      	beq.n	8005a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a00:	4b73      	ldr	r3, [pc, #460]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a06:	4a72      	ldr	r2, [pc, #456]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a10:	f7fc fcaa 	bl	8002368 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a18:	f7fc fca6 	bl	8002368 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e122      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a2a:	4b69      	ldr	r3, [pc, #420]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0ef      	beq.n	8005a18 <HAL_RCC_OscConfig+0x5cc>
 8005a38:	e01b      	b.n	8005a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a3a:	4b65      	ldr	r3, [pc, #404]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a40:	4a63      	ldr	r2, [pc, #396]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4a:	f7fc fc8d 	bl	8002368 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a52:	f7fc fc89 	bl	8002368 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e105      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a64:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1ef      	bne.n	8005a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80f9 	beq.w	8005c6e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	f040 80cf 	bne.w	8005c24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a86:	4b52      	ldr	r3, [pc, #328]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f003 0203 	and.w	r2, r3, #3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d12c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d123      	bne.n	8005af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d11b      	bne.n	8005af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d113      	bne.n	8005af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d109      	bne.n	8005af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	3b01      	subs	r3, #1
 8005aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d071      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b0c      	cmp	r3, #12
 8005af8:	d068      	beq.n	8005bcc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005afa:	4b35      	ldr	r3, [pc, #212]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b06:	4b32      	ldr	r3, [pc, #200]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0ac      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b16:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b22:	f7fc fc21 	bl	8002368 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fc fc1d 	bl	8002368 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e099      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3c:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <HAL_RCC_OscConfig+0x788>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	0112      	lsls	r2, r2, #4
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b62:	0212      	lsls	r2, r2, #8
 8005b64:	4311      	orrs	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b6a:	0852      	lsrs	r2, r2, #1
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	0552      	lsls	r2, r2, #21
 8005b70:	4311      	orrs	r1, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b76:	0852      	lsrs	r2, r2, #1
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	0652      	lsls	r2, r2, #25
 8005b7c:	4311      	orrs	r1, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b82:	06d2      	lsls	r2, r2, #27
 8005b84:	430a      	orrs	r2, r1
 8005b86:	4912      	ldr	r1, [pc, #72]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b98:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ba4:	f7fc fbe0 	bl	8002368 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fc fbdc 	bl	8002368 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e058      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bca:	e050      	b.n	8005c6e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e04f      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d144      	bne.n	8005c6e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005be4:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a23      	ldr	r2, [pc, #140]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bf0:	4b21      	ldr	r3, [pc, #132]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bfc:	f7fc fbb4 	bl	8002368 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fc fbb0 	bl	8002368 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e02c      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c16:	4b18      	ldr	r3, [pc, #96]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x7b8>
 8005c22:	e024      	b.n	8005c6e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	d01f      	beq.n	8005c6a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2a:	4b13      	ldr	r3, [pc, #76]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fc fb97 	bl	8002368 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3e:	f7fc fb93 	bl	8002368 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00f      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	4905      	ldr	r1, [pc, #20]	@ (8005c78 <HAL_RCC_OscConfig+0x82c>)
 8005c62:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <HAL_RCC_OscConfig+0x830>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60cb      	str	r3, [r1, #12]
 8005c68:	e001      	b.n	8005c6e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	feeefffc 	.word	0xfeeefffc

08005c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0e7      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b75      	ldr	r3, [pc, #468]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b72      	ldr	r3, [pc, #456]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 0207 	bic.w	r2, r3, #7
 8005caa:	4970      	ldr	r1, [pc, #448]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0cf      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	4b66      	ldr	r3, [pc, #408]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d908      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b63      	ldr	r3, [pc, #396]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4960      	ldr	r1, [pc, #384]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d04c      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	4b5a      	ldr	r3, [pc, #360]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d121      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0a6      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d1e:	4b54      	ldr	r3, [pc, #336]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d115      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e09a      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d36:	4b4e      	ldr	r3, [pc, #312]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e08e      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d46:	4b4a      	ldr	r3, [pc, #296]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e086      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d56:	4b46      	ldr	r3, [pc, #280]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4943      	ldr	r1, [pc, #268]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d68:	f7fc fafe 	bl	8002368 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fc fafa 	bl	8002368 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e06e      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	4b3a      	ldr	r3, [pc, #232]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b31      	ldr	r3, [pc, #196]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d208      	bcs.n	8005dc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	492b      	ldr	r1, [pc, #172]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc6:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d210      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd4:	4b25      	ldr	r3, [pc, #148]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 0207 	bic.w	r2, r3, #7
 8005ddc:	4923      	ldr	r1, [pc, #140]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de4:	4b21      	ldr	r3, [pc, #132]	@ (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e036      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e02:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4918      	ldr	r1, [pc, #96]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e20:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4910      	ldr	r1, [pc, #64]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e34:	f000 f824 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	490b      	ldr	r1, [pc, #44]	@ (8005e74 <HAL_RCC_ClockConfig+0x1f4>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e54:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <HAL_RCC_ClockConfig+0x1fc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fc fa35 	bl	80022c8 <HAL_InitTick>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e62:	7afb      	ldrb	r3, [r7, #11]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0800efac 	.word	0x0800efac
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	20000004 	.word	0x20000004

08005e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e98:	4b3b      	ldr	r3, [pc, #236]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d121      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d11e      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eb4:	4b34      	ldr	r3, [pc, #208]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ec0:	4b31      	ldr	r3, [pc, #196]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e005      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005edc:	4a2b      	ldr	r2, [pc, #172]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e004      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f04:	4b23      	ldr	r3, [pc, #140]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d134      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d003      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0xac>
 8005f24:	e005      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f26:	4b1a      	ldr	r3, [pc, #104]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f28:	617b      	str	r3, [r7, #20]
      break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f2c:	4b19      	ldr	r3, [pc, #100]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2e:	617b      	str	r3, [r7, #20]
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	617b      	str	r3, [r7, #20]
      break;
 8005f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f38:	4b13      	ldr	r3, [pc, #76]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f46:	4b10      	ldr	r3, [pc, #64]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	fb03 f202 	mul.w	r2, r3, r2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	0e5b      	lsrs	r3, r3, #25
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f78:	69bb      	ldr	r3, [r7, #24]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3724      	adds	r7, #36	@ 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800efc4 	.word	0x0800efc4
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000000 	.word	0x20000000

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4904      	ldr	r1, [pc, #16]	@ (8005fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	0800efbc 	.word	0x0800efbc

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fe0:	f7ff ffda 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	0adb      	lsrs	r3, r3, #11
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4904      	ldr	r1, [pc, #16]	@ (8006004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000
 8006004:	0800efbc 	.word	0x0800efbc

08006008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006014:	4b2a      	ldr	r3, [pc, #168]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006020:	f7ff f8ce 	bl	80051c0 <HAL_PWREx_GetVoltageRange>
 8006024:	6178      	str	r0, [r7, #20]
 8006026:	e014      	b.n	8006052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006028:	4b25      	ldr	r3, [pc, #148]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	4a24      	ldr	r2, [pc, #144]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006032:	6593      	str	r3, [r2, #88]	@ 0x58
 8006034:	4b22      	ldr	r3, [pc, #136]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006040:	f7ff f8be 	bl	80051c0 <HAL_PWREx_GetVoltageRange>
 8006044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4b1e      	ldr	r3, [pc, #120]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	4a1d      	ldr	r2, [pc, #116]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006058:	d10b      	bne.n	8006072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d919      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2ba0      	cmp	r3, #160	@ 0xa0
 8006064:	d902      	bls.n	800606c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006066:	2302      	movs	r3, #2
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e013      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800606c:	2301      	movs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	e010      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b80      	cmp	r3, #128	@ 0x80
 8006076:	d902      	bls.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006078:	2303      	movs	r3, #3
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00a      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	@ 0x80
 8006082:	d102      	bne.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e004      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b70      	cmp	r3, #112	@ 0x70
 800608e:	d101      	bne.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006094:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 0207 	bic.w	r2, r3, #7
 800609c:	4909      	ldr	r1, [pc, #36]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a4:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40022000 	.word	0x40022000

080060c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d0:	2300      	movs	r3, #0
 80060d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d4:	2300      	movs	r3, #0
 80060d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d041      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060ec:	d02a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060f2:	d824      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060fe:	d81e      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006108:	d010      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800610a:	e018      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800610c:	4b86      	ldr	r3, [pc, #536]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a85      	ldr	r2, [pc, #532]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006118:	e015      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f001 f895 	bl	8007250 <RCCEx_PLLSAI1_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3320      	adds	r3, #32
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f001 f97e 	bl	8007434 <RCCEx_PLLSAI2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	74fb      	strb	r3, [r7, #19]
      break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800614c:	4b76      	ldr	r3, [pc, #472]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006152:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800615a:	4973      	ldr	r1, [pc, #460]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006162:	e001      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d041      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006178:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800617c:	d02a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800617e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006182:	d824      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006188:	d008      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800618e:	d81e      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006198:	d010      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800619a:	e018      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800619c:	4b62      	ldr	r3, [pc, #392]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a61      	ldr	r2, [pc, #388]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a8:	e015      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 f84d 	bl	8007250 <RCCEx_PLLSAI1_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ba:	e00c      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3320      	adds	r3, #32
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f936 	bl	8007434 <RCCEx_PLLSAI2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	74fb      	strb	r3, [r7, #19]
      break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061dc:	4b52      	ldr	r3, [pc, #328]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ea:	494f      	ldr	r1, [pc, #316]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80a0 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800620a:	4b47      	ldr	r3, [pc, #284]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b41      	ldr	r3, [pc, #260]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006224:	4a40      	ldr	r2, [pc, #256]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800622a:	6593      	str	r3, [r2, #88]	@ 0x58
 800622c:	4b3e      	ldr	r3, [pc, #248]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006238:	2301      	movs	r3, #1
 800623a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800623c:	4b3b      	ldr	r3, [pc, #236]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3a      	ldr	r2, [pc, #232]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006248:	f7fc f88e 	bl	8002368 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800624e:	e009      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7fc f88a 	bl	8002368 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d902      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	74fb      	strb	r3, [r7, #19]
        break;
 8006262:	e005      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006264:	4b31      	ldr	r3, [pc, #196]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ef      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d15c      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006276:	4b2c      	ldr	r3, [pc, #176]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01f      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d019      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006294:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a0:	4b21      	ldr	r3, [pc, #132]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a6:	4a20      	ldr	r2, [pc, #128]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c0:	4a19      	ldr	r2, [pc, #100]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fc f849 	bl	8002368 <HAL_GetTick>
 80062d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d8:	e00b      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fc f845 	bl	8002368 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d902      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	74fb      	strb	r3, [r7, #19]
            break;
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0ec      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006306:	4b08      	ldr	r3, [pc, #32]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006316:	4904      	ldr	r1, [pc, #16]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800631e:	e009      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	74bb      	strb	r3, [r7, #18]
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006334:	7c7b      	ldrb	r3, [r7, #17]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633a:	4ba6      	ldr	r3, [pc, #664]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633e:	4aa5      	ldr	r2, [pc, #660]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006344:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006352:	4ba0      	ldr	r3, [pc, #640]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	499c      	ldr	r1, [pc, #624]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006374:	4b97      	ldr	r3, [pc, #604]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637a:	f023 020c 	bic.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006382:	4994      	ldr	r1, [pc, #592]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006396:	4b8f      	ldr	r3, [pc, #572]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a4:	498b      	ldr	r1, [pc, #556]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b8:	4b86      	ldr	r3, [pc, #536]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	4983      	ldr	r1, [pc, #524]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063da:	4b7e      	ldr	r3, [pc, #504]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e8:	497a      	ldr	r1, [pc, #488]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b75      	ldr	r3, [pc, #468]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640a:	4972      	ldr	r1, [pc, #456]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641e:	4b6d      	ldr	r3, [pc, #436]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642c:	4969      	ldr	r1, [pc, #420]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006440:	4b64      	ldr	r3, [pc, #400]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800644e:	4961      	ldr	r1, [pc, #388]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006462:	4b5c      	ldr	r3, [pc, #368]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006468:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006470:	4958      	ldr	r1, [pc, #352]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006484:	4b53      	ldr	r3, [pc, #332]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006492:	4950      	ldr	r1, [pc, #320]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a6:	4b4b      	ldr	r3, [pc, #300]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b4:	4947      	ldr	r1, [pc, #284]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064c8:	4b42      	ldr	r3, [pc, #264]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064ce:	f023 0203 	bic.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	493f      	ldr	r1, [pc, #252]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d028      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ea:	4b3a      	ldr	r3, [pc, #232]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f8:	4936      	ldr	r1, [pc, #216]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006508:	d106      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800650a:	4b32      	ldr	r3, [pc, #200]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	4a31      	ldr	r2, [pc, #196]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006514:	60d3      	str	r3, [r2, #12]
 8006516:	e011      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006520:	d10c      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	2101      	movs	r1, #1
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fe91 	bl	8007250 <RCCEx_PLLSAI1_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006532:	7cfb      	ldrb	r3, [r7, #19]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d028      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006548:	4b22      	ldr	r3, [pc, #136]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006556:	491f      	ldr	r1, [pc, #124]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006566:	d106      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006568:	4b1a      	ldr	r3, [pc, #104]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a19      	ldr	r2, [pc, #100]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800656e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006572:	60d3      	str	r3, [r2, #12]
 8006574:	e011      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800657e:	d10c      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	2101      	movs	r1, #1
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fe62 	bl	8007250 <RCCEx_PLLSAI1_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006596:	7cfb      	ldrb	r3, [r7, #19]
 8006598:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d02a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065a6:	4b0b      	ldr	r3, [pc, #44]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065b4:	4907      	ldr	r1, [pc, #28]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c4:	d108      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c6:	4b03      	ldr	r3, [pc, #12]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	4a02      	ldr	r2, [pc, #8]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065d0:	60d3      	str	r3, [r2, #12]
 80065d2:	e013      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80065d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065e0:	d10c      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	2101      	movs	r1, #1
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fe31 	bl	8007250 <RCCEx_PLLSAI1_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065f2:	7cfb      	ldrb	r3, [r7, #19]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02f      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006608:	4b2c      	ldr	r3, [pc, #176]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006616:	4929      	ldr	r1, [pc, #164]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006626:	d10d      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2102      	movs	r1, #2
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fe0e 	bl	8007250 <RCCEx_PLLSAI1_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d014      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	74bb      	strb	r3, [r7, #18]
 8006642:	e011      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3320      	adds	r3, #32
 8006652:	2102      	movs	r1, #2
 8006654:	4618      	mov	r0, r3
 8006656:	f000 feed 	bl	8007434 <RCCEx_PLLSAI2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665e:	7cfb      	ldrb	r3, [r7, #19]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006674:	4b11      	ldr	r3, [pc, #68]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006684:	490d      	ldr	r1, [pc, #52]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006698:	4b08      	ldr	r3, [pc, #32]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a8:	4904      	ldr	r1, [pc, #16]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80066b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40021000 	.word	0x40021000

080066c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066d2:	d13e      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066d4:	4bb4      	ldr	r3, [pc, #720]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066de:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e6:	d028      	beq.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066ee:	f200 858c 	bhi.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066f8:	d005      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006700:	d00e      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006702:	f000 bd82 	b.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006706:	4ba8      	ldr	r3, [pc, #672]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b02      	cmp	r3, #2
 8006712:	f040 857c 	bne.w	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8006716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800671a:	61fb      	str	r3, [r7, #28]
      break;
 800671c:	f000 bd77 	b.w	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006720:	4ba1      	ldr	r3, [pc, #644]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	f040 8571 	bne.w	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8006730:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006734:	61fb      	str	r3, [r7, #28]
      break;
 8006736:	f000 bd6c 	b.w	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800673a:	4b9b      	ldr	r3, [pc, #620]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006746:	f040 8566 	bne.w	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800674a:	4b98      	ldr	r3, [pc, #608]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800674c:	61fb      	str	r3, [r7, #28]
      break;
 800674e:	f000 bd62 	b.w	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006752:	4b95      	ldr	r3, [pc, #596]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2b03      	cmp	r3, #3
 8006760:	d036      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d840      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d003      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d020      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006774:	e039      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006776:	4b8c      	ldr	r3, [pc, #560]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d116      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006782:	4b89      	ldr	r3, [pc, #548]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800678e:	4b86      	ldr	r3, [pc, #536]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	091b      	lsrs	r3, r3, #4
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	e005      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800679a:	4b83      	ldr	r3, [pc, #524]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800679c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4a82      	ldr	r2, [pc, #520]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067ae:	e01f      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
      break;
 80067b4:	e01c      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067b6:	4b7c      	ldr	r3, [pc, #496]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c2:	d102      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80067c4:	4b7b      	ldr	r3, [pc, #492]	@ (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80067c6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067c8:	e012      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
      break;
 80067ce:	e00f      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067d0:	4b75      	ldr	r3, [pc, #468]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067dc:	d102      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80067de:	4b76      	ldr	r3, [pc, #472]	@ (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067e2:	e005      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
      break;
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
      break;
 80067ee:	bf00      	nop
    }

    switch(PeriphClk)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067f6:	f000 842a 	beq.w	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006800:	f200 850b 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800680a:	f000 80df 	beq.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006814:	f200 8501 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800681e:	f000 80d5 	beq.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006828:	f200 84f7 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006832:	f000 8377 	beq.w	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683c:	f200 84ed 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006846:	f000 84c3 	beq.w	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006850:	f200 84e3 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800685a:	f000 82e6 	beq.w	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006864:	f200 84d9 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800686e:	f000 80ad 	beq.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006878:	f200 84cf 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006882:	f000 809b 	beq.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688c:	f200 84c5 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006896:	d07f      	beq.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800689e:	f200 84bc 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a8:	f000 8448 	beq.w	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b2:	f200 84b2 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068bc:	f000 83f0 	beq.w	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c6:	f200 84a8 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d0:	f000 8391 	beq.w	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068da:	f200 849e 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b80      	cmp	r3, #128	@ 0x80
 80068e2:	f000 835c 	beq.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b80      	cmp	r3, #128	@ 0x80
 80068ea:	f200 8496 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d84b      	bhi.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 848f 	beq.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3b01      	subs	r3, #1
 8006900:	2b1f      	cmp	r3, #31
 8006902:	f200 848a 	bhi.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006b23 	.word	0x08006b23
 8006910:	08006b93 	.word	0x08006b93
 8006914:	0800721b 	.word	0x0800721b
 8006918:	08006c27 	.word	0x08006c27
 800691c:	0800721b 	.word	0x0800721b
 8006920:	0800721b 	.word	0x0800721b
 8006924:	0800721b 	.word	0x0800721b
 8006928:	08006caf 	.word	0x08006caf
 800692c:	0800721b 	.word	0x0800721b
 8006930:	0800721b 	.word	0x0800721b
 8006934:	0800721b 	.word	0x0800721b
 8006938:	0800721b 	.word	0x0800721b
 800693c:	0800721b 	.word	0x0800721b
 8006940:	0800721b 	.word	0x0800721b
 8006944:	0800721b 	.word	0x0800721b
 8006948:	08006d27 	.word	0x08006d27
 800694c:	0800721b 	.word	0x0800721b
 8006950:	0800721b 	.word	0x0800721b
 8006954:	0800721b 	.word	0x0800721b
 8006958:	0800721b 	.word	0x0800721b
 800695c:	0800721b 	.word	0x0800721b
 8006960:	0800721b 	.word	0x0800721b
 8006964:	0800721b 	.word	0x0800721b
 8006968:	0800721b 	.word	0x0800721b
 800696c:	0800721b 	.word	0x0800721b
 8006970:	0800721b 	.word	0x0800721b
 8006974:	0800721b 	.word	0x0800721b
 8006978:	0800721b 	.word	0x0800721b
 800697c:	0800721b 	.word	0x0800721b
 8006980:	0800721b 	.word	0x0800721b
 8006984:	0800721b 	.word	0x0800721b
 8006988:	08006da9 	.word	0x08006da9
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	f000 82d9 	beq.w	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006994:	f000 bc41 	b.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800699e:	f000 fe25 	bl	80075ec <RCCEx_GetSAIxPeriphCLKFreq>
 80069a2:	61f8      	str	r0, [r7, #28]
      break;
 80069a4:	f000 bc3a 	b.w	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80069a8:	40021000 	.word	0x40021000
 80069ac:	0003d090 	.word	0x0003d090
 80069b0:	0800efc4 	.word	0x0800efc4
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80069bc:	69b9      	ldr	r1, [r7, #24]
 80069be:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80069c2:	f000 fe13 	bl	80075ec <RCCEx_GetSAIxPeriphCLKFreq>
 80069c6:	61f8      	str	r0, [r7, #28]
      break;
 80069c8:	f000 bc28 	b.w	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80069cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80069d6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80069de:	d015      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80069e6:	f200 8092 	bhi.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069f0:	d029      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069f8:	f200 8089 	bhi.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d07b      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a08:	d04a      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8006a0a:	e080      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a0c:	4b96      	ldr	r3, [pc, #600]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d17c      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006a18:	4b93      	ldr	r3, [pc, #588]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d005      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006a24:	4b90      	ldr	r3, [pc, #576]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	e005      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006a30:	4b8d      	ldr	r3, [pc, #564]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	4a8b      	ldr	r2, [pc, #556]	@ (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a42:	61fb      	str	r3, [r7, #28]
          break;
 8006a44:	e065      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a46:	4b88      	ldr	r3, [pc, #544]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a52:	d160      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a54:	4b84      	ldr	r3, [pc, #528]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a60:	d159      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a62:	4b81      	ldr	r3, [pc, #516]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a6c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	fb03 f202 	mul.w	r2, r3, r2
 8006a76:	4b7c      	ldr	r3, [pc, #496]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	091b      	lsrs	r3, r3, #4
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	3301      	adds	r3, #1
 8006a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a86:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a88:	4b77      	ldr	r3, [pc, #476]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	0d5b      	lsrs	r3, r3, #21
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	3301      	adds	r3, #1
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	61fb      	str	r3, [r7, #28]
          break;
 8006a9e:	e03a      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006aa0:	4b71      	ldr	r3, [pc, #452]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aac:	d135      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006aae:	4b6e      	ldr	r3, [pc, #440]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aba:	d12e      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006abc:	4b6a      	ldr	r3, [pc, #424]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ac6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	fb03 f202 	mul.w	r2, r3, r2
 8006ad0:	4b65      	ldr	r3, [pc, #404]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	3301      	adds	r3, #1
 8006adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006ae2:	4b61      	ldr	r3, [pc, #388]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	0d5b      	lsrs	r3, r3, #21
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	3301      	adds	r3, #1
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	61fb      	str	r3, [r7, #28]
          break;
 8006af8:	e00f      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006afa:	4b5b      	ldr	r3, [pc, #364]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d10a      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8006b08:	4b59      	ldr	r3, [pc, #356]	@ (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8006b0a:	61fb      	str	r3, [r7, #28]
          break;
 8006b0c:	e007      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8006b0e:	bf00      	nop
 8006b10:	e384      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b12:	bf00      	nop
 8006b14:	e382      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b16:	bf00      	nop
 8006b18:	e380      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b1a:	bf00      	nop
 8006b1c:	e37e      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b1e:	bf00      	nop
        break;
 8006b20:	e37c      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b22:	4b51      	ldr	r3, [pc, #324]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d828      	bhi.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8006b34:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b4d 	.word	0x08006b4d
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b5d 	.word	0x08006b5d
 8006b48:	08006b71 	.word	0x08006b71
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b4c:	f7ff fa46 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8006b50:	61f8      	str	r0, [r7, #28]
          break;
 8006b52:	e01d      	b.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b54:	f7ff f994 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006b58:	61f8      	str	r0, [r7, #28]
          break;
 8006b5a:	e019      	b.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b5c:	4b42      	ldr	r3, [pc, #264]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b68:	d10f      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8006b6a:	4b42      	ldr	r3, [pc, #264]	@ (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006b6c:	61fb      	str	r3, [r7, #28]
          break;
 8006b6e:	e00c      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b70:	4b3d      	ldr	r3, [pc, #244]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b82:	61fb      	str	r3, [r7, #28]
          break;
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8006b86:	bf00      	nop
 8006b88:	e348      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b8a:	bf00      	nop
 8006b8c:	e346      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006b8e:	bf00      	nop
        break;
 8006b90:	e344      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b92:	4b35      	ldr	r3, [pc, #212]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	d83a      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006be1 	.word	0x08006be1
 8006bb0:	08006c1b 	.word	0x08006c1b
 8006bb4:	08006c1b 	.word	0x08006c1b
 8006bb8:	08006c1b 	.word	0x08006c1b
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	08006c1b 	.word	0x08006c1b
 8006bc4:	08006c1b 	.word	0x08006c1b
 8006bc8:	08006c1b 	.word	0x08006c1b
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006c1b 	.word	0x08006c1b
 8006bd4:	08006c1b 	.word	0x08006c1b
 8006bd8:	08006c1b 	.word	0x08006c1b
 8006bdc:	08006c05 	.word	0x08006c05
          frequency = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7ff f9e6 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006be4:	61f8      	str	r0, [r7, #28]
          break;
 8006be6:	e01d      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8006be8:	f7ff f94a 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006bec:	61f8      	str	r0, [r7, #28]
          break;
 8006bee:	e019      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfc:	d10f      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8006bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006c00:	61fb      	str	r3, [r7, #28]
          break;
 8006c02:	e00c      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c04:	4b18      	ldr	r3, [pc, #96]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d107      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8006c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c16:	61fb      	str	r3, [r7, #28]
          break;
 8006c18:	e003      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8006c1a:	bf00      	nop
 8006c1c:	e2fe      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006c1e:	bf00      	nop
 8006c20:	e2fc      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006c22:	bf00      	nop
        break;
 8006c24:	e2fa      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c26:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c30:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b30      	cmp	r3, #48	@ 0x30
 8006c36:	d029      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b30      	cmp	r3, #48	@ 0x30
 8006c3c:	d831      	bhi.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d019      	beq.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d82b      	bhi.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b10      	cmp	r3, #16
 8006c54:	d004      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8006c56:	e024      	b.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7ff f9aa 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	61f8      	str	r0, [r7, #28]
          break;
 8006c5e:	e025      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c60:	f7ff f90e 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006c64:	61f8      	str	r0, [r7, #28]
          break;
 8006c66:	e021      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	0800efc4 	.word	0x0800efc4
 8006c70:	02dc6c00 	.word	0x02dc6c00
 8006c74:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c78:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c84:	d10f      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8006c86:	4b8d      	ldr	r3, [pc, #564]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006c88:	61fb      	str	r3, [r7, #28]
          break;
 8006c8a:	e00c      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c8c:	4b8a      	ldr	r3, [pc, #552]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d107      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c9e:	61fb      	str	r3, [r7, #28]
          break;
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8006ca2:	bf00      	nop
 8006ca4:	e2ba      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006ca6:	bf00      	nop
 8006ca8:	e2b8      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006caa:	bf00      	nop
        break;
 8006cac:	e2b6      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006cae:	4b82      	ldr	r3, [pc, #520]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cb8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cbe:	d021      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cc4:	d829      	bhi.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b80      	cmp	r3, #128	@ 0x80
 8006cca:	d011      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b80      	cmp	r3, #128	@ 0x80
 8006cd0:	d823      	bhi.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b40      	cmp	r3, #64	@ 0x40
 8006cdc:	d004      	beq.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8006cde:	e01c      	b.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7ff f966 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	61f8      	str	r0, [r7, #28]
          break;
 8006ce6:	e01d      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ce8:	f7ff f8ca 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006cec:	61f8      	str	r0, [r7, #28]
          break;
 8006cee:	e019      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cf0:	4b71      	ldr	r3, [pc, #452]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfc:	d10f      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8006cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006d00:	61fb      	str	r3, [r7, #28]
          break;
 8006d02:	e00c      	b.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d04:	4b6c      	ldr	r3, [pc, #432]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d16:	61fb      	str	r3, [r7, #28]
          break;
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8006d1a:	bf00      	nop
 8006d1c:	e27e      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006d1e:	bf00      	nop
 8006d20:	e27c      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006d22:	bf00      	nop
        break;
 8006d24:	e27a      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006d26:	4b64      	ldr	r3, [pc, #400]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d30:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d38:	d025      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d40:	d82c      	bhi.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d48:	d013      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d50:	d824      	bhi.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5e:	d004      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8006d60:	e01c      	b.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d62:	f7ff f925 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006d66:	61f8      	str	r0, [r7, #28]
          break;
 8006d68:	e01d      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d6a:	f7ff f889 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006d6e:	61f8      	str	r0, [r7, #28]
          break;
 8006d70:	e019      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d72:	4b51      	ldr	r3, [pc, #324]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d7e:	d10f      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8006d80:	4b4e      	ldr	r3, [pc, #312]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006d82:	61fb      	str	r3, [r7, #28]
          break;
 8006d84:	e00c      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d86:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d107      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8006d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d98:	61fb      	str	r3, [r7, #28]
          break;
 8006d9a:	e003      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8006d9c:	bf00      	nop
 8006d9e:	e23d      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006da0:	bf00      	nop
 8006da2:	e23b      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006da4:	bf00      	nop
        break;
 8006da6:	e239      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006da8:	4b43      	ldr	r3, [pc, #268]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006db2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dba:	d025      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dc2:	d82c      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dca:	d013      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd2:	d824      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d004      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8006de2:	e01c      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006de4:	f7ff f8e4 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006de8:	61f8      	str	r0, [r7, #28]
          break;
 8006dea:	e01d      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dec:	f7ff f848 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006df0:	61f8      	str	r0, [r7, #28]
          break;
 8006df2:	e019      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006df4:	4b30      	ldr	r3, [pc, #192]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e00:	d10f      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8006e02:	4b2e      	ldr	r3, [pc, #184]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006e04:	61fb      	str	r3, [r7, #28]
          break;
 8006e06:	e00c      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e08:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8006e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e1a:	61fb      	str	r3, [r7, #28]
          break;
 8006e1c:	e003      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8006e1e:	bf00      	nop
 8006e20:	e1fc      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006e22:	bf00      	nop
 8006e24:	e1fa      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006e26:	bf00      	nop
        break;
 8006e28:	e1f8      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006e2a:	4b23      	ldr	r3, [pc, #140]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e34:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e3c:	d00c      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e44:	d868      	bhi.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e4c:	d008      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e54:	d034      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8006e56:	e05f      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e58:	f7ff f812 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006e5c:	61f8      	str	r0, [r7, #28]
          break;
 8006e5e:	e060      	b.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006e60:	4b15      	ldr	r3, [pc, #84]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e6c:	d156      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006e6e:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d050      	beq.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e84:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	fb03 f202 	mul.w	r2, r3, r2
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	3301      	adds	r3, #1
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006ea0:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	0e5b      	lsrs	r3, r3, #25
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	61fb      	str	r3, [r7, #28]
          break;
 8006eb6:	e031      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006ec0:	4b9c      	ldr	r3, [pc, #624]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ecc:	d128      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8006ece:	4b99      	ldr	r3, [pc, #612]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d022      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006eda:	4b96      	ldr	r3, [pc, #600]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	0a1b      	lsrs	r3, r3, #8
 8006ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	fb03 f202 	mul.w	r2, r3, r2
 8006eee:	4b91      	ldr	r3, [pc, #580]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	3301      	adds	r3, #1
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006f00:	4b8c      	ldr	r3, [pc, #560]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	0e5b      	lsrs	r3, r3, #25
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	61fb      	str	r3, [r7, #28]
          break;
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8006f18:	bf00      	nop
 8006f1a:	e17f      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f1c:	bf00      	nop
 8006f1e:	e17d      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f20:	bf00      	nop
        break;
 8006f22:	e17b      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006f24:	4b83      	ldr	r3, [pc, #524]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f36:	f7ff f851 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8006f3a:	61f8      	str	r0, [r7, #28]
        break;
 8006f3c:	e16e      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f3e:	f7fe ff9f 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006f42:	61f8      	str	r0, [r7, #28]
        break;
 8006f44:	e16a      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f46:	4b7b      	ldr	r3, [pc, #492]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f50:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f58:	d013      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f60:	d819      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006f70:	e011      	b.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f72:	f7ff f81d 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006f76:	61f8      	str	r0, [r7, #28]
          break;
 8006f78:	e010      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fe ff81 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006f7e:	61f8      	str	r0, [r7, #28]
          break;
 8006f80:	e00c      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f82:	4b6c      	ldr	r3, [pc, #432]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8e:	d104      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8006f90:	4b69      	ldr	r3, [pc, #420]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8006f92:	61fb      	str	r3, [r7, #28]
          break;
 8006f94:	e001      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8006f96:	bf00      	nop
 8006f98:	e140      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f9a:	bf00      	nop
        break;
 8006f9c:	e13e      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f9e:	4b65      	ldr	r3, [pc, #404]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006fa8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb0:	d013      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb8:	d819      	bhi.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fc6:	d004      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8006fc8:	e011      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fca:	f7fe fff1 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006fce:	61f8      	str	r0, [r7, #28]
          break;
 8006fd0:	e010      	b.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fd2:	f7fe ff55 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006fd6:	61f8      	str	r0, [r7, #28]
          break;
 8006fd8:	e00c      	b.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fda:	4b56      	ldr	r3, [pc, #344]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe6:	d104      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8006fe8:	4b53      	ldr	r3, [pc, #332]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8006fea:	61fb      	str	r3, [r7, #28]
          break;
 8006fec:	e001      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8006fee:	bf00      	nop
 8006ff0:	e114      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006ff2:	bf00      	nop
        break;
 8006ff4:	e112      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007000:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007008:	d013      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007010:	d819      	bhi.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701e:	d004      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8007020:	e011      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007022:	f7fe ffc5 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007026:	61f8      	str	r0, [r7, #28]
          break;
 8007028:	e010      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800702a:	f7fe ff29 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 800702e:	61f8      	str	r0, [r7, #28]
          break;
 8007030:	e00c      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007032:	4b40      	ldr	r3, [pc, #256]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800703a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703e:	d104      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8007040:	4b3d      	ldr	r3, [pc, #244]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8007042:	61fb      	str	r3, [r7, #28]
          break;
 8007044:	e001      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8007046:	bf00      	nop
 8007048:	e0e8      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800704a:	bf00      	nop
        break;
 800704c:	e0e6      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800704e:	4b39      	ldr	r3, [pc, #228]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007050:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d011      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d818      	bhi.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d004      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8007072:	e011      	b.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007074:	f7fe ff9c 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007078:	61f8      	str	r0, [r7, #28]
          break;
 800707a:	e010      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800707c:	f7fe ff00 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8007080:	61f8      	str	r0, [r7, #28]
          break;
 8007082:	e00c      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007084:	4b2b      	ldr	r3, [pc, #172]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800708c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007090:	d104      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8007092:	4b29      	ldr	r3, [pc, #164]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8007094:	61fb      	str	r3, [r7, #28]
          break;
 8007096:	e001      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8007098:	bf00      	nop
 800709a:	e0bf      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800709c:	bf00      	nop
        break;
 800709e:	e0bd      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80070a0:	4b24      	ldr	r3, [pc, #144]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80070aa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070b2:	d02c      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070ba:	d833      	bhi.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80070c2:	d01a      	beq.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80070ca:	d82b      	bhi.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070d8:	d004      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80070da:	e023      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070dc:	f7fe ff68 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 80070e0:	61f8      	str	r0, [r7, #28]
          break;
 80070e2:	e026      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80070e4:	4b13      	ldr	r3, [pc, #76]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80070e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d11a      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80070f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070f6:	61fb      	str	r3, [r7, #28]
          break;
 80070f8:	e016      	b.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007106:	d111      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8007108:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800710a:	61fb      	str	r3, [r7, #28]
          break;
 800710c:	e00e      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800710e:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d109      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800711c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007120:	61fb      	str	r3, [r7, #28]
          break;
 8007122:	e005      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8007124:	bf00      	nop
 8007126:	e079      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007128:	bf00      	nop
 800712a:	e077      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800712c:	bf00      	nop
 800712e:	e075      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007130:	bf00      	nop
        break;
 8007132:	e073      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007134:	40021000 	.word	0x40021000
 8007138:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800713c:	4b3a      	ldr	r3, [pc, #232]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007142:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007146:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800714e:	d02c      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007156:	d833      	bhi.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800715e:	d01a      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007166:	d82b      	bhi.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007174:	d004      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8007176:	e023      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007178:	f7fe ff1a 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 800717c:	61f8      	str	r0, [r7, #28]
          break;
 800717e:	e026      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007180:	4b29      	ldr	r3, [pc, #164]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d11a      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800718e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007192:	61fb      	str	r3, [r7, #28]
          break;
 8007194:	e016      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007196:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a2:	d111      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80071a4:	4b21      	ldr	r3, [pc, #132]	@ (800722c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80071a6:	61fb      	str	r3, [r7, #28]
          break;
 80071a8:	e00e      	b.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d109      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80071b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071bc:	61fb      	str	r3, [r7, #28]
          break;
 80071be:	e005      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80071c0:	bf00      	nop
 80071c2:	e02b      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80071c4:	bf00      	nop
 80071c6:	e029      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80071c8:	bf00      	nop
 80071ca:	e027      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80071cc:	bf00      	nop
        break;
 80071ce:	e025      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80071d0:	4b15      	ldr	r3, [pc, #84]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071da:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e8:	d004      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80071ea:	e00d      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 80071ec:	f7fe fee0 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 80071f0:	61f8      	str	r0, [r7, #28]
          break;
 80071f2:	e009      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007200:	d101      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8007202:	4b0a      	ldr	r3, [pc, #40]	@ (800722c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8007204:	61fb      	str	r3, [r7, #28]
          break;
 8007206:	bf00      	nop
        break;
 8007208:	e008      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800720a:	bf00      	nop
 800720c:	e006      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800720e:	bf00      	nop
 8007210:	e004      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8007212:	bf00      	nop
 8007214:	e002      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8007216:	bf00      	nop
 8007218:	e000      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800721a:	bf00      	nop
    }
  }

  return(frequency);
 800721c:	69fb      	ldr	r3, [r7, #28]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40021000 	.word	0x40021000
 800722c:	00f42400 	.word	0x00f42400

08007230 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007234:	4b05      	ldr	r3, [pc, #20]	@ (800724c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a04      	ldr	r2, [pc, #16]	@ (800724c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800723a:	f043 0304 	orr.w	r3, r3, #4
 800723e:	6013      	str	r3, [r2, #0]
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40021000 	.word	0x40021000

08007250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800725e:	4b74      	ldr	r3, [pc, #464]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d018      	beq.n	800729c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800726a:	4b71      	ldr	r3, [pc, #452]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0203 	and.w	r2, r3, #3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d10d      	bne.n	8007296 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
       ||
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007282:	4b6b      	ldr	r3, [pc, #428]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	091b      	lsrs	r3, r3, #4
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
       ||
 8007292:	429a      	cmp	r2, r3
 8007294:	d047      	beq.n	8007326 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	e044      	b.n	8007326 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d018      	beq.n	80072d6 <RCCEx_PLLSAI1_Config+0x86>
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d825      	bhi.n	80072f4 <RCCEx_PLLSAI1_Config+0xa4>
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d002      	beq.n	80072b2 <RCCEx_PLLSAI1_Config+0x62>
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d009      	beq.n	80072c4 <RCCEx_PLLSAI1_Config+0x74>
 80072b0:	e020      	b.n	80072f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d11d      	bne.n	80072fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072c2:	e01a      	b.n	80072fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072c4:	4b5a      	ldr	r3, [pc, #360]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d116      	bne.n	80072fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072d4:	e013      	b.n	80072fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072d6:	4b56      	ldr	r3, [pc, #344]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10f      	bne.n	8007302 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072e2:	4b53      	ldr	r3, [pc, #332]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072f2:	e006      	b.n	8007302 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
      break;
 80072f8:	e004      	b.n	8007304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80072fa:	bf00      	nop
 80072fc:	e002      	b.n	8007304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007302:	bf00      	nop
    }

    if(status == HAL_OK)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800730a:	4b49      	ldr	r3, [pc, #292]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6819      	ldr	r1, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	3b01      	subs	r3, #1
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	430b      	orrs	r3, r1
 8007320:	4943      	ldr	r1, [pc, #268]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007322:	4313      	orrs	r3, r2
 8007324:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d17c      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800732c:	4b40      	ldr	r3, [pc, #256]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a3f      	ldr	r2, [pc, #252]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007332:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007338:	f7fb f816 	bl	8002368 <HAL_GetTick>
 800733c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800733e:	e009      	b.n	8007354 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007340:	f7fb f812 	bl	8002368 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d902      	bls.n	8007354 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	73fb      	strb	r3, [r7, #15]
        break;
 8007352:	e005      	b.n	8007360 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007354:	4b36      	ldr	r3, [pc, #216]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ef      	bne.n	8007340 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d15f      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d110      	bne.n	800738e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800736c:	4b30      	ldr	r3, [pc, #192]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007374:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6892      	ldr	r2, [r2, #8]
 800737c:	0211      	lsls	r1, r2, #8
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68d2      	ldr	r2, [r2, #12]
 8007382:	06d2      	lsls	r2, r2, #27
 8007384:	430a      	orrs	r2, r1
 8007386:	492a      	ldr	r1, [pc, #168]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007388:	4313      	orrs	r3, r2
 800738a:	610b      	str	r3, [r1, #16]
 800738c:	e027      	b.n	80073de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d112      	bne.n	80073ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007394:	4b26      	ldr	r3, [pc, #152]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800739c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6892      	ldr	r2, [r2, #8]
 80073a4:	0211      	lsls	r1, r2, #8
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6912      	ldr	r2, [r2, #16]
 80073aa:	0852      	lsrs	r2, r2, #1
 80073ac:	3a01      	subs	r2, #1
 80073ae:	0552      	lsls	r2, r2, #21
 80073b0:	430a      	orrs	r2, r1
 80073b2:	491f      	ldr	r1, [pc, #124]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	610b      	str	r3, [r1, #16]
 80073b8:	e011      	b.n	80073de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80073c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6892      	ldr	r2, [r2, #8]
 80073ca:	0211      	lsls	r1, r2, #8
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6952      	ldr	r2, [r2, #20]
 80073d0:	0852      	lsrs	r2, r2, #1
 80073d2:	3a01      	subs	r2, #1
 80073d4:	0652      	lsls	r2, r2, #25
 80073d6:	430a      	orrs	r2, r1
 80073d8:	4915      	ldr	r1, [pc, #84]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80073de:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a13      	ldr	r2, [pc, #76]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ea:	f7fa ffbd 	bl	8002368 <HAL_GetTick>
 80073ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073f0:	e009      	b.n	8007406 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073f2:	f7fa ffb9 	bl	8002368 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d902      	bls.n	8007406 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	73fb      	strb	r3, [r7, #15]
          break;
 8007404:	e005      	b.n	8007412 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007406:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0ef      	beq.n	80073f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4903      	ldr	r1, [pc, #12]	@ (8007430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40021000 	.word	0x40021000

08007434 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007442:	4b69      	ldr	r3, [pc, #420]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800744e:	4b66      	ldr	r3, [pc, #408]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0203 	and.w	r2, r3, #3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d10d      	bne.n	800747a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
       ||
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007466:	4b60      	ldr	r3, [pc, #384]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
       ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d047      	beq.n	800750a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
 800747e:	e044      	b.n	800750a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d018      	beq.n	80074ba <RCCEx_PLLSAI2_Config+0x86>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d825      	bhi.n	80074d8 <RCCEx_PLLSAI2_Config+0xa4>
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <RCCEx_PLLSAI2_Config+0x62>
 8007490:	2b02      	cmp	r3, #2
 8007492:	d009      	beq.n	80074a8 <RCCEx_PLLSAI2_Config+0x74>
 8007494:	e020      	b.n	80074d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007496:	4b54      	ldr	r3, [pc, #336]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11d      	bne.n	80074de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074a6:	e01a      	b.n	80074de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074a8:	4b4f      	ldr	r3, [pc, #316]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d116      	bne.n	80074e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074b8:	e013      	b.n	80074e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074ba:	4b4b      	ldr	r3, [pc, #300]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10f      	bne.n	80074e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074c6:	4b48      	ldr	r3, [pc, #288]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074d6:	e006      	b.n	80074e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
      break;
 80074dc:	e004      	b.n	80074e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80074de:	bf00      	nop
 80074e0:	e002      	b.n	80074e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80074e2:	bf00      	nop
 80074e4:	e000      	b.n	80074e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80074e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074ee:	4b3e      	ldr	r3, [pc, #248]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6819      	ldr	r1, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	3b01      	subs	r3, #1
 8007500:	011b      	lsls	r3, r3, #4
 8007502:	430b      	orrs	r3, r1
 8007504:	4938      	ldr	r1, [pc, #224]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007506:	4313      	orrs	r3, r2
 8007508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d166      	bne.n	80075de <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007510:	4b35      	ldr	r3, [pc, #212]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a34      	ldr	r2, [pc, #208]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800751a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751c:	f7fa ff24 	bl	8002368 <HAL_GetTick>
 8007520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007522:	e009      	b.n	8007538 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007524:	f7fa ff20 	bl	8002368 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d902      	bls.n	8007538 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
        break;
 8007536:	e005      	b.n	8007544 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007538:	4b2b      	ldr	r3, [pc, #172]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ef      	bne.n	8007524 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d149      	bne.n	80075de <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d110      	bne.n	8007572 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007550:	4b25      	ldr	r3, [pc, #148]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007558:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6892      	ldr	r2, [r2, #8]
 8007560:	0211      	lsls	r1, r2, #8
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	68d2      	ldr	r2, [r2, #12]
 8007566:	06d2      	lsls	r2, r2, #27
 8007568:	430a      	orrs	r2, r1
 800756a:	491f      	ldr	r1, [pc, #124]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800756c:	4313      	orrs	r3, r2
 800756e:	614b      	str	r3, [r1, #20]
 8007570:	e011      	b.n	8007596 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007572:	4b1d      	ldr	r3, [pc, #116]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800757a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6892      	ldr	r2, [r2, #8]
 8007582:	0211      	lsls	r1, r2, #8
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6912      	ldr	r2, [r2, #16]
 8007588:	0852      	lsrs	r2, r2, #1
 800758a:	3a01      	subs	r2, #1
 800758c:	0652      	lsls	r2, r2, #25
 800758e:	430a      	orrs	r2, r1
 8007590:	4915      	ldr	r1, [pc, #84]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007592:	4313      	orrs	r3, r2
 8007594:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007596:	4b14      	ldr	r3, [pc, #80]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a13      	ldr	r2, [pc, #76]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800759c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a2:	f7fa fee1 	bl	8002368 <HAL_GetTick>
 80075a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075a8:	e009      	b.n	80075be <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075aa:	f7fa fedd 	bl	8002368 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d902      	bls.n	80075be <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	73fb      	strb	r3, [r7, #15]
          break;
 80075bc:	e005      	b.n	80075ca <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075be:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0ef      	beq.n	80075aa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d106      	bne.n	80075de <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075d2:	695a      	ldr	r2, [r3, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	4903      	ldr	r1, [pc, #12]	@ (80075e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40021000 	.word	0x40021000

080075ec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	@ 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007608:	d10c      	bne.n	8007624 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800760a:	4b77      	ldr	r3, [pc, #476]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007610:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007614:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800761c:	d112      	bne.n	8007644 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800761e:	4b73      	ldr	r3, [pc, #460]	@ (80077ec <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	e00f      	b.n	8007644 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800762a:	d10b      	bne.n	8007644 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800762c:	4b6e      	ldr	r3, [pc, #440]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007632:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007636:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800763e:	d101      	bne.n	8007644 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007640:	4b6a      	ldr	r3, [pc, #424]	@ (80077ec <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8007642:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 80c6 	bne.w	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007656:	d003      	beq.n	8007660 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800765e:	d13b      	bne.n	80076d8 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007660:	4b61      	ldr	r3, [pc, #388]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800766c:	f040 80b3 	bne.w	80077d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8007670:	4b5d      	ldr	r3, [pc, #372]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80ac 	beq.w	80077d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800767e:	4b5a      	ldr	r3, [pc, #360]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	3301      	adds	r3, #1
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007692:	4b55      	ldr	r3, [pc, #340]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800769e:	4b52      	ldr	r3, [pc, #328]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	0edb      	lsrs	r3, r3, #27
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80076b0:	4b4d      	ldr	r3, [pc, #308]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 80076bc:	2311      	movs	r3, #17
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e001      	b.n	80076c6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 80076c2:	2307      	movs	r3, #7
 80076c4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	fb03 f202 	mul.w	r2, r3, r2
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80076d6:	e07e      	b.n	80077d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d139      	bne.n	8007752 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80076de:	4b42      	ldr	r3, [pc, #264]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ea:	d175      	bne.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80076ec:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d06f      	beq.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80076f8:	4b3b      	ldr	r3, [pc, #236]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	3301      	adds	r3, #1
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	fbb2 f3f3 	udiv	r3, r2, r3
 800770a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800770c:	4b36      	ldr	r3, [pc, #216]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007716:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007718:	4b33      	ldr	r3, [pc, #204]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	0edb      	lsrs	r3, r3, #27
 800771e:	f003 031f 	and.w	r3, r3, #31
 8007722:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800772a:	4b2f      	ldr	r3, [pc, #188]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8007736:	2311      	movs	r3, #17
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e001      	b.n	8007740 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800773c:	2307      	movs	r3, #7
 800773e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	fb03 f202 	mul.w	r2, r3, r2
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e042      	b.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007758:	d003      	beq.n	8007762 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007760:	d13a      	bne.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007762:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800776a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800776e:	d133      	bne.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8007770:	4b1d      	ldr	r3, [pc, #116]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d02d      	beq.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800777c:	4b1a      	ldr	r3, [pc, #104]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	3301      	adds	r3, #1
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	fbb2 f3f3 	udiv	r3, r2, r3
 800778e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007790:	4b15      	ldr	r3, [pc, #84]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800779c:	4b12      	ldr	r3, [pc, #72]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	0edb      	lsrs	r3, r3, #27
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80077ae:	4b0e      	ldr	r3, [pc, #56]	@ (80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80077ba:	2311      	movs	r3, #17
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e001      	b.n	80077c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80077c0:	2307      	movs	r3, #7
 80077c2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	fb03 f202 	mul.w	r2, r3, r2
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	e000      	b.n	80077d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80077d6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80077d8:	69fb      	ldr	r3, [r7, #28]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3724      	adds	r7, #36	@ 0x24
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40021000 	.word	0x40021000
 80077ec:	001fff68 	.word	0x001fff68

080077f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e155      	b.n	8007aae <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fa fbc6 	bl	8001fa8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f959 	bl	8007ad4 <SAI_Disable>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e140      	b.n	8007aae <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d00c      	beq.n	8007856 <HAL_SAI_Init+0x66>
 800783c:	2b02      	cmp	r3, #2
 800783e:	d80d      	bhi.n	800785c <HAL_SAI_Init+0x6c>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_SAI_Init+0x5a>
 8007844:	2b01      	cmp	r3, #1
 8007846:	d003      	beq.n	8007850 <HAL_SAI_Init+0x60>
 8007848:	e008      	b.n	800785c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
      break;
 800784e:	e008      	b.n	8007862 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007850:	2310      	movs	r3, #16
 8007852:	61fb      	str	r3, [r7, #28]
      break;
 8007854:	e005      	b.n	8007862 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007856:	2320      	movs	r3, #32
 8007858:	61fb      	str	r3, [r7, #28]
      break;
 800785a:	e002      	b.n	8007862 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
      break;
 8007860:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d81d      	bhi.n	80078a6 <HAL_SAI_Init+0xb6>
 800786a:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <HAL_SAI_Init+0x80>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007881 	.word	0x08007881
 8007874:	08007887 	.word	0x08007887
 8007878:	0800788f 	.word	0x0800788f
 800787c:	08007897 	.word	0x08007897
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
      break;
 8007884:	e012      	b.n	80078ac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800788a:	617b      	str	r3, [r7, #20]
      break;
 800788c:	e00e      	b.n	80078ac <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800788e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007892:	617b      	str	r3, [r7, #20]
      break;
 8007894:	e00a      	b.n	80078ac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800789a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
      break;
 80078a4:	e002      	b.n	80078ac <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]
      break;
 80078aa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a81      	ldr	r2, [pc, #516]	@ (8007ab8 <HAL_SAI_Init+0x2c8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_SAI_Init+0xd0>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a80      	ldr	r2, [pc, #512]	@ (8007abc <HAL_SAI_Init+0x2cc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d103      	bne.n	80078c8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80078c0:	4a7f      	ldr	r2, [pc, #508]	@ (8007ac0 <HAL_SAI_Init+0x2d0>)
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e002      	b.n	80078ce <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80078c8:	4a7e      	ldr	r2, [pc, #504]	@ (8007ac4 <HAL_SAI_Init+0x2d4>)
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d041      	beq.n	800795a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a77      	ldr	r2, [pc, #476]	@ (8007ab8 <HAL_SAI_Init+0x2c8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d004      	beq.n	80078ea <HAL_SAI_Init+0xfa>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a75      	ldr	r2, [pc, #468]	@ (8007abc <HAL_SAI_Init+0x2cc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d105      	bne.n	80078f6 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80078ee:	f7fe fee7 	bl	80066c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80078f2:	6138      	str	r0, [r7, #16]
 80078f4:	e004      	b.n	8007900 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80078fa:	f7fe fee1 	bl	80066c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80078fe:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	025b      	lsls	r3, r3, #9
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a6b      	ldr	r2, [pc, #428]	@ (8007ac8 <HAL_SAI_Init+0x2d8>)
 800791c:	fba2 2303 	umull	r2, r3, r2, r3
 8007920:	08da      	lsrs	r2, r3, #3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	4b67      	ldr	r3, [pc, #412]	@ (8007ac8 <HAL_SAI_Init+0x2d8>)
 800792a:	fba3 2301 	umull	r2, r3, r3, r1
 800792e:	08da      	lsrs	r2, r3, #3
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	1aca      	subs	r2, r1, r3
 800793a:	2a08      	cmp	r2, #8
 800793c:	d904      	bls.n	8007948 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794c:	2b04      	cmp	r3, #4
 800794e:	d104      	bne.n	800795a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	085a      	lsrs	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_SAI_Init+0x17a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d109      	bne.n	800797e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_SAI_Init+0x186>
 8007972:	2300      	movs	r3, #0
 8007974:	e001      	b.n	800797a <HAL_SAI_Init+0x18a>
 8007976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	e008      	b.n	8007990 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d102      	bne.n	800798c <HAL_SAI_Init+0x19c>
 8007986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800798a:	e000      	b.n	800798e <HAL_SAI_Init+0x19e>
 800798c:	2300      	movs	r3, #0
 800798e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6819      	ldr	r1, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b4c      	ldr	r3, [pc, #304]	@ (8007acc <HAL_SAI_Init+0x2dc>)
 800799c:	400b      	ands	r3, r1
 800799e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	431a      	orrs	r2, r3
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80079c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	051b      	lsls	r3, r3, #20
 80079dc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80079f4:	f023 030f 	bic.w	r3, r3, #15
 80079f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6859      	ldr	r1, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6899      	ldr	r1, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad0 <HAL_SAI_Init+0x2e0>)
 8007a24:	400b      	ands	r3, r1
 8007a26:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6899      	ldr	r1, [r3, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a38:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007a3e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007a44:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007a4e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68d9      	ldr	r1, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007a66:	400b      	ands	r3, r1
 8007a68:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68d9      	ldr	r1, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a78:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a7e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a80:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a86:	3b01      	subs	r3, #1
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40015404 	.word	0x40015404
 8007abc:	40015424 	.word	0x40015424
 8007ac0:	40015400 	.word	0x40015400
 8007ac4:	40015800 	.word	0x40015800
 8007ac8:	cccccccd 	.word	0xcccccccd
 8007acc:	ff05c010 	.word	0xff05c010
 8007ad0:	fff88000 	.word	0xfff88000

08007ad4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007adc:	4b18      	ldr	r3, [pc, #96]	@ (8007b40 <SAI_Disable+0x6c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <SAI_Disable+0x70>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	0b1b      	lsrs	r3, r3, #12
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007afe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10a      	bne.n	8007b1c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	72fb      	strb	r3, [r7, #11]
      break;
 8007b1a:	e009      	b.n	8007b30 <SAI_Disable+0x5c>
    }
    count--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e7      	bne.n	8007b00 <SAI_Disable+0x2c>

  return status;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000000 	.word	0x20000000
 8007b44:	95cbec1b 	.word	0x95cbec1b

08007b48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e02d      	b.n	8007bb6 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d105      	bne.n	8007b72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fa f891 	bl	8001c94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2203      	movs	r2, #3
 8007b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f820 	bl	8007bc0 <HAL_SD_InitCard>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e015      	b.n	8007bb6 <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa5f 	bl	8008054 <HAL_SD_ConfigWideBusOperation>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e00a      	b.n	8007bb6 <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bc0:	b5b0      	push	{r4, r5, r7, lr}
 8007bc2:	b08e      	sub	sp, #56	@ 0x38
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007bdc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007be0:	f7fe fd6e 	bl	80066c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007be4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d109      	bne.n	8007c00 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007bfa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e07b      	b.n	8007cf8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	09db      	lsrs	r3, r3, #7
 8007c04:	4a3e      	ldr	r2, [pc, #248]	@ (8007d00 <HAL_SD_InitCard+0x140>)
 8007c06:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	3b02      	subs	r3, #2
 8007c0e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681d      	ldr	r5, [r3, #0]
 8007c14:	466c      	mov	r4, sp
 8007c16:	f107 0314 	add.w	r3, r7, #20
 8007c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f001 fd25 	bl	8009678 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c3c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 fd52 	bl	80096ec <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c56:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007c64:	4a27      	ldr	r2, [pc, #156]	@ (8007d04 <HAL_SD_InitCard+0x144>)
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fa fb86 	bl	8002380 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb69 	bl	800834c <SD_PowerON>
 8007c7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e02e      	b.n	8007cf8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa96 	bl	80081cc <SD_InitCard>
 8007ca0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e01b      	b.n	8007cf8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fda2 	bl	8009812 <SDMMC_CmdBlockLength>
 8007cce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00f      	beq.n	8007cf6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a0b      	ldr	r2, [pc, #44]	@ (8007d08 <HAL_SD_InitCard+0x148>)
 8007cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3728      	adds	r7, #40	@ 0x28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8007d00:	014f8b59 	.word	0x014f8b59
 8007d04:	00012110 	.word	0x00012110
 8007d08:	004005ff 	.word	0x004005ff

08007d0c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d1a:	0f9b      	lsrs	r3, r3, #30
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d26:	0e9b      	lsrs	r3, r3, #26
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d38:	0e1b      	lsrs	r3, r3, #24
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d4a:	0c1b      	lsrs	r3, r3, #16
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d6c:	0d1b      	lsrs	r3, r3, #20
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d8a:	0bdb      	lsrs	r3, r3, #15
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d9c:	0b9b      	lsrs	r3, r3, #14
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dae:	0b5b      	lsrs	r3, r3, #13
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dc0:	0b1b      	lsrs	r3, r3, #12
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d163      	bne.n	8007ea4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007de0:	009a      	lsls	r2, r3, #2
 8007de2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007de6:	4013      	ands	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007dec:	0f92      	lsrs	r2, r2, #30
 8007dee:	431a      	orrs	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df8:	0edb      	lsrs	r3, r3, #27
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e0a:	0e1b      	lsrs	r3, r3, #24
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e1c:	0d5b      	lsrs	r3, r3, #21
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e2e:	0c9b      	lsrs	r3, r3, #18
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e40:	0bdb      	lsrs	r3, r3, #15
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	7e1b      	ldrb	r3, [r3, #24]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	3302      	adds	r3, #2
 8007e64:	2201      	movs	r2, #1
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007e6e:	fb03 f202 	mul.w	r2, r3, r2
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	7a1b      	ldrb	r3, [r3, #8]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	2201      	movs	r2, #1
 8007e82:	409a      	lsls	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007e90:	0a52      	lsrs	r2, r2, #9
 8007e92:	fb03 f202 	mul.w	r2, r3, r2
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ea0:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ea2:	e031      	b.n	8007f08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d11d      	bne.n	8007ee8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007eb0:	041b      	lsls	r3, r3, #16
 8007eb2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eba:	0c1b      	lsrs	r3, r3, #16
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	029a      	lsls	r2, r3, #10
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007edc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ee6:	e00f      	b.n	8007f08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a58      	ldr	r2, [pc, #352]	@ (8008050 <HAL_SD_GetCardCSD+0x344>)
 8007eee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e09d      	b.n	8008044 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f0c:	0b9b      	lsrs	r3, r3, #14
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f1e:	09db      	lsrs	r3, r3, #7
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f40:	0fdb      	lsrs	r3, r3, #31
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4c:	0f5b      	lsrs	r3, r3, #29
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f5e:	0e9b      	lsrs	r3, r3, #26
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f70:	0d9b      	lsrs	r3, r3, #22
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f82:	0d5b      	lsrs	r3, r3, #21
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9e:	0c1b      	lsrs	r3, r3, #16
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb2:	0bdb      	lsrs	r3, r3, #15
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc6:	0b9b      	lsrs	r3, r3, #14
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fda:	0b5b      	lsrs	r3, r3, #13
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fee:	0b1b      	lsrs	r3, r3, #12
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008002:	0a9b      	lsrs	r3, r3, #10
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	b2da      	uxtb	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008032:	b2da      	uxtb	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	004005ff 	.word	0x004005ff

08008054 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008054:	b5b0      	push	{r4, r5, r7, lr}
 8008056:	b090      	sub	sp, #64	@ 0x40
 8008058:	af04      	add	r7, sp, #16
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2203      	movs	r2, #3
 8008068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008070:	2b03      	cmp	r3, #3
 8008072:	d02e      	beq.n	80080d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800807a:	d106      	bne.n	800808a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	639a      	str	r2, [r3, #56]	@ 0x38
 8008088:	e029      	b.n	80080de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008090:	d10a      	bne.n	80080a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9e8 	bl	8008468 <SD_WideBus_Enable>
 8008098:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80080a6:	e01a      	b.n	80080de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa25 	bl	80084fe <SD_WideBus_Disable>
 80080b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80080c2:	e00c      	b.n	80080de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80080d0:	e005      	b.n	80080de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a35      	ldr	r2, [pc, #212]	@ (80081c0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80080ec:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80080f4:	e042      	b.n	800817c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80080f6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80080fa:	f7fe fae1 	bl	80066c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80080fe:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d031      	beq.n	800816a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	3302      	adds	r3, #2
 8008128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800812a:	fbb2 f3f3 	udiv	r3, r2, r3
 800812e:	4a25      	ldr	r2, [pc, #148]	@ (80081c4 <HAL_SD_ConfigWideBusOperation+0x170>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d907      	bls.n	8008144 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	4a24      	ldr	r2, [pc, #144]	@ (80081c8 <HAL_SD_ConfigWideBusOperation+0x174>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	0ddb      	lsrs	r3, r3, #23
 800813e:	3b02      	subs	r3, #2
 8008140:	623b      	str	r3, [r7, #32]
 8008142:	e002      	b.n	800814a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681d      	ldr	r5, [r3, #0]
 800814e:	466c      	mov	r4, sp
 8008150:	f107 0318 	add.w	r3, r7, #24
 8008154:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008162:	4628      	mov	r0, r5
 8008164:	f001 fa88 	bl	8009678 <SDMMC_Init>
 8008168:	e008      	b.n	800817c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fb44 	bl	8009812 <SDMMC_CmdBlockLength>
 800818a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800818c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00c      	beq.n	80081ac <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a0a      	ldr	r2, [pc, #40]	@ (80081c0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8008198:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80081b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3730      	adds	r7, #48	@ 0x30
 80081bc:	46bd      	mov	sp, r7
 80081be:	bdb0      	pop	{r4, r5, r7, pc}
 80081c0:	004005ff 	.word	0x004005ff
 80081c4:	017d7840 	.word	0x017d7840
 80081c8:	55e63b89 	.word	0x55e63b89

080081cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081cc:	b5b0      	push	{r4, r5, r7, lr}
 80081ce:	b090      	sub	sp, #64	@ 0x40
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80081d4:	2301      	movs	r3, #1
 80081d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 fa94 	bl	800970a <SDMMC_GetPowerState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80081ec:	e0aa      	b.n	8008344 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d02f      	beq.n	8008256 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 fc13 	bl	8009a26 <SDMMC_CmdSendCID>
 8008200:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <SD_InitCard+0x40>
    {
      return errorstate;
 8008208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820a:	e09b      	b.n	8008344 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2100      	movs	r1, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f001 fabe 	bl	8009794 <SDMMC_GetResponse>
 8008218:	4602      	mov	r2, r0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2104      	movs	r1, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fab5 	bl	8009794 <SDMMC_GetResponse>
 800822a:	4602      	mov	r2, r0
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2108      	movs	r1, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f001 faac 	bl	8009794 <SDMMC_GetResponse>
 800823c:	4602      	mov	r2, r0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	210c      	movs	r1, #12
 8008248:	4618      	mov	r0, r3
 800824a:	f001 faa3 	bl	8009794 <SDMMC_GetResponse>
 800824e:	4602      	mov	r2, r0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	2b03      	cmp	r3, #3
 800825c:	d00d      	beq.n	800827a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f107 020e 	add.w	r2, r7, #14
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f001 fc19 	bl	8009aa0 <SDMMC_CmdSetRelAdd>
 800826e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <SD_InitCard+0xae>
    {
      return errorstate;
 8008276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008278:	e064      	b.n	8008344 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	2b03      	cmp	r3, #3
 8008280:	d036      	beq.n	80082f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008282:	89fb      	ldrh	r3, [r7, #14]
 8008284:	461a      	mov	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	f001 fbe3 	bl	8009a62 <SDMMC_CmdSendCSD>
 800829c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800829e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80082a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a6:	e04d      	b.n	8008344 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fa70 	bl	8009794 <SDMMC_GetResponse>
 80082b4:	4602      	mov	r2, r0
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2104      	movs	r1, #4
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fa67 	bl	8009794 <SDMMC_GetResponse>
 80082c6:	4602      	mov	r2, r0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2108      	movs	r1, #8
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fa5e 	bl	8009794 <SDMMC_GetResponse>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	210c      	movs	r1, #12
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 fa55 	bl	8009794 <SDMMC_GetResponse>
 80082ea:	4602      	mov	r2, r0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2104      	movs	r1, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fa4c 	bl	8009794 <SDMMC_GetResponse>
 80082fc:	4603      	mov	r3, r0
 80082fe:	0d1a      	lsrs	r2, r3, #20
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fcfe 	bl	8007d0c <HAL_SD_GetCardCSD>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008316:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800831a:	e013      	b.n	8008344 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	2200      	movs	r2, #0
 8008328:	461c      	mov	r4, r3
 800832a:	4615      	mov	r5, r2
 800832c:	4622      	mov	r2, r4
 800832e:	462b      	mov	r3, r5
 8008330:	4608      	mov	r0, r1
 8008332:	f001 fa90 	bl	8009856 <SDMMC_CmdSelDesel>
 8008336:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <SD_InitCard+0x176>
  {
    return errorstate;
 800833e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008340:	e000      	b.n	8008344 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3740      	adds	r7, #64	@ 0x40
 8008348:	46bd      	mov	sp, r7
 800834a:	bdb0      	pop	{r4, r5, r7, pc}

0800834c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fa99 	bl	800989c <SDMMC_CmdGoIdleState>
 800836a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	e072      	b.n	800845c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f001 faac 	bl	80098d8 <SDMMC_CmdOperCond>
 8008380:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00d      	beq.n	80083a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f001 fa82 	bl	800989c <SDMMC_CmdGoIdleState>
 8008398:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	e05b      	b.n	800845c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d137      	bne.n	8008422 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 faac 	bl	8009916 <SDMMC_CmdAppCommand>
 80083be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d02d      	beq.n	8008422 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80083ca:	e047      	b.n	800845c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 fa9f 	bl	8009916 <SDMMC_CmdAppCommand>
 80083d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	e03b      	b.n	800845c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	491e      	ldr	r1, [pc, #120]	@ (8008464 <SD_PowerON+0x118>)
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fab5 	bl	800995a <SDMMC_CmdAppOperCommand>
 80083f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80083fc:	e02e      	b.n	800845c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2100      	movs	r1, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f001 f9c5 	bl	8009794 <SDMMC_GetResponse>
 800840a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	0fdb      	lsrs	r3, r3, #31
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <SD_PowerON+0xcc>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <SD_PowerON+0xce>
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]

    count++;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3301      	adds	r3, #1
 8008420:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008428:	4293      	cmp	r3, r2
 800842a:	d802      	bhi.n	8008432 <SD_PowerON+0xe6>
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0cc      	beq.n	80083cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008438:	4293      	cmp	r3, r2
 800843a:	d902      	bls.n	8008442 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800843c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008440:	e00c      	b.n	800845c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	645a      	str	r2, [r3, #68]	@ 0x44
 8008452:	e002      	b.n	800845a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	c1100000 	.word	0xc1100000

08008468 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2100      	movs	r1, #0
 800847e:	4618      	mov	r0, r3
 8008480:	f001 f988 	bl	8009794 <SDMMC_GetResponse>
 8008484:	4603      	mov	r3, r0
 8008486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800848a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800848e:	d102      	bne.n	8008496 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008490:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008494:	e02f      	b.n	80084f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f879 	bl	8008594 <SD_FindSCR>
 80084a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	e023      	b.n	80084f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01c      	beq.n	80084f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	4619      	mov	r1, r3
 80084c4:	4610      	mov	r0, r2
 80084c6:	f001 fa26 	bl	8009916 <SDMMC_CmdAppCommand>
 80084ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	e00f      	b.n	80084f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2102      	movs	r1, #2
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fa5f 	bl	80099a0 <SDMMC_CmdBusWidth>
 80084e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	e003      	b.n	80084f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e001      	b.n	80084f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2100      	movs	r1, #0
 8008514:	4618      	mov	r0, r3
 8008516:	f001 f93d 	bl	8009794 <SDMMC_GetResponse>
 800851a:	4603      	mov	r3, r0
 800851c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008524:	d102      	bne.n	800852c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800852a:	e02f      	b.n	800858c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f82e 	bl	8008594 <SD_FindSCR>
 8008538:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	e023      	b.n	800858c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01c      	beq.n	8008588 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008556:	041b      	lsls	r3, r3, #16
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f001 f9db 	bl	8009916 <SDMMC_CmdAppCommand>
 8008560:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	e00f      	b.n	800858c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fa14 	bl	80099a0 <SDMMC_CmdBusWidth>
 8008578:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	e003      	b.n	800858c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008584:	2300      	movs	r3, #0
 8008586:	e001      	b.n	800858c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008588:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008594:	b590      	push	{r4, r7, lr}
 8008596:	b08f      	sub	sp, #60	@ 0x3c
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800859e:	f7f9 fee3 	bl	8002368 <HAL_GetTick>
 80085a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80085a8:	2300      	movs	r3, #0
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2108      	movs	r1, #8
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 f929 	bl	8009812 <SDMMC_CmdBlockLength>
 80085c0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <SD_FindSCR+0x38>
  {
    return errorstate;
 80085c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ca:	e0a9      	b.n	8008720 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f001 f99c 	bl	8009916 <SDMMC_CmdAppCommand>
 80085de:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <SD_FindSCR+0x56>
  {
    return errorstate;
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	e09a      	b.n	8008720 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80085f0:	2308      	movs	r3, #8
 80085f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80085f4:	2330      	movs	r3, #48	@ 0x30
 80085f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085f8:	2302      	movs	r3, #2
 80085fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008600:	2301      	movs	r3, #1
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f107 0210 	add.w	r2, r7, #16
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f8d3 	bl	80097ba <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f001 f9e3 	bl	80099e4 <SDMMC_CmdSendSCR>
 800861e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	e07a      	b.n	8008720 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00e      	beq.n	8008656 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6819      	ldr	r1, [r3, #0]
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	f107 0208 	add.w	r2, r7, #8
 8008644:	18d4      	adds	r4, r2, r3
 8008646:	4608      	mov	r0, r1
 8008648:	f001 f843 	bl	80096d2 <SDMMC_ReadFIFO>
 800864c:	4603      	mov	r3, r0
 800864e:	6023      	str	r3, [r4, #0]
      index++;
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	3301      	adds	r3, #1
 8008654:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008656:	f7f9 fe87 	bl	8002368 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d102      	bne.n	800866c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008666:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800866a:	e059      	b.n	8008720 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008672:	f240 432a 	movw	r3, #1066	@ 0x42a
 8008676:	4013      	ands	r3, r2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0d6      	beq.n	800862a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2208      	movs	r2, #8
 8008690:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008692:	2308      	movs	r3, #8
 8008694:	e044      	b.n	8008720 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2202      	movs	r2, #2
 80086aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80086ac:	2302      	movs	r3, #2
 80086ae:	e037      	b.n	8008720 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2220      	movs	r2, #32
 80086c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80086c6:	2320      	movs	r3, #32
 80086c8:	e02a      	b.n	8008720 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	061a      	lsls	r2, r3, #24
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	0a1b      	lsrs	r3, r3, #8
 80086e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	0e1b      	lsrs	r3, r3, #24
 80086f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f4:	601a      	str	r2, [r3, #0]
    scr++;
 80086f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f8:	3304      	adds	r3, #4
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	061a      	lsls	r2, r3, #24
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008708:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008712:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	0e1b      	lsrs	r3, r3, #24
 8008718:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	373c      	adds	r7, #60	@ 0x3c
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}

08008728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e095      	b.n	8008866 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d108      	bne.n	8008754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800874a:	d009      	beq.n	8008760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
 8008752:	e005      	b.n	8008760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d106      	bne.n	8008780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7f9 faec 	bl	8001d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087a0:	d902      	bls.n	80087a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	e002      	b.n	80087ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80087a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80087b6:	d007      	beq.n	80087c8 <HAL_SPI_Init+0xa0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087c0:	d002      	beq.n	80087c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80087d8:	431a      	orrs	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880a:	ea42 0103 	orr.w	r1, r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008812:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	0c1b      	lsrs	r3, r3, #16
 8008824:	f003 0204 	and.w	r2, r3, #4
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008844:	ea42 0103 	orr.w	r1, r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e038      	b.n	80088f6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7f9 fb7b 	bl	8001f94 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3308      	adds	r3, #8
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f000 fdd3 	bl	8009454 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	461a      	mov	r2, r3
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	f000 fe5b 	bl	8009574 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6858      	ldr	r0, [r3, #4]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	f000 fe9c 	bl	8009608 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	6892      	ldr	r2, [r2, #8]
 80088d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	6892      	ldr	r2, [r2, #8]
 80088e4:	f041 0101 	orr.w	r1, r1, #1
 80088e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e040      	b.n	8008992 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7f9 f825 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2224      	movs	r2, #36	@ 0x24
 800892a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fb69 	bl	800901c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f8ae 	bl	8008aac <UART_SetConfig>
 8008950:	4603      	mov	r3, r0
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e01b      	b.n	8008992 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008968:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008978:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fbe8 	bl	8009160 <UART_CheckIdleState>
 8008990:	4603      	mov	r3, r0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b08a      	sub	sp, #40	@ 0x28
 800899e:	af02      	add	r7, sp, #8
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d177      	bne.n	8008aa2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_UART_Transmit+0x24>
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e070      	b.n	8008aa4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2221      	movs	r2, #33	@ 0x21
 80089ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089d0:	f7f9 fcca 	bl	8002368 <HAL_GetTick>
 80089d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ee:	d108      	bne.n	8008a02 <HAL_UART_Transmit+0x68>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d104      	bne.n	8008a02 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	e003      	b.n	8008a0a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a0a:	e02f      	b.n	8008a6c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2200      	movs	r2, #0
 8008a14:	2180      	movs	r1, #128	@ 0x80
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fc4a 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e03b      	b.n	8008aa4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	881a      	ldrh	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	3302      	adds	r3, #2
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	e007      	b.n	8008a5a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	3301      	adds	r3, #1
 8008a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	3b01      	subs	r3, #1
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1c9      	bne.n	8008a0c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2140      	movs	r1, #64	@ 0x40
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fc14 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e005      	b.n	8008aa4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e000      	b.n	8008aa4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008aa2:	2302      	movs	r3, #2
  }
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab0:	b08a      	sub	sp, #40	@ 0x28
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4ba4      	ldr	r3, [pc, #656]	@ (8008d6c <UART_SetConfig+0x2c0>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a99      	ldr	r2, [pc, #612]	@ (8008d70 <UART_SetConfig+0x2c4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b14:	4313      	orrs	r3, r2
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a90      	ldr	r2, [pc, #576]	@ (8008d74 <UART_SetConfig+0x2c8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d126      	bne.n	8008b84 <UART_SetConfig+0xd8>
 8008b36:	4b90      	ldr	r3, [pc, #576]	@ (8008d78 <UART_SetConfig+0x2cc>)
 8008b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d81b      	bhi.n	8008b7c <UART_SetConfig+0xd0>
 8008b44:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <UART_SetConfig+0xa0>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008b6d 	.word	0x08008b6d
 8008b54:	08008b65 	.word	0x08008b65
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b62:	e116      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008b64:	2302      	movs	r3, #2
 8008b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b6a:	e112      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b72:	e10e      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008b74:	2308      	movs	r3, #8
 8008b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b7a:	e10a      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b82:	e106      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a7c      	ldr	r2, [pc, #496]	@ (8008d7c <UART_SetConfig+0x2d0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d138      	bne.n	8008c00 <UART_SetConfig+0x154>
 8008b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8008d78 <UART_SetConfig+0x2cc>)
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b94:	f003 030c 	and.w	r3, r3, #12
 8008b98:	2b0c      	cmp	r3, #12
 8008b9a:	d82d      	bhi.n	8008bf8 <UART_SetConfig+0x14c>
 8008b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0xf8>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bd9 	.word	0x08008bd9
 8008ba8:	08008bf9 	.word	0x08008bf9
 8008bac:	08008bf9 	.word	0x08008bf9
 8008bb0:	08008bf9 	.word	0x08008bf9
 8008bb4:	08008be9 	.word	0x08008be9
 8008bb8:	08008bf9 	.word	0x08008bf9
 8008bbc:	08008bf9 	.word	0x08008bf9
 8008bc0:	08008bf9 	.word	0x08008bf9
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008bf9 	.word	0x08008bf9
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bde:	e0d8      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008be0:	2302      	movs	r3, #2
 8008be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008be6:	e0d4      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008be8:	2304      	movs	r3, #4
 8008bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bee:	e0d0      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bf6:	e0cc      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bfe:	e0c8      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a5e      	ldr	r2, [pc, #376]	@ (8008d80 <UART_SetConfig+0x2d4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d125      	bne.n	8008c56 <UART_SetConfig+0x1aa>
 8008c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8008d78 <UART_SetConfig+0x2cc>)
 8008c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c14:	2b30      	cmp	r3, #48	@ 0x30
 8008c16:	d016      	beq.n	8008c46 <UART_SetConfig+0x19a>
 8008c18:	2b30      	cmp	r3, #48	@ 0x30
 8008c1a:	d818      	bhi.n	8008c4e <UART_SetConfig+0x1a2>
 8008c1c:	2b20      	cmp	r3, #32
 8008c1e:	d00a      	beq.n	8008c36 <UART_SetConfig+0x18a>
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d814      	bhi.n	8008c4e <UART_SetConfig+0x1a2>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <UART_SetConfig+0x182>
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d008      	beq.n	8008c3e <UART_SetConfig+0x192>
 8008c2c:	e00f      	b.n	8008c4e <UART_SetConfig+0x1a2>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c34:	e0ad      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c36:	2302      	movs	r3, #2
 8008c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c3c:	e0a9      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c3e:	2304      	movs	r3, #4
 8008c40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c44:	e0a5      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c46:	2308      	movs	r3, #8
 8008c48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c4c:	e0a1      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c4e:	2310      	movs	r3, #16
 8008c50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c54:	e09d      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8008d84 <UART_SetConfig+0x2d8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d125      	bne.n	8008cac <UART_SetConfig+0x200>
 8008c60:	4b45      	ldr	r3, [pc, #276]	@ (8008d78 <UART_SetConfig+0x2cc>)
 8008c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c6c:	d016      	beq.n	8008c9c <UART_SetConfig+0x1f0>
 8008c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c70:	d818      	bhi.n	8008ca4 <UART_SetConfig+0x1f8>
 8008c72:	2b80      	cmp	r3, #128	@ 0x80
 8008c74:	d00a      	beq.n	8008c8c <UART_SetConfig+0x1e0>
 8008c76:	2b80      	cmp	r3, #128	@ 0x80
 8008c78:	d814      	bhi.n	8008ca4 <UART_SetConfig+0x1f8>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <UART_SetConfig+0x1d8>
 8008c7e:	2b40      	cmp	r3, #64	@ 0x40
 8008c80:	d008      	beq.n	8008c94 <UART_SetConfig+0x1e8>
 8008c82:	e00f      	b.n	8008ca4 <UART_SetConfig+0x1f8>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8a:	e082      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c92:	e07e      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c9a:	e07a      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca2:	e076      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008caa:	e072      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a35      	ldr	r2, [pc, #212]	@ (8008d88 <UART_SetConfig+0x2dc>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d12a      	bne.n	8008d0c <UART_SetConfig+0x260>
 8008cb6:	4b30      	ldr	r3, [pc, #192]	@ (8008d78 <UART_SetConfig+0x2cc>)
 8008cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cc4:	d01a      	beq.n	8008cfc <UART_SetConfig+0x250>
 8008cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cca:	d81b      	bhi.n	8008d04 <UART_SetConfig+0x258>
 8008ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cd0:	d00c      	beq.n	8008cec <UART_SetConfig+0x240>
 8008cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cd6:	d815      	bhi.n	8008d04 <UART_SetConfig+0x258>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <UART_SetConfig+0x238>
 8008cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce0:	d008      	beq.n	8008cf4 <UART_SetConfig+0x248>
 8008ce2:	e00f      	b.n	8008d04 <UART_SetConfig+0x258>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cea:	e052      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008cec:	2302      	movs	r3, #2
 8008cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cf2:	e04e      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cfa:	e04a      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d02:	e046      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d0a:	e042      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a17      	ldr	r2, [pc, #92]	@ (8008d70 <UART_SetConfig+0x2c4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d13a      	bne.n	8008d8c <UART_SetConfig+0x2e0>
 8008d16:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <UART_SetConfig+0x2cc>)
 8008d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d24:	d01a      	beq.n	8008d5c <UART_SetConfig+0x2b0>
 8008d26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d2a:	d81b      	bhi.n	8008d64 <UART_SetConfig+0x2b8>
 8008d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d30:	d00c      	beq.n	8008d4c <UART_SetConfig+0x2a0>
 8008d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d36:	d815      	bhi.n	8008d64 <UART_SetConfig+0x2b8>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <UART_SetConfig+0x298>
 8008d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d40:	d008      	beq.n	8008d54 <UART_SetConfig+0x2a8>
 8008d42:	e00f      	b.n	8008d64 <UART_SetConfig+0x2b8>
 8008d44:	2300      	movs	r3, #0
 8008d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d4a:	e022      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d52:	e01e      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d54:	2304      	movs	r3, #4
 8008d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d5a:	e01a      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d62:	e016      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d64:	2310      	movs	r3, #16
 8008d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d6a:	e012      	b.n	8008d92 <UART_SetConfig+0x2e6>
 8008d6c:	efff69f3 	.word	0xefff69f3
 8008d70:	40008000 	.word	0x40008000
 8008d74:	40013800 	.word	0x40013800
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	40004400 	.word	0x40004400
 8008d80:	40004800 	.word	0x40004800
 8008d84:	40004c00 	.word	0x40004c00
 8008d88:	40005000 	.word	0x40005000
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a9f      	ldr	r2, [pc, #636]	@ (8009014 <UART_SetConfig+0x568>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d17a      	bne.n	8008e92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d824      	bhi.n	8008dee <UART_SetConfig+0x342>
 8008da4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <UART_SetConfig+0x300>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008def 	.word	0x08008def
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008def 	.word	0x08008def
 8008dbc:	08008ddf 	.word	0x08008ddf
 8008dc0:	08008def 	.word	0x08008def
 8008dc4:	08008def 	.word	0x08008def
 8008dc8:	08008def 	.word	0x08008def
 8008dcc:	08008de7 	.word	0x08008de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd0:	f7fd f8ee 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8008dd4:	61f8      	str	r0, [r7, #28]
        break;
 8008dd6:	e010      	b.n	8008dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dd8:	4b8f      	ldr	r3, [pc, #572]	@ (8009018 <UART_SetConfig+0x56c>)
 8008dda:	61fb      	str	r3, [r7, #28]
        break;
 8008ddc:	e00d      	b.n	8008dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dde:	f7fd f84f 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8008de2:	61f8      	str	r0, [r7, #28]
        break;
 8008de4:	e009      	b.n	8008dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dea:	61fb      	str	r3, [r7, #28]
        break;
 8008dec:	e005      	b.n	8008dfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008df8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80fb 	beq.w	8008ff8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d305      	bcc.n	8008e1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d903      	bls.n	8008e26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e24:	e0e8      	b.n	8008ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	461c      	mov	r4, r3
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	022b      	lsls	r3, r5, #8
 8008e38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e3c:	0222      	lsls	r2, r4, #8
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	6849      	ldr	r1, [r1, #4]
 8008e42:	0849      	lsrs	r1, r1, #1
 8008e44:	2000      	movs	r0, #0
 8008e46:	4688      	mov	r8, r1
 8008e48:	4681      	mov	r9, r0
 8008e4a:	eb12 0a08 	adds.w	sl, r2, r8
 8008e4e:	eb43 0b09 	adc.w	fp, r3, r9
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	603b      	str	r3, [r7, #0]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	f7f7 fa14 	bl	8000290 <__aeabi_uldivmod>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e76:	d308      	bcc.n	8008e8a <UART_SetConfig+0x3de>
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e7e:	d204      	bcs.n	8008e8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	60da      	str	r2, [r3, #12]
 8008e88:	e0b6      	b.n	8008ff8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e90:	e0b2      	b.n	8008ff8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e9a:	d15e      	bne.n	8008f5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d828      	bhi.n	8008ef6 <UART_SetConfig+0x44a>
 8008ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <UART_SetConfig+0x400>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ef7 	.word	0x08008ef7
 8008ebc:	08008ee7 	.word	0x08008ee7
 8008ec0:	08008ef7 	.word	0x08008ef7
 8008ec4:	08008ef7 	.word	0x08008ef7
 8008ec8:	08008ef7 	.word	0x08008ef7
 8008ecc:	08008eef 	.word	0x08008eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed0:	f7fd f86e 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8008ed4:	61f8      	str	r0, [r7, #28]
        break;
 8008ed6:	e014      	b.n	8008f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7fd f880 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8008edc:	61f8      	str	r0, [r7, #28]
        break;
 8008ede:	e010      	b.n	8008f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8009018 <UART_SetConfig+0x56c>)
 8008ee2:	61fb      	str	r3, [r7, #28]
        break;
 8008ee4:	e00d      	b.n	8008f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee6:	f7fc ffcb 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8008eea:	61f8      	str	r0, [r7, #28]
        break;
 8008eec:	e009      	b.n	8008f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ef2:	61fb      	str	r3, [r7, #28]
        break;
 8008ef4:	e005      	b.n	8008f02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d077      	beq.n	8008ff8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	005a      	lsls	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	085b      	lsrs	r3, r3, #1
 8008f12:	441a      	add	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2b0f      	cmp	r3, #15
 8008f22:	d916      	bls.n	8008f52 <UART_SetConfig+0x4a6>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f2a:	d212      	bcs.n	8008f52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f023 030f 	bic.w	r3, r3, #15
 8008f34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	8afb      	ldrh	r3, [r7, #22]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	8afa      	ldrh	r2, [r7, #22]
 8008f4e:	60da      	str	r2, [r3, #12]
 8008f50:	e052      	b.n	8008ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f58:	e04e      	b.n	8008ff8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d827      	bhi.n	8008fb2 <UART_SetConfig+0x506>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0x4bc>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008f8d 	.word	0x08008f8d
 8008f6c:	08008f95 	.word	0x08008f95
 8008f70:	08008f9d 	.word	0x08008f9d
 8008f74:	08008fb3 	.word	0x08008fb3
 8008f78:	08008fa3 	.word	0x08008fa3
 8008f7c:	08008fb3 	.word	0x08008fb3
 8008f80:	08008fb3 	.word	0x08008fb3
 8008f84:	08008fb3 	.word	0x08008fb3
 8008f88:	08008fab 	.word	0x08008fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f8c:	f7fd f810 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8008f90:	61f8      	str	r0, [r7, #28]
        break;
 8008f92:	e014      	b.n	8008fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f94:	f7fd f822 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8008f98:	61f8      	str	r0, [r7, #28]
        break;
 8008f9a:	e010      	b.n	8008fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009018 <UART_SetConfig+0x56c>)
 8008f9e:	61fb      	str	r3, [r7, #28]
        break;
 8008fa0:	e00d      	b.n	8008fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fa2:	f7fc ff6d 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8008fa6:	61f8      	str	r0, [r7, #28]
        break;
 8008fa8:	e009      	b.n	8008fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fae:	61fb      	str	r3, [r7, #28]
        break;
 8008fb0:	e005      	b.n	8008fbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d019      	beq.n	8008ff8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	085a      	lsrs	r2, r3, #1
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	441a      	add	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b0f      	cmp	r3, #15
 8008fdc:	d909      	bls.n	8008ff2 <UART_SetConfig+0x546>
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fe4:	d205      	bcs.n	8008ff2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60da      	str	r2, [r3, #12]
 8008ff0:	e002      	b.n	8008ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009004:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009008:	4618      	mov	r0, r3
 800900a:	3728      	adds	r7, #40	@ 0x28
 800900c:	46bd      	mov	sp, r7
 800900e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009012:	bf00      	nop
 8009014:	40008000 	.word	0x40008000
 8009018:	00f42400 	.word	0x00f42400

0800901c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009028:	f003 0308 	and.w	r3, r3, #8
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01a      	beq.n	8009132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800911a:	d10a      	bne.n	8009132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]
  }
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b098      	sub	sp, #96	@ 0x60
 8009164:	af02      	add	r7, sp, #8
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009170:	f7f9 f8fa 	bl	8002368 <HAL_GetTick>
 8009174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b08      	cmp	r3, #8
 8009182:	d12e      	bne.n	80091e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800918c:	2200      	movs	r2, #0
 800918e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f88c 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d021      	beq.n	80091e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80091be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e6      	bne.n	800919e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e062      	b.n	80092a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d149      	bne.n	8009284 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091f8:	2200      	movs	r2, #0
 80091fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f856 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d03c      	beq.n	8009284 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	623b      	str	r3, [r7, #32]
   return(result);
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800921e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009228:	633b      	str	r3, [r7, #48]	@ 0x30
 800922a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800922e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e6      	bne.n	800920a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	60fb      	str	r3, [r7, #12]
   return(result);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0301 	bic.w	r3, r3, #1
 8009252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800925c:	61fa      	str	r2, [r7, #28]
 800925e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	69b9      	ldr	r1, [r7, #24]
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	617b      	str	r3, [r7, #20]
   return(result);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2220      	movs	r2, #32
 8009274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e011      	b.n	80092a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2220      	movs	r2, #32
 8009288:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3758      	adds	r7, #88	@ 0x58
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092c0:	e04f      	b.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c8:	d04b      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ca:	f7f9 f84d 	bl	8002368 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e04e      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d037      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b80      	cmp	r3, #128	@ 0x80
 80092f6:	d034      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b40      	cmp	r3, #64	@ 0x40
 80092fc:	d031      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b08      	cmp	r3, #8
 800930a:	d110      	bne.n	800932e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2208      	movs	r2, #8
 8009312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f838 	bl	800938a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2208      	movs	r2, #8
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e029      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800933c:	d111      	bne.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 f81e 	bl	800938a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e00f      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4013      	ands	r3, r2
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	bf0c      	ite	eq
 8009372:	2301      	moveq	r3, #1
 8009374:	2300      	movne	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	429a      	cmp	r2, r3
 800937e:	d0a0      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800938a:	b480      	push	{r7}
 800938c:	b095      	sub	sp, #84	@ 0x54
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80093b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f023 0301 	bic.w	r3, r3, #1
 80093da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e5      	bne.n	80093c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d118      	bne.n	8009432 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	60bb      	str	r3, [r7, #8]
   return(result);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f023 0310 	bic.w	r3, r3, #16
 8009414:	647b      	str	r3, [r7, #68]	@ 0x44
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800941e:	61bb      	str	r3, [r7, #24]
 8009420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6979      	ldr	r1, [r7, #20]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	613b      	str	r3, [r7, #16]
   return(result);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e6      	bne.n	8009400 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009446:	bf00      	nop
 8009448:	3754      	adds	r7, #84	@ 0x54
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	f023 0101 	bic.w	r1, r3, #1
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b08      	cmp	r3, #8
 800947c:	d102      	bne.n	8009484 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800947e:	2340      	movs	r3, #64	@ 0x40
 8009480:	617b      	str	r3, [r7, #20]
 8009482:	e001      	b.n	8009488 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009494:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800949a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80094a0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80094a6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80094ac:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80094b2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80094b8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 80094be:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 80094c4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	4313      	orrs	r3, r2
 80094e0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80094ec:	4b20      	ldr	r3, [pc, #128]	@ (8009570 <FMC_NORSRAM_Init+0x11c>)
 80094ee:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094f6:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094fe:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009506:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	43db      	mvns	r3, r3
 8009516:	ea02 0103 	and.w	r1, r2, r3
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	4319      	orrs	r1, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800952c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009530:	d10c      	bne.n	800954c <FMC_NORSRAM_Init+0xf8>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d008      	beq.n	800954c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	0008fb7f 	.word	0x0008fb7f

08009574 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#else /* FMC_BTRx_DATAHLD */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800958a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8009592:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800959a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80095a4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	3b02      	subs	r3, #2
 80095ac:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80095ae:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80095ba:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ce:	d113      	bne.n	80095f8 <FMC_NORSRAM_Timing_Init+0x84>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095d8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	3b01      	subs	r3, #1
 80095e0:	051b      	lsls	r3, r3, #20
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800961c:	d11d      	bne.n	800965a <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009626:	4b13      	ldr	r3, [pc, #76]	@ (8009674 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009628:	4013      	ands	r3, r2
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	6811      	ldr	r1, [r2, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	6852      	ldr	r2, [r2, #4]
 8009632:	0112      	lsls	r2, r2, #4
 8009634:	4311      	orrs	r1, r2
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	6892      	ldr	r2, [r2, #8]
 800963a:	0212      	lsls	r2, r2, #8
 800963c:	4311      	orrs	r1, r2
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	69d2      	ldr	r2, [r2, #28]
 8009642:	4311      	orrs	r1, r2
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	6912      	ldr	r2, [r2, #16]
 8009648:	0412      	lsls	r2, r2, #16
 800964a:	430a      	orrs	r2, r1
 800964c:	ea43 0102 	orr.w	r1, r3, r2
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009658:	e005      	b.n	8009666 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	cff00000 	.word	0xcff00000

08009678 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009678:	b084      	sub	sp, #16
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	f107 001c 	add.w	r0, r7, #28
 8009686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 800969a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800969e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80096a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80096a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80096a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80096b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	b004      	add	sp, #16
 80096d0:	4770      	bx	lr

080096d2 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2203      	movs	r2, #3
 80096f8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80096fa:	2002      	movs	r0, #2
 80096fc:	f7f8 fe40 	bl	8002380 <HAL_Delay>

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0303 	and.w	r3, r3, #3
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009744:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800974a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009750:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009760:	f023 030f 	bic.w	r3, r3, #15
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	b2db      	uxtb	r3, r3
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3314      	adds	r3, #20
 80097a2:	461a      	mov	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	4413      	add	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80097e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80097ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009804:	2300      	movs	r3, #0

}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b088      	sub	sp, #32
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009820:	2310      	movs	r3, #16
 8009822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009824:	2340      	movs	r3, #64	@ 0x40
 8009826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800982c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009830:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009832:	f107 0308 	add.w	r3, r7, #8
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ff74 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800983e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009842:	2110      	movs	r1, #16
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f94d 	bl	8009ae4 <SDMMC_GetCmdResp1>
 800984a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800984c:	69fb      	ldr	r3, [r7, #28]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3720      	adds	r7, #32
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b08a      	sub	sp, #40	@ 0x28
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009866:	2307      	movs	r3, #7
 8009868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800986a:	2340      	movs	r3, #64	@ 0x40
 800986c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009876:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009878:	f107 0310 	add.w	r3, r7, #16
 800987c:	4619      	mov	r1, r3
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff ff51 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009888:	2107      	movs	r1, #7
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f92a 	bl	8009ae4 <SDMMC_GetCmdResp1>
 8009890:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009894:	4618      	mov	r0, r3
 8009896:	3728      	adds	r7, #40	@ 0x28
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80098ac:	2300      	movs	r3, #0
 80098ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff30 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fb44 	bl	8009f54 <SDMMC_GetCmdError>
 80098cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ce:	69fb      	ldr	r3, [r7, #28]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80098e0:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80098e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80098e6:	2308      	movs	r3, #8
 80098e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098ea:	2340      	movs	r3, #64	@ 0x40
 80098ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ff11 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fad7 	bl	8009eb8 <SDMMC_GetCmdResp7>
 800990a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b088      	sub	sp, #32
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009924:	2337      	movs	r3, #55	@ 0x37
 8009926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009928:	2340      	movs	r3, #64	@ 0x40
 800992a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800992c:	2300      	movs	r3, #0
 800992e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fef2 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009946:	2137      	movs	r1, #55	@ 0x37
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f8cb 	bl	8009ae4 <SDMMC_GetCmdResp1>
 800994e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009950:	69fb      	ldr	r3, [r7, #28]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b088      	sub	sp, #32
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800996a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800996e:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009970:	2329      	movs	r3, #41	@ 0x29
 8009972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009974:	2340      	movs	r3, #64	@ 0x40
 8009976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800997c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009980:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff fecc 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f9de 	bl	8009d50 <SDMMC_GetCmdResp3>
 8009994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009996:	69fb      	ldr	r3, [r7, #28]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80099ae:	2306      	movs	r3, #6
 80099b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099b2:	2340      	movs	r3, #64	@ 0x40
 80099b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099c0:	f107 0308 	add.w	r3, r7, #8
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff fead 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80099cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099d0:	2106      	movs	r1, #6
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f886 	bl	8009ae4 <SDMMC_GetCmdResp1>
 80099d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099da:	69fb      	ldr	r3, [r7, #28]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3720      	adds	r7, #32
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80099f0:	2333      	movs	r3, #51	@ 0x33
 80099f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099f4:	2340      	movs	r3, #64	@ 0x40
 80099f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a02:	f107 0308 	add.w	r3, r7, #8
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff fe8c 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a12:	2133      	movs	r1, #51	@ 0x33
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f865 	bl	8009ae4 <SDMMC_GetCmdResp1>
 8009a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b088      	sub	sp, #32
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a32:	2302      	movs	r3, #2
 8009a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009a36:	23c0      	movs	r3, #192	@ 0xc0
 8009a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a44:	f107 0308 	add.w	r3, r7, #8
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff fe6b 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f935 	bl	8009cc0 <SDMMC_GetCmdResp2>
 8009a56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a58:	69fb      	ldr	r3, [r7, #28]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b088      	sub	sp, #32
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a70:	2309      	movs	r3, #9
 8009a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009a74:	23c0      	movs	r3, #192	@ 0xc0
 8009a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a82:	f107 0308 	add.w	r3, r7, #8
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff fe4c 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f916 	bl	8009cc0 <SDMMC_GetCmdResp2>
 8009a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a96:	69fb      	ldr	r3, [r7, #28]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3720      	adds	r7, #32
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ab2:	2340      	movs	r3, #64	@ 0x40
 8009ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009abe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac0:	f107 0308 	add.w	r3, r7, #8
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff fe2d 	bl	8009726 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	2103      	movs	r1, #3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f97b 	bl	8009dcc <SDMMC_GetCmdResp6>
 8009ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	460b      	mov	r3, r1
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009af2:	4b70      	ldr	r3, [pc, #448]	@ (8009cb4 <SDMMC_GetCmdResp1+0x1d0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a70      	ldr	r2, [pc, #448]	@ (8009cb8 <SDMMC_GetCmdResp1+0x1d4>)
 8009af8:	fba2 2303 	umull	r2, r3, r2, r3
 8009afc:	0a5a      	lsrs	r2, r3, #9
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	fb02 f303 	mul.w	r3, r2, r3
 8009b04:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	1e5a      	subs	r2, r3, #1
 8009b0a:	61fa      	str	r2, [r7, #28]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b14:	e0c9      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0ef      	beq.n	8009b06 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1ea      	bne.n	8009b06 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2204      	movs	r2, #4
 8009b40:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b42:	2304      	movs	r3, #4
 8009b44:	e0b1      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d004      	beq.n	8009b5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0a6      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	22c5      	movs	r2, #197	@ 0xc5
 8009b60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff fe09 	bl	800977a <SDMMC_GetCommandResponse>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d001      	beq.n	8009b76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e099      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b76:	2100      	movs	r1, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff fe0b 	bl	8009794 <SDMMC_GetResponse>
 8009b7e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4b4e      	ldr	r3, [pc, #312]	@ (8009cbc <SDMMC_GetCmdResp1+0x1d8>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e08d      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da02      	bge.n	8009b9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b98:	e087      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ba4:	2340      	movs	r3, #64	@ 0x40
 8009ba6:	e080      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bb2:	2380      	movs	r3, #128	@ 0x80
 8009bb4:	e079      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bc4:	e071      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd4:	e069      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009be4:	e061      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009bf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bf4:	e059      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c04:	e051      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c14:	e049      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c24:	e041      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c34:	e039      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c44:	e031      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009c54:	e029      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c64:	e021      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009c74:	e019      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009c84:	e011      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009c90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009c94:	e009      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009ca0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009ca4:	e001      	b.n	8009caa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ca6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000000 	.word	0x20000000
 8009cb8:	10624dd3 	.word	0x10624dd3
 8009cbc:	fdffe008 	.word	0xfdffe008

08009cc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d48 <SDMMC_GetCmdResp2+0x88>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8009d4c <SDMMC_GetCmdResp2+0x8c>)
 8009cce:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd2:	0a5b      	lsrs	r3, r3, #9
 8009cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd8:	fb02 f303 	mul.w	r3, r2, r3
 8009cdc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1e5a      	subs	r2, r3, #1
 8009ce2:	60fa      	str	r2, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cec:	e026      	b.n	8009d3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d0ef      	beq.n	8009cde <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1ea      	bne.n	8009cde <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2204      	movs	r2, #4
 8009d18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	e00e      	b.n	8009d3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e003      	b.n	8009d3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	22c5      	movs	r2, #197	@ 0xc5
 8009d38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	20000000 	.word	0x20000000
 8009d4c:	10624dd3 	.word	0x10624dd3

08009d50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d58:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc4 <SDMMC_GetCmdResp3+0x74>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc8 <SDMMC_GetCmdResp3+0x78>)
 8009d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d62:	0a5b      	lsrs	r3, r3, #9
 8009d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d68:	fb02 f303 	mul.w	r3, r2, r3
 8009d6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1e5a      	subs	r2, r3, #1
 8009d72:	60fa      	str	r2, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d7c:	e01b      	b.n	8009db6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0ef      	beq.n	8009d6e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1ea      	bne.n	8009d6e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d004      	beq.n	8009dae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2204      	movs	r2, #4
 8009da8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009daa:	2304      	movs	r3, #4
 8009dac:	e003      	b.n	8009db6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	22c5      	movs	r2, #197	@ 0xc5
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	20000000 	.word	0x20000000
 8009dc8:	10624dd3 	.word	0x10624dd3

08009dcc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009dda:	4b35      	ldr	r3, [pc, #212]	@ (8009eb0 <SDMMC_GetCmdResp6+0xe4>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a35      	ldr	r2, [pc, #212]	@ (8009eb4 <SDMMC_GetCmdResp6+0xe8>)
 8009de0:	fba2 2303 	umull	r2, r3, r2, r3
 8009de4:	0a5b      	lsrs	r3, r3, #9
 8009de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
 8009dee:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	1e5a      	subs	r2, r3, #1
 8009df4:	61fa      	str	r2, [r7, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dfa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dfe:	e052      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e04:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0ef      	beq.n	8009df0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1ea      	bne.n	8009df0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e1e:	f003 0304 	and.w	r3, r3, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2204      	movs	r2, #4
 8009e2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	e03a      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d004      	beq.n	8009e46 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e02f      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7ff fc97 	bl	800977a <SDMMC_GetCommandResponse>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	461a      	mov	r2, r3
 8009e50:	7afb      	ldrb	r3, [r7, #11]
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d001      	beq.n	8009e5a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e025      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	22c5      	movs	r2, #197	@ 0xc5
 8009e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e60:	2100      	movs	r1, #0
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff fc96 	bl	8009794 <SDMMC_GetResponse>
 8009e68:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	0c1b      	lsrs	r3, r3, #16
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e011      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e90:	e009      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ea0:	e001      	b.n	8009ea6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ea2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3720      	adds	r7, #32
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000000 	.word	0x20000000
 8009eb4:	10624dd3 	.word	0x10624dd3

08009eb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ec0:	4b22      	ldr	r3, [pc, #136]	@ (8009f4c <SDMMC_GetCmdResp7+0x94>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a22      	ldr	r2, [pc, #136]	@ (8009f50 <SDMMC_GetCmdResp7+0x98>)
 8009ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eca:	0a5b      	lsrs	r3, r3, #9
 8009ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ed0:	fb02 f303 	mul.w	r3, r2, r3
 8009ed4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	1e5a      	subs	r2, r3, #1
 8009eda:	60fa      	str	r2, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ee0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ee4:	e02c      	b.n	8009f40 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0ef      	beq.n	8009ed6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1ea      	bne.n	8009ed6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d004      	beq.n	8009f16 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2204      	movs	r2, #4
 8009f10:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f12:	2304      	movs	r3, #4
 8009f14:	e014      	b.n	8009f40 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d004      	beq.n	8009f2c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e009      	b.n	8009f40 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2240      	movs	r2, #64	@ 0x40
 8009f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f3e:	2300      	movs	r3, #0

}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20000000 	.word	0x20000000
 8009f50:	10624dd3 	.word	0x10624dd3

08009f54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f5c:	4b11      	ldr	r3, [pc, #68]	@ (8009fa4 <SDMMC_GetCmdError+0x50>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a11      	ldr	r2, [pc, #68]	@ (8009fa8 <SDMMC_GetCmdError+0x54>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	0a5b      	lsrs	r3, r3, #9
 8009f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f6c:	fb02 f303 	mul.w	r3, r2, r3
 8009f70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1e5a      	subs	r2, r3, #1
 8009f76:	60fa      	str	r2, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f80:	e009      	b.n	8009f96 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f1      	beq.n	8009f72 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	22c5      	movs	r2, #197	@ 0xc5
 8009f92:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	20000000 	.word	0x20000000
 8009fa8:	10624dd3 	.word	0x10624dd3

08009fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fac:	b084      	sub	sp, #16
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	f107 001c 	add.w	r0, r7, #28
 8009fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fa26 	bl	800b41c <USB_CoreReset>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009fd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d106      	bne.n	8009fea <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fe8:	e005      	b.n	8009ff6 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a002:	b004      	add	sp, #16
 800a004:	4770      	bx	lr
	...

0800a008 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d165      	bne.n	800a0e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a3e      	ldr	r2, [pc, #248]	@ (800a118 <USB_SetTurnaroundTime+0x110>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d906      	bls.n	800a032 <USB_SetTurnaroundTime+0x2a>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4a3d      	ldr	r2, [pc, #244]	@ (800a11c <USB_SetTurnaroundTime+0x114>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d202      	bcs.n	800a032 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a02c:	230f      	movs	r3, #15
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e05c      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a39      	ldr	r2, [pc, #228]	@ (800a11c <USB_SetTurnaroundTime+0x114>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d306      	bcc.n	800a048 <USB_SetTurnaroundTime+0x40>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4a38      	ldr	r2, [pc, #224]	@ (800a120 <USB_SetTurnaroundTime+0x118>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d202      	bcs.n	800a048 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a042:	230e      	movs	r3, #14
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e051      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4a35      	ldr	r2, [pc, #212]	@ (800a120 <USB_SetTurnaroundTime+0x118>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d306      	bcc.n	800a05e <USB_SetTurnaroundTime+0x56>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4a34      	ldr	r2, [pc, #208]	@ (800a124 <USB_SetTurnaroundTime+0x11c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d202      	bcs.n	800a05e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a058:	230d      	movs	r3, #13
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e046      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4a30      	ldr	r2, [pc, #192]	@ (800a124 <USB_SetTurnaroundTime+0x11c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d306      	bcc.n	800a074 <USB_SetTurnaroundTime+0x6c>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	4a2f      	ldr	r2, [pc, #188]	@ (800a128 <USB_SetTurnaroundTime+0x120>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d802      	bhi.n	800a074 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a06e:	230c      	movs	r3, #12
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	e03b      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4a2c      	ldr	r2, [pc, #176]	@ (800a128 <USB_SetTurnaroundTime+0x120>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d906      	bls.n	800a08a <USB_SetTurnaroundTime+0x82>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4a2b      	ldr	r2, [pc, #172]	@ (800a12c <USB_SetTurnaroundTime+0x124>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d802      	bhi.n	800a08a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a084:	230b      	movs	r3, #11
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e030      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	4a27      	ldr	r2, [pc, #156]	@ (800a12c <USB_SetTurnaroundTime+0x124>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d906      	bls.n	800a0a0 <USB_SetTurnaroundTime+0x98>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	4a26      	ldr	r2, [pc, #152]	@ (800a130 <USB_SetTurnaroundTime+0x128>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d802      	bhi.n	800a0a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a09a:	230a      	movs	r3, #10
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	e025      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4a23      	ldr	r2, [pc, #140]	@ (800a130 <USB_SetTurnaroundTime+0x128>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d906      	bls.n	800a0b6 <USB_SetTurnaroundTime+0xae>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4a22      	ldr	r2, [pc, #136]	@ (800a134 <USB_SetTurnaroundTime+0x12c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d202      	bcs.n	800a0b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a0b0:	2309      	movs	r3, #9
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e01a      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4a1e      	ldr	r2, [pc, #120]	@ (800a134 <USB_SetTurnaroundTime+0x12c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d306      	bcc.n	800a0cc <USB_SetTurnaroundTime+0xc4>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a138 <USB_SetTurnaroundTime+0x130>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d802      	bhi.n	800a0cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a0c6:	2308      	movs	r3, #8
 800a0c8:	617b      	str	r3, [r7, #20]
 800a0ca:	e00f      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a138 <USB_SetTurnaroundTime+0x130>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d906      	bls.n	800a0e2 <USB_SetTurnaroundTime+0xda>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	4a19      	ldr	r2, [pc, #100]	@ (800a13c <USB_SetTurnaroundTime+0x134>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d202      	bcs.n	800a0e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a0dc:	2307      	movs	r3, #7
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e004      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a0e2:	2306      	movs	r3, #6
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e001      	b.n	800a0ec <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a0e8:	2309      	movs	r3, #9
 800a0ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	029b      	lsls	r3, r3, #10
 800a100:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a104:	431a      	orrs	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	00d8acbf 	.word	0x00d8acbf
 800a11c:	00e4e1c0 	.word	0x00e4e1c0
 800a120:	00f42400 	.word	0x00f42400
 800a124:	01067380 	.word	0x01067380
 800a128:	011a499f 	.word	0x011a499f
 800a12c:	01312cff 	.word	0x01312cff
 800a130:	014ca43f 	.word	0x014ca43f
 800a134:	016e3600 	.word	0x016e3600
 800a138:	01a6ab1f 	.word	0x01a6ab1f
 800a13c:	01e84800 	.word	0x01e84800

0800a140 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f043 0201 	orr.w	r2, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f023 0201 	bic.w	r2, r3, #1
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d115      	bne.n	800a1d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a1b2:	200a      	movs	r0, #10
 800a1b4:	f7f8 f8e4 	bl	8002380 <HAL_Delay>
      ms += 10U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	330a      	adds	r3, #10
 800a1bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 f8b3 	bl	800b32a <USB_GetMode>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d01e      	beq.n	800a208 <USB_SetCurrentMode+0x84>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2bc7      	cmp	r3, #199	@ 0xc7
 800a1ce:	d9f0      	bls.n	800a1b2 <USB_SetCurrentMode+0x2e>
 800a1d0:	e01a      	b.n	800a208 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d115      	bne.n	800a204 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a1e4:	200a      	movs	r0, #10
 800a1e6:	f7f8 f8cb 	bl	8002380 <HAL_Delay>
      ms += 10U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	330a      	adds	r3, #10
 800a1ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 f89a 	bl	800b32a <USB_GetMode>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <USB_SetCurrentMode+0x84>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2bc7      	cmp	r3, #199	@ 0xc7
 800a200:	d9f0      	bls.n	800a1e4 <USB_SetCurrentMode+0x60>
 800a202:	e001      	b.n	800a208 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e005      	b.n	800a214 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a20c:	d101      	bne.n	800a212 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a21c:	b084      	sub	sp, #16
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a22a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a236:	2300      	movs	r3, #0
 800a238:	613b      	str	r3, [r7, #16]
 800a23a:	e009      	b.n	800a250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	3340      	adds	r3, #64	@ 0x40
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	2200      	movs	r2, #0
 800a248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3301      	adds	r3, #1
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	2b0e      	cmp	r3, #14
 800a254:	d9f2      	bls.n	800a23c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a256:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d11c      	bne.n	800a298 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a276:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e005      	b.n	800a2a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a2b0:	2103      	movs	r1, #3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f95a 	bl	800a56c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2b8:	2110      	movs	r1, #16
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f8f6 	bl	800a4ac <USB_FlushTxFifo>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f920 	bl	800a510 <USB_FlushRxFifo>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2fe:	2300      	movs	r3, #0
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	e043      	b.n	800a38c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a31a:	d118      	bne.n	800a34e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10a      	bne.n	800a338 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a32e:	461a      	mov	r2, r3
 800a330:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	e013      	b.n	800a360 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a344:	461a      	mov	r2, r3
 800a346:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	e008      	b.n	800a360 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a35a:	461a      	mov	r2, r3
 800a35c:	2300      	movs	r3, #0
 800a35e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36c:	461a      	mov	r2, r3
 800a36e:	2300      	movs	r3, #0
 800a370:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a37e:	461a      	mov	r2, r3
 800a380:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3301      	adds	r3, #1
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a390:	461a      	mov	r2, r3
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4293      	cmp	r3, r2
 800a396:	d3b5      	bcc.n	800a304 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a398:	2300      	movs	r3, #0
 800a39a:	613b      	str	r3, [r7, #16]
 800a39c:	e043      	b.n	800a426 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3b4:	d118      	bne.n	800a3e8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	e013      	b.n	800a3fa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	e008      	b.n	800a3fa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a406:	461a      	mov	r2, r3
 800a408:	2300      	movs	r3, #0
 800a40a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a418:	461a      	mov	r2, r3
 800a41a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a41e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	3301      	adds	r3, #1
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a42a:	461a      	mov	r2, r3
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4293      	cmp	r3, r2
 800a430:	d3b5      	bcc.n	800a39e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a444:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a452:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	f043 0210 	orr.w	r2, r3, #16
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	699a      	ldr	r2, [r3, #24]
 800a464:	4b10      	ldr	r3, [pc, #64]	@ (800a4a8 <USB_DevInit+0x28c>)
 800a466:	4313      	orrs	r3, r2
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a46c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	f043 0208 	orr.w	r2, r3, #8
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a480:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a484:	2b01      	cmp	r3, #1
 800a486:	d107      	bne.n	800a498 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a490:	f043 0304 	orr.w	r3, r3, #4
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a498:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4a4:	b004      	add	sp, #16
 800a4a6:	4770      	bx	lr
 800a4a8:	803c3800 	.word	0x803c3800

0800a4ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4c6:	d901      	bls.n	800a4cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e01b      	b.n	800a504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	daf2      	bge.n	800a4ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	019b      	lsls	r3, r3, #6
 800a4dc:	f043 0220 	orr.w	r2, r3, #32
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4f0:	d901      	bls.n	800a4f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e006      	b.n	800a504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b20      	cmp	r3, #32
 800a500:	d0f0      	beq.n	800a4e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	3301      	adds	r3, #1
 800a520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a528:	d901      	bls.n	800a52e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e018      	b.n	800a560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	daf2      	bge.n	800a51c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2210      	movs	r2, #16
 800a53e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3301      	adds	r3, #1
 800a544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a54c:	d901      	bls.n	800a552 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e006      	b.n	800a560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0310 	and.w	r3, r3, #16
 800a55a:	2b10      	cmp	r3, #16
 800a55c:	d0f0      	beq.n	800a540 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	68f9      	ldr	r1, [r7, #12]
 800a588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a58c:	4313      	orrs	r3, r2
 800a58e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b087      	sub	sp, #28
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f003 0306 	and.w	r3, r3, #6
 800a5b6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d002      	beq.n	800a5c4 <USB_GetDevSpeed+0x26>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b06      	cmp	r3, #6
 800a5c2:	d102      	bne.n	800a5ca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	75fb      	strb	r3, [r7, #23]
 800a5c8:	e001      	b.n	800a5ce <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a5ca:	230f      	movs	r3, #15
 800a5cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	371c      	adds	r7, #28
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d13a      	bne.n	800a66e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5fe:	69da      	ldr	r2, [r3, #28]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	2101      	movs	r1, #1
 800a60a:	fa01 f303 	lsl.w	r3, r1, r3
 800a60e:	b29b      	uxth	r3, r3
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a616:	4313      	orrs	r3, r2
 800a618:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d155      	bne.n	800a6dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	791b      	ldrb	r3, [r3, #4]
 800a64a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a64c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	059b      	lsls	r3, r3, #22
 800a652:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a654:	4313      	orrs	r3, r2
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	0151      	lsls	r1, r2, #5
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	440a      	add	r2, r1
 800a65e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	e036      	b.n	800a6dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a674:	69da      	ldr	r2, [r3, #28]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f003 030f 	and.w	r3, r3, #15
 800a67e:	2101      	movs	r1, #1
 800a680:	fa01 f303 	lsl.w	r3, r1, r3
 800a684:	041b      	lsls	r3, r3, #16
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a68c:	4313      	orrs	r3, r2
 800a68e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d11a      	bne.n	800a6dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	791b      	ldrb	r3, [r3, #4]
 800a6c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6c2:	430b      	orrs	r3, r1
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	0151      	lsls	r1, r2, #5
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	785b      	ldrb	r3, [r3, #1]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d161      	bne.n	800a7cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a71a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a71e:	d11f      	bne.n	800a760 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a73a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a73e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	440a      	add	r2, r1
 800a756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a75a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a75e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	2101      	movs	r1, #1
 800a772:	fa01 f303 	lsl.w	r3, r1, r3
 800a776:	b29b      	uxth	r3, r3
 800a778:	43db      	mvns	r3, r3
 800a77a:	68f9      	ldr	r1, [r7, #12]
 800a77c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a780:	4013      	ands	r3, r2
 800a782:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	2101      	movs	r1, #1
 800a796:	fa01 f303 	lsl.w	r3, r1, r3
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	43db      	mvns	r3, r3
 800a79e:	68f9      	ldr	r1, [r7, #12]
 800a7a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	0159      	lsls	r1, r3, #5
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	440b      	add	r3, r1
 800a7be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4b35      	ldr	r3, [pc, #212]	@ (800a89c <USB_DeactivateEndpoint+0x1b0>)
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	600b      	str	r3, [r1, #0]
 800a7ca:	e060      	b.n	800a88e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7e2:	d11f      	bne.n	800a824 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	0151      	lsls	r1, r2, #5
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	440a      	add	r2, r1
 800a7fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a802:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	0151      	lsls	r1, r2, #5
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	440a      	add	r2, r1
 800a81a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a81e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a822:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	f003 030f 	and.w	r3, r3, #15
 800a834:	2101      	movs	r1, #1
 800a836:	fa01 f303 	lsl.w	r3, r1, r3
 800a83a:	041b      	lsls	r3, r3, #16
 800a83c:	43db      	mvns	r3, r3
 800a83e:	68f9      	ldr	r1, [r7, #12]
 800a840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a844:	4013      	ands	r3, r2
 800a846:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a84e:	69da      	ldr	r2, [r3, #28]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 030f 	and.w	r3, r3, #15
 800a858:	2101      	movs	r1, #1
 800a85a:	fa01 f303 	lsl.w	r3, r1, r3
 800a85e:	041b      	lsls	r3, r3, #16
 800a860:	43db      	mvns	r3, r3
 800a862:	68f9      	ldr	r1, [r7, #12]
 800a864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a868:	4013      	ands	r3, r2
 800a86a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	0159      	lsls	r1, r3, #5
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	440b      	add	r3, r1
 800a882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a886:	4619      	mov	r1, r3
 800a888:	4b05      	ldr	r3, [pc, #20]	@ (800a8a0 <USB_DeactivateEndpoint+0x1b4>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	ec337800 	.word	0xec337800
 800a8a0:	eff37800 	.word	0xeff37800

0800a8a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	785b      	ldrb	r3, [r3, #1]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	f040 812d 	bne.w	800ab1c <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d132      	bne.n	800a930 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	0151      	lsls	r1, r2, #5
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	440a      	add	r2, r1
 800a8e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a8e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a8ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	0151      	lsls	r1, r2, #5
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	440a      	add	r2, r1
 800a904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a908:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a90c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	0151      	lsls	r1, r2, #5
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	440a      	add	r2, r1
 800a924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a928:	0cdb      	lsrs	r3, r3, #19
 800a92a:	04db      	lsls	r3, r3, #19
 800a92c:	6113      	str	r3, [r2, #16]
 800a92e:	e097      	b.n	800aa60 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	0151      	lsls	r1, r2, #5
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	440a      	add	r2, r1
 800a946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a94a:	0cdb      	lsrs	r3, r3, #19
 800a94c:	04db      	lsls	r3, r3, #19
 800a94e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	0151      	lsls	r1, r2, #5
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	440a      	add	r2, r1
 800a966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a96a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a96e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a972:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d11a      	bne.n	800a9b0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	691a      	ldr	r2, [r3, #16]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	429a      	cmp	r2, r3
 800a984:	d903      	bls.n	800a98e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	689a      	ldr	r2, [r3, #8]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9ac:	6113      	str	r3, [r2, #16]
 800a9ae:	e044      	b.n	800aa3a <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	1e5a      	subs	r2, r3, #1
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c4:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d2:	691a      	ldr	r2, [r3, #16]
 800a9d4:	89fb      	ldrh	r3, [r7, #14]
 800a9d6:	04d9      	lsls	r1, r3, #19
 800a9d8:	4b8f      	ldr	r3, [pc, #572]	@ (800ac18 <USB_EPStartXfer+0x374>)
 800a9da:	400b      	ands	r3, r1
 800a9dc:	6939      	ldr	r1, [r7, #16]
 800a9de:	0148      	lsls	r0, r1, #5
 800a9e0:	6979      	ldr	r1, [r7, #20]
 800a9e2:	4401      	add	r1, r0
 800a9e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	791b      	ldrb	r3, [r3, #4]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d122      	bne.n	800aa3a <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	0151      	lsls	r1, r2, #5
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	440a      	add	r2, r1
 800aa0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa0e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800aa12:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	89fb      	ldrh	r3, [r7, #14]
 800aa24:	075b      	lsls	r3, r3, #29
 800aa26:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800aa2a:	6939      	ldr	r1, [r7, #16]
 800aa2c:	0148      	lsls	r0, r1, #5
 800aa2e:	6979      	ldr	r1, [r7, #20]
 800aa30:	4401      	add	r1, r0
 800aa32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aa36:	4313      	orrs	r3, r2
 800aa38:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa46:	691a      	ldr	r2, [r3, #16]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa50:	6939      	ldr	r1, [r7, #16]
 800aa52:	0148      	lsls	r0, r1, #5
 800aa54:	6979      	ldr	r1, [r7, #20]
 800aa56:	4401      	add	r1, r0
 800aa58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	0151      	lsls	r1, r2, #5
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	440a      	add	r2, r1
 800aa76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa7e:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	791b      	ldrb	r3, [r3, #4]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d015      	beq.n	800aab4 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 813a 	beq.w	800ad06 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa8:	6979      	ldr	r1, [r7, #20]
 800aaaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aaae:	4313      	orrs	r3, r2
 800aab0:	634b      	str	r3, [r1, #52]	@ 0x34
 800aab2:	e128      	b.n	800ad06 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d110      	bne.n	800aae6 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	0151      	lsls	r1, r2, #5
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	440a      	add	r2, r1
 800aada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aade:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aae2:	6013      	str	r3, [r2, #0]
 800aae4:	e00f      	b.n	800ab06 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	0151      	lsls	r1, r2, #5
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	440a      	add	r2, r1
 800aafc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab04:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68d9      	ldr	r1, [r3, #12]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f9a7 	bl	800ae68 <USB_WritePacket>
 800ab1a:	e0f4      	b.n	800ad06 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	0151      	lsls	r1, r2, #5
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	440a      	add	r2, r1
 800ab32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab36:	0cdb      	lsrs	r3, r3, #19
 800ab38:	04db      	lsls	r3, r3, #19
 800ab3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	0151      	lsls	r1, r2, #5
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	440a      	add	r2, r1
 800ab52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab5e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d12f      	bne.n	800abc6 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab94:	6939      	ldr	r1, [r7, #16]
 800ab96:	0148      	lsls	r0, r1, #5
 800ab98:	6979      	ldr	r1, [r7, #20]
 800ab9a:	4401      	add	r1, r0
 800ab9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aba0:	4313      	orrs	r3, r2
 800aba2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	0151      	lsls	r1, r2, #5
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	440a      	add	r2, r1
 800abba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abc2:	6113      	str	r3, [r2, #16]
 800abc4:	e062      	b.n	800ac8c <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d126      	bne.n	800ac1c <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abda:	691a      	ldr	r2, [r3, #16]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abe4:	6939      	ldr	r1, [r7, #16]
 800abe6:	0148      	lsls	r0, r1, #5
 800abe8:	6979      	ldr	r1, [r7, #20]
 800abea:	4401      	add	r1, r0
 800abec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800abf0:	4313      	orrs	r3, r2
 800abf2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac12:	6113      	str	r3, [r2, #16]
 800ac14:	e03a      	b.n	800ac8c <USB_EPStartXfer+0x3e8>
 800ac16:	bf00      	nop
 800ac18:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	4413      	add	r3, r2
 800ac26:	1e5a      	subs	r2, r3, #1
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac30:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	89fa      	ldrh	r2, [r7, #14]
 800ac38:	fb03 f202 	mul.w	r2, r3, r2
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac4c:	691a      	ldr	r2, [r3, #16]
 800ac4e:	89fb      	ldrh	r3, [r7, #14]
 800ac50:	04d9      	lsls	r1, r3, #19
 800ac52:	4b2f      	ldr	r3, [pc, #188]	@ (800ad10 <USB_EPStartXfer+0x46c>)
 800ac54:	400b      	ands	r3, r1
 800ac56:	6939      	ldr	r1, [r7, #16]
 800ac58:	0148      	lsls	r0, r1, #5
 800ac5a:	6979      	ldr	r1, [r7, #20]
 800ac5c:	4401      	add	r1, r0
 800ac5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac62:	4313      	orrs	r3, r2
 800ac64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac7c:	6939      	ldr	r1, [r7, #16]
 800ac7e:	0148      	lsls	r0, r1, #5
 800ac80:	6979      	ldr	r1, [r7, #20]
 800ac82:	4401      	add	r1, r0
 800ac84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	791b      	ldrb	r3, [r3, #4]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d128      	bne.n	800ace6 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d110      	bne.n	800acc6 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	0151      	lsls	r1, r2, #5
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	440a      	add	r2, r1
 800acba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	e00f      	b.n	800ace6 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ace0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ace4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	0151      	lsls	r1, r2, #5
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	440a      	add	r2, r1
 800acfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	1ff80000 	.word	0x1ff80000

0800ad14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	785b      	ldrb	r3, [r3, #1]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d14a      	bne.n	800adc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad4a:	f040 8086 	bne.w	800ae5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	7812      	ldrb	r2, [r2, #0]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	7812      	ldrb	r2, [r2, #0]
 800ad86:	0151      	lsls	r1, r2, #5
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	440a      	add	r2, r1
 800ad8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d902      	bls.n	800adac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	75fb      	strb	r3, [r7, #23]
          break;
 800adaa:	e056      	b.n	800ae5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adc4:	d0e7      	beq.n	800ad96 <USB_EPStopXfer+0x82>
 800adc6:	e048      	b.n	800ae5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800addc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ade0:	d13b      	bne.n	800ae5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	7812      	ldrb	r2, [r2, #0]
 800adf6:	0151      	lsls	r1, r2, #5
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	440a      	add	r2, r1
 800adfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	7812      	ldrb	r2, [r2, #0]
 800ae1a:	0151      	lsls	r1, r2, #5
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	440a      	add	r2, r1
 800ae20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d902      	bls.n	800ae40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae3e:	e00c      	b.n	800ae5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae58:	d0e7      	beq.n	800ae2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b089      	sub	sp, #36	@ 0x24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	4611      	mov	r1, r2
 800ae74:	461a      	mov	r2, r3
 800ae76:	460b      	mov	r3, r1
 800ae78:	71fb      	strb	r3, [r7, #7]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ae86:	88bb      	ldrh	r3, [r7, #4]
 800ae88:	3303      	adds	r3, #3
 800ae8a:	089b      	lsrs	r3, r3, #2
 800ae8c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61bb      	str	r3, [r7, #24]
 800ae92:	e018      	b.n	800aec6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	031a      	lsls	r2, r3, #12
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea0:	461a      	mov	r2, r3
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	3301      	adds	r3, #1
 800aebe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	3301      	adds	r3, #1
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d3e2      	bcc.n	800ae94 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3724      	adds	r7, #36	@ 0x24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aedc:	b480      	push	{r7}
 800aede:	b08b      	sub	sp, #44	@ 0x2c
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4613      	mov	r3, r2
 800aee8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aef2:	88fb      	ldrh	r3, [r7, #6]
 800aef4:	089b      	lsrs	r3, r3, #2
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af02:	2300      	movs	r3, #0
 800af04:	623b      	str	r3, [r7, #32]
 800af06:	e014      	b.n	800af32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af12:	601a      	str	r2, [r3, #0]
    pDest++;
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	3301      	adds	r3, #1
 800af18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1c:	3301      	adds	r3, #1
 800af1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	3301      	adds	r3, #1
 800af24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	3301      	adds	r3, #1
 800af2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	3301      	adds	r3, #1
 800af30:	623b      	str	r3, [r7, #32]
 800af32:	6a3a      	ldr	r2, [r7, #32]
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	429a      	cmp	r2, r3
 800af38:	d3e6      	bcc.n	800af08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af3a:	8bfb      	ldrh	r3, [r7, #30]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01e      	beq.n	800af7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af4a:	461a      	mov	r2, r3
 800af4c:	f107 0310 	add.w	r3, r7, #16
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	fa22 f303 	lsr.w	r3, r2, r3
 800af60:	b2da      	uxtb	r2, r3
 800af62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af64:	701a      	strb	r2, [r3, #0]
      i++;
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	3301      	adds	r3, #1
 800af6a:	623b      	str	r3, [r7, #32]
      pDest++;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	3301      	adds	r3, #1
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800af72:	8bfb      	ldrh	r3, [r7, #30]
 800af74:	3b01      	subs	r3, #1
 800af76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800af78:	8bfb      	ldrh	r3, [r7, #30]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1ea      	bne.n	800af54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af80:	4618      	mov	r0, r3
 800af82:	372c      	adds	r7, #44	@ 0x2c
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d12c      	bne.n	800b002 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	db12      	blt.n	800afe0 <USB_EPSetStall+0x54>
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00f      	beq.n	800afe0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	0151      	lsls	r1, r2, #5
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	440a      	add	r2, r1
 800afd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800afde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	0151      	lsls	r1, r2, #5
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	440a      	add	r2, r1
 800aff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800affa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	e02b      	b.n	800b05a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db12      	blt.n	800b03a <USB_EPSetStall+0xae>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00f      	beq.n	800b03a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b034:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b038:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b058:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	785b      	ldrb	r3, [r3, #1]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d128      	bne.n	800b0d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	0151      	lsls	r1, r2, #5
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	440a      	add	r2, r1
 800b09a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b09e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b0a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	791b      	ldrb	r3, [r3, #4]
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d003      	beq.n	800b0b4 <USB_EPClearStall+0x4c>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	791b      	ldrb	r3, [r3, #4]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d138      	bne.n	800b126 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	e027      	b.n	800b126 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	0151      	lsls	r1, r2, #5
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	440a      	add	r2, r1
 800b0ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b0f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	791b      	ldrb	r3, [r3, #4]
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d003      	beq.n	800b106 <USB_EPClearStall+0x9e>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	791b      	ldrb	r3, [r3, #4]
 800b102:	2b02      	cmp	r3, #2
 800b104:	d10f      	bne.n	800b126 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	0151      	lsls	r1, r2, #5
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	440a      	add	r2, r1
 800b11c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b124:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b152:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b156:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b168:	68f9      	ldr	r1, [r7, #12]
 800b16a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b16e:	4313      	orrs	r3, r2
 800b170:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1ae:	f023 0302 	bic.w	r3, r3, #2
 800b1b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1dc:	f023 0303 	bic.w	r3, r3, #3
 800b1e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1f0:	f043 0302 	orr.w	r3, r3, #2
 800b1f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	4013      	ands	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b21c:	68fb      	ldr	r3, [r7, #12]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b085      	sub	sp, #20
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	4013      	ands	r3, r2
 800b24c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	0c1b      	lsrs	r3, r3, #16
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b25e:	b480      	push	{r7}
 800b260:	b085      	sub	sp, #20
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	4013      	ands	r3, r2
 800b280:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	b29b      	uxth	r3, r3
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	460b      	mov	r3, r1
 800b29c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b2a2:	78fb      	ldrb	r3, [r7, #3]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b087      	sub	sp, #28
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b2f2:	78fb      	ldrb	r3, [r7, #3]
 800b2f4:	f003 030f 	and.w	r3, r3, #15
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b2fe:	01db      	lsls	r3, r3, #7
 800b300:	b2db      	uxtb	r3, r3
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	4313      	orrs	r3, r2
 800b306:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b308:	78fb      	ldrb	r3, [r7, #3]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	4013      	ands	r3, r2
 800b31a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b31c:	68bb      	ldr	r3, [r7, #8]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	371c      	adds	r7, #28
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	f003 0301 	and.w	r3, r3, #1
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b360:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b364:	f023 0307 	bic.w	r3, r3, #7
 800b368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b37c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	333c      	adds	r3, #60	@ 0x3c
 800b39e:	3304      	adds	r3, #4
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b418 <USB_EP0_OutStart+0x8c>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d90a      	bls.n	800b3c2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3bc:	d101      	bne.n	800b3c2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e024      	b.n	800b40c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3f0:	f043 0318 	orr.w	r3, r3, #24
 800b3f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b404:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b408:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	4f54300a 	.word	0x4f54300a

0800b41c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3301      	adds	r3, #1
 800b42c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b434:	d901      	bls.n	800b43a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e01b      	b.n	800b472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	daf2      	bge.n	800b428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b442:	2300      	movs	r3, #0
 800b444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	f043 0201 	orr.w	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3301      	adds	r3, #1
 800b456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b45e:	d901      	bls.n	800b464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e006      	b.n	800b472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d0f0      	beq.n	800b452 <USB_CoreReset+0x36>

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b48c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b490:	f002 fd9e 	bl	800dfd0 <USBD_static_malloc>
 800b494:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d109      	bne.n	800b4b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	32b0      	adds	r2, #176	@ 0xb0
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	e0d4      	b.n	800b65a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b4b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f002 ffb2 	bl	800e420 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	@ 0xb0
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32b0      	adds	r2, #176	@ 0xb0
 800b4d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	7c1b      	ldrb	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d138      	bne.n	800b55a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b4e8:	4b5e      	ldr	r3, [pc, #376]	@ (800b664 <USBD_CDC_Init+0x1e4>)
 800b4ea:	7819      	ldrb	r1, [r3, #0]
 800b4ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f002 fb58 	bl	800dba8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b664 <USBD_CDC_Init+0x1e4>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 020f 	and.w	r2, r3, #15
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	3324      	adds	r3, #36	@ 0x24
 800b50e:	2201      	movs	r2, #1
 800b510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b512:	4b55      	ldr	r3, [pc, #340]	@ (800b668 <USBD_CDC_Init+0x1e8>)
 800b514:	7819      	ldrb	r1, [r3, #0]
 800b516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b51a:	2202      	movs	r2, #2
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f002 fb43 	bl	800dba8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b522:	4b51      	ldr	r3, [pc, #324]	@ (800b668 <USBD_CDC_Init+0x1e8>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	f003 020f 	and.w	r2, r3, #15
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	4613      	mov	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4413      	add	r3, r2
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	440b      	add	r3, r1
 800b536:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b53a:	2201      	movs	r2, #1
 800b53c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b53e:	4b4b      	ldr	r3, [pc, #300]	@ (800b66c <USBD_CDC_Init+0x1ec>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	f003 020f 	and.w	r2, r3, #15
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	4613      	mov	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	440b      	add	r3, r1
 800b552:	3326      	adds	r3, #38	@ 0x26
 800b554:	2210      	movs	r2, #16
 800b556:	801a      	strh	r2, [r3, #0]
 800b558:	e035      	b.n	800b5c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b55a:	4b42      	ldr	r3, [pc, #264]	@ (800b664 <USBD_CDC_Init+0x1e4>)
 800b55c:	7819      	ldrb	r1, [r3, #0]
 800b55e:	2340      	movs	r3, #64	@ 0x40
 800b560:	2202      	movs	r2, #2
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f002 fb20 	bl	800dba8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b568:	4b3e      	ldr	r3, [pc, #248]	@ (800b664 <USBD_CDC_Init+0x1e4>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 020f 	and.w	r2, r3, #15
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3324      	adds	r3, #36	@ 0x24
 800b57e:	2201      	movs	r2, #1
 800b580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b582:	4b39      	ldr	r3, [pc, #228]	@ (800b668 <USBD_CDC_Init+0x1e8>)
 800b584:	7819      	ldrb	r1, [r3, #0]
 800b586:	2340      	movs	r3, #64	@ 0x40
 800b588:	2202      	movs	r2, #2
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f002 fb0c 	bl	800dba8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b590:	4b35      	ldr	r3, [pc, #212]	@ (800b668 <USBD_CDC_Init+0x1e8>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	f003 020f 	and.w	r2, r3, #15
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	440b      	add	r3, r1
 800b5a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b5ac:	4b2f      	ldr	r3, [pc, #188]	@ (800b66c <USBD_CDC_Init+0x1ec>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 020f 	and.w	r2, r3, #15
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	3326      	adds	r3, #38	@ 0x26
 800b5c2:	2210      	movs	r2, #16
 800b5c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b5c6:	4b29      	ldr	r3, [pc, #164]	@ (800b66c <USBD_CDC_Init+0x1ec>)
 800b5c8:	7819      	ldrb	r1, [r3, #0]
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	2203      	movs	r2, #3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f002 faea 	bl	800dba8 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b5d4:	4b25      	ldr	r3, [pc, #148]	@ (800b66c <USBD_CDC_Init+0x1ec>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	f003 020f 	and.w	r2, r3, #15
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	3324      	adds	r3, #36	@ 0x24
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	33b0      	adds	r3, #176	@ 0xb0
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b624:	2302      	movs	r3, #2
 800b626:	e018      	b.n	800b65a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7c1b      	ldrb	r3, [r3, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10a      	bne.n	800b646 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b630:	4b0d      	ldr	r3, [pc, #52]	@ (800b668 <USBD_CDC_Init+0x1e8>)
 800b632:	7819      	ldrb	r1, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b63a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f002 fc2c 	bl	800de9c <USBD_LL_PrepareReceive>
 800b644:	e008      	b.n	800b658 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b646:	4b08      	ldr	r3, [pc, #32]	@ (800b668 <USBD_CDC_Init+0x1e8>)
 800b648:	7819      	ldrb	r1, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b650:	2340      	movs	r3, #64	@ 0x40
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f002 fc22 	bl	800de9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20000093 	.word	0x20000093
 800b668:	20000094 	.word	0x20000094
 800b66c:	20000095 	.word	0x20000095

0800b670 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b67c:	4b3a      	ldr	r3, [pc, #232]	@ (800b768 <USBD_CDC_DeInit+0xf8>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f002 face 	bl	800dc24 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b688:	4b37      	ldr	r3, [pc, #220]	@ (800b768 <USBD_CDC_DeInit+0xf8>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f003 020f 	and.w	r2, r3, #15
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	440b      	add	r3, r1
 800b69c:	3324      	adds	r3, #36	@ 0x24
 800b69e:	2200      	movs	r2, #0
 800b6a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b6a2:	4b32      	ldr	r3, [pc, #200]	@ (800b76c <USBD_CDC_DeInit+0xfc>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f002 fabb 	bl	800dc24 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b6ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b76c <USBD_CDC_DeInit+0xfc>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	f003 020f 	and.w	r2, r3, #15
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	440b      	add	r3, r1
 800b6c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b6ca:	4b29      	ldr	r3, [pc, #164]	@ (800b770 <USBD_CDC_DeInit+0x100>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f002 faa7 	bl	800dc24 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b6d6:	4b26      	ldr	r3, [pc, #152]	@ (800b770 <USBD_CDC_DeInit+0x100>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 020f 	and.w	r2, r3, #15
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4413      	add	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	440b      	add	r3, r1
 800b6ea:	3324      	adds	r3, #36	@ 0x24
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b6f0:	4b1f      	ldr	r3, [pc, #124]	@ (800b770 <USBD_CDC_DeInit+0x100>)
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	f003 020f 	and.w	r2, r3, #15
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	3326      	adds	r3, #38	@ 0x26
 800b706:	2200      	movs	r2, #0
 800b708:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	32b0      	adds	r2, #176	@ 0xb0
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01f      	beq.n	800b75c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	33b0      	adds	r3, #176	@ 0xb0
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	32b0      	adds	r2, #176	@ 0xb0
 800b73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b73e:	4618      	mov	r0, r3
 800b740:	f002 fc54 	bl	800dfec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	32b0      	adds	r2, #176	@ 0xb0
 800b74e:	2100      	movs	r1, #0
 800b750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20000093 	.word	0x20000093
 800b76c:	20000094 	.word	0x20000094
 800b770:	20000095 	.word	0x20000095

0800b774 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	32b0      	adds	r2, #176	@ 0xb0
 800b788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e0bf      	b.n	800b924 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d050      	beq.n	800b852 <USBD_CDC_Setup+0xde>
 800b7b0:	2b20      	cmp	r3, #32
 800b7b2:	f040 80af 	bne.w	800b914 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	88db      	ldrh	r3, [r3, #6]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d03a      	beq.n	800b834 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b25b      	sxtb	r3, r3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	da1b      	bge.n	800b800 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	33b0      	adds	r3, #176	@ 0xb0
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b7de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	88d2      	ldrh	r2, [r2, #6]
 800b7e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b07      	cmp	r3, #7
 800b7ec:	bf28      	it	cs
 800b7ee:	2307      	movcs	r3, #7
 800b7f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	89fa      	ldrh	r2, [r7, #14]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 fd7d 	bl	800d2f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b7fe:	e090      	b.n	800b922 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	785a      	ldrb	r2, [r3, #1]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	88db      	ldrh	r3, [r3, #6]
 800b80e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b810:	d803      	bhi.n	800b81a <USBD_CDC_Setup+0xa6>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	88db      	ldrh	r3, [r3, #6]
 800b816:	b2da      	uxtb	r2, r3
 800b818:	e000      	b.n	800b81c <USBD_CDC_Setup+0xa8>
 800b81a:	2240      	movs	r2, #64	@ 0x40
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b822:	6939      	ldr	r1, [r7, #16]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b82a:	461a      	mov	r2, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 fd8f 	bl	800d350 <USBD_CtlPrepareRx>
      break;
 800b832:	e076      	b.n	800b922 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	33b0      	adds	r3, #176	@ 0xb0
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	7850      	ldrb	r0, [r2, #1]
 800b84a:	2200      	movs	r2, #0
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	4798      	blx	r3
      break;
 800b850:	e067      	b.n	800b922 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	785b      	ldrb	r3, [r3, #1]
 800b856:	2b0b      	cmp	r3, #11
 800b858:	d851      	bhi.n	800b8fe <USBD_CDC_Setup+0x18a>
 800b85a:	a201      	add	r2, pc, #4	@ (adr r2, 800b860 <USBD_CDC_Setup+0xec>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b891 	.word	0x0800b891
 800b864:	0800b90d 	.word	0x0800b90d
 800b868:	0800b8ff 	.word	0x0800b8ff
 800b86c:	0800b8ff 	.word	0x0800b8ff
 800b870:	0800b8ff 	.word	0x0800b8ff
 800b874:	0800b8ff 	.word	0x0800b8ff
 800b878:	0800b8ff 	.word	0x0800b8ff
 800b87c:	0800b8ff 	.word	0x0800b8ff
 800b880:	0800b8ff 	.word	0x0800b8ff
 800b884:	0800b8ff 	.word	0x0800b8ff
 800b888:	0800b8bb 	.word	0x0800b8bb
 800b88c:	0800b8e5 	.word	0x0800b8e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d107      	bne.n	800b8ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b89c:	f107 030a 	add.w	r3, r7, #10
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f001 fd27 	bl	800d2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8aa:	e032      	b.n	800b912 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f001 fca5 	bl	800d1fe <USBD_CtlError>
            ret = USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b8b8:	e02b      	b.n	800b912 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d107      	bne.n	800b8d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b8c6:	f107 030d 	add.w	r3, r7, #13
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f001 fd12 	bl	800d2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8d4:	e01d      	b.n	800b912 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 fc90 	bl	800d1fe <USBD_CtlError>
            ret = USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b8e2:	e016      	b.n	800b912 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d00f      	beq.n	800b910 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f001 fc83 	bl	800d1fe <USBD_CtlError>
            ret = USBD_FAIL;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b8fc:	e008      	b.n	800b910 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 fc7c 	bl	800d1fe <USBD_CtlError>
          ret = USBD_FAIL;
 800b906:	2303      	movs	r3, #3
 800b908:	75fb      	strb	r3, [r7, #23]
          break;
 800b90a:	e002      	b.n	800b912 <USBD_CDC_Setup+0x19e>
          break;
 800b90c:	bf00      	nop
 800b90e:	e008      	b.n	800b922 <USBD_CDC_Setup+0x1ae>
          break;
 800b910:	bf00      	nop
      }
      break;
 800b912:	e006      	b.n	800b922 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 fc71 	bl	800d1fe <USBD_CtlError>
      ret = USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	75fb      	strb	r3, [r7, #23]
      break;
 800b920:	bf00      	nop
  }

  return (uint8_t)ret;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	460b      	mov	r3, r1
 800b936:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b93e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	32b0      	adds	r2, #176	@ 0xb0
 800b94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b952:	2303      	movs	r3, #3
 800b954:	e065      	b.n	800ba22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	32b0      	adds	r2, #176	@ 0xb0
 800b960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b964:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	f003 020f 	and.w	r2, r3, #15
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	440b      	add	r3, r1
 800b978:	3318      	adds	r3, #24
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d02f      	beq.n	800b9e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	f003 020f 	and.w	r2, r3, #15
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	4613      	mov	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	440b      	add	r3, r1
 800b992:	3318      	adds	r3, #24
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	f003 010f 	and.w	r1, r3, #15
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	440b      	add	r3, r1
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4403      	add	r3, r0
 800b9a8:	331c      	adds	r3, #28
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9b0:	fb01 f303 	mul.w	r3, r1, r3
 800b9b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d112      	bne.n	800b9e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b9ba:	78fb      	ldrb	r3, [r7, #3]
 800b9bc:	f003 020f 	and.w	r2, r3, #15
 800b9c0:	6879      	ldr	r1, [r7, #4]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b9d2:	78f9      	ldrb	r1, [r7, #3]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f002 fa27 	bl	800de2c <USBD_LL_Transmit>
 800b9de:	e01f      	b.n	800ba20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	33b0      	adds	r3, #176	@ 0xb0
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d010      	beq.n	800ba20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	33b0      	adds	r3, #176	@ 0xb0
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ba1c:	78fa      	ldrb	r2, [r7, #3]
 800ba1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	460b      	mov	r3, r1
 800ba34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32b0      	adds	r2, #176	@ 0xb0
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	32b0      	adds	r2, #176	@ 0xb0
 800ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e01a      	b.n	800ba92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ba5c:	78fb      	ldrb	r3, [r7, #3]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f002 fa53 	bl	800df0c <USBD_LL_GetRxDataSize>
 800ba66:	4602      	mov	r2, r0
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	33b0      	adds	r3, #176	@ 0xb0
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	32b0      	adds	r2, #176	@ 0xb0
 800baac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bab8:	2303      	movs	r3, #3
 800baba:	e024      	b.n	800bb06 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	33b0      	adds	r3, #176	@ 0xb0
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d019      	beq.n	800bb04 <USBD_CDC_EP0_RxReady+0x6a>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bad6:	2bff      	cmp	r3, #255	@ 0xff
 800bad8:	d014      	beq.n	800bb04 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	33b0      	adds	r3, #176	@ 0xb0
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800baf2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bafa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	22ff      	movs	r2, #255	@ 0xff
 800bb00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb18:	2182      	movs	r1, #130	@ 0x82
 800bb1a:	4818      	ldr	r0, [pc, #96]	@ (800bb7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb1c:	f000 fd0f 	bl	800c53e <USBD_GetEpDesc>
 800bb20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb22:	2101      	movs	r1, #1
 800bb24:	4815      	ldr	r0, [pc, #84]	@ (800bb7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb26:	f000 fd0a 	bl	800c53e <USBD_GetEpDesc>
 800bb2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb2c:	2181      	movs	r1, #129	@ 0x81
 800bb2e:	4813      	ldr	r0, [pc, #76]	@ (800bb7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bb30:	f000 fd05 	bl	800c53e <USBD_GetEpDesc>
 800bb34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2210      	movs	r2, #16
 800bb40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d006      	beq.n	800bb56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb50:	711a      	strb	r2, [r3, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d006      	beq.n	800bb6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb64:	711a      	strb	r2, [r3, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2243      	movs	r2, #67	@ 0x43
 800bb6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb70:	4b02      	ldr	r3, [pc, #8]	@ (800bb7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20000050 	.word	0x20000050

0800bb80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb88:	2182      	movs	r1, #130	@ 0x82
 800bb8a:	4818      	ldr	r0, [pc, #96]	@ (800bbec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb8c:	f000 fcd7 	bl	800c53e <USBD_GetEpDesc>
 800bb90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb92:	2101      	movs	r1, #1
 800bb94:	4815      	ldr	r0, [pc, #84]	@ (800bbec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb96:	f000 fcd2 	bl	800c53e <USBD_GetEpDesc>
 800bb9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb9c:	2181      	movs	r1, #129	@ 0x81
 800bb9e:	4813      	ldr	r0, [pc, #76]	@ (800bbec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bba0:	f000 fccd 	bl	800c53e <USBD_GetEpDesc>
 800bba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2210      	movs	r2, #16
 800bbb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d006      	beq.n	800bbc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	711a      	strb	r2, [r3, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f042 0202 	orr.w	r2, r2, #2
 800bbc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d006      	beq.n	800bbda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	711a      	strb	r2, [r3, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f042 0202 	orr.w	r2, r2, #2
 800bbd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2243      	movs	r2, #67	@ 0x43
 800bbde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bbe0:	4b02      	ldr	r3, [pc, #8]	@ (800bbec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20000050 	.word	0x20000050

0800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bbf8:	2182      	movs	r1, #130	@ 0x82
 800bbfa:	4818      	ldr	r0, [pc, #96]	@ (800bc5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bbfc:	f000 fc9f 	bl	800c53e <USBD_GetEpDesc>
 800bc00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc02:	2101      	movs	r1, #1
 800bc04:	4815      	ldr	r0, [pc, #84]	@ (800bc5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc06:	f000 fc9a 	bl	800c53e <USBD_GetEpDesc>
 800bc0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc0c:	2181      	movs	r1, #129	@ 0x81
 800bc0e:	4813      	ldr	r0, [pc, #76]	@ (800bc5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bc10:	f000 fc95 	bl	800c53e <USBD_GetEpDesc>
 800bc14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2210      	movs	r2, #16
 800bc20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d006      	beq.n	800bc36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc30:	711a      	strb	r2, [r3, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d006      	beq.n	800bc4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc44:	711a      	strb	r2, [r3, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2243      	movs	r2, #67	@ 0x43
 800bc4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc50:	4b02      	ldr	r3, [pc, #8]	@ (800bc5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20000050 	.word	0x20000050

0800bc60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc6e:	4b03      	ldr	r3, [pc, #12]	@ (800bc7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	2000000c 	.word	0x2000000c

0800bc80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc90:	2303      	movs	r3, #3
 800bc92:	e009      	b.n	800bca8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	33b0      	adds	r3, #176	@ 0xb0
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	32b0      	adds	r2, #176	@ 0xb0
 800bcca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e008      	b.n	800bcec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	371c      	adds	r7, #28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	32b0      	adds	r2, #176	@ 0xb0
 800bd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e004      	b.n	800bd26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
	...

0800bd34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	32b0      	adds	r2, #176	@ 0xb0
 800bd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	32b0      	adds	r2, #176	@ 0xb0
 800bd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e018      	b.n	800bd94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7c1b      	ldrb	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd6a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd9c <USBD_CDC_ReceivePacket+0x68>)
 800bd6c:	7819      	ldrb	r1, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f002 f88f 	bl	800de9c <USBD_LL_PrepareReceive>
 800bd7e:	e008      	b.n	800bd92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd80:	4b06      	ldr	r3, [pc, #24]	@ (800bd9c <USBD_CDC_ReceivePacket+0x68>)
 800bd82:	7819      	ldrb	r1, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd8a:	2340      	movs	r3, #64	@ 0x40
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f002 f885 	bl	800de9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	20000094 	.word	0x20000094

0800bda0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e01f      	b.n	800bdf8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2201      	movs	r2, #1
 800bde2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	79fa      	ldrb	r2, [r7, #7]
 800bdea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f001 fe5d 	bl	800daac <USBD_LL_Init>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be14:	2303      	movs	r3, #3
 800be16:	e025      	b.n	800be64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	32ae      	adds	r2, #174	@ 0xae
 800be2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00f      	beq.n	800be54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	32ae      	adds	r2, #174	@ 0xae
 800be3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	f107 020e 	add.w	r2, r7, #14
 800be48:	4610      	mov	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	4602      	mov	r2, r0
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f001 fe65 	bl	800db44 <USBD_LL_Start>
 800be7a:	4603      	mov	r3, r0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800be8e:	4618      	mov	r0, r3
 800be90:	370c      	adds	r7, #12
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	460b      	mov	r3, r1
 800bea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d009      	beq.n	800bec8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	78fa      	ldrb	r2, [r7, #3]
 800bebe:	4611      	mov	r1, r2
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	4798      	blx	r3
 800bec4:	4603      	mov	r3, r0
 800bec6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	460b      	mov	r3, r1
 800bedc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	78fa      	ldrb	r2, [r7, #3]
 800beec:	4611      	mov	r1, r2
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	4798      	blx	r3
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bef8:	2303      	movs	r3, #3
 800befa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f001 f936 	bl	800d18a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf3a:	f003 031f 	and.w	r3, r3, #31
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d01a      	beq.n	800bf78 <USBD_LL_SetupStage+0x72>
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d822      	bhi.n	800bf8c <USBD_LL_SetupStage+0x86>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <USBD_LL_SetupStage+0x4a>
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d00a      	beq.n	800bf64 <USBD_LL_SetupStage+0x5e>
 800bf4e:	e01d      	b.n	800bf8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fb63 	bl	800c624 <USBD_StdDevReq>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73fb      	strb	r3, [r7, #15]
      break;
 800bf62:	e020      	b.n	800bfa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fbcb 	bl	800c708 <USBD_StdItfReq>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]
      break;
 800bf76:	e016      	b.n	800bfa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fc2d 	bl	800c7e0 <USBD_StdEPReq>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8a:	e00c      	b.n	800bfa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 fe78 	bl	800dc90 <USBD_LL_StallEP>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa4:	bf00      	nop
  }

  return ret;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bfc2:	7afb      	ldrb	r3, [r7, #11]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d16e      	bne.n	800c0a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bfce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	f040 8098 	bne.w	800c10c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	689a      	ldr	r2, [r3, #8]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d913      	bls.n	800c010 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	1ad2      	subs	r2, r2, r3
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	4293      	cmp	r3, r2
 800c000:	bf28      	it	cs
 800c002:	4613      	movcs	r3, r2
 800c004:	461a      	mov	r2, r3
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f001 f9be 	bl	800d38a <USBD_CtlContinueRx>
 800c00e:	e07d      	b.n	800c10c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c016:	f003 031f 	and.w	r3, r3, #31
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d014      	beq.n	800c048 <USBD_LL_DataOutStage+0x98>
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d81d      	bhi.n	800c05e <USBD_LL_DataOutStage+0xae>
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <USBD_LL_DataOutStage+0x7c>
 800c026:	2b01      	cmp	r3, #1
 800c028:	d003      	beq.n	800c032 <USBD_LL_DataOutStage+0x82>
 800c02a:	e018      	b.n	800c05e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c02c:	2300      	movs	r3, #0
 800c02e:	75bb      	strb	r3, [r7, #22]
            break;
 800c030:	e018      	b.n	800c064 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	4619      	mov	r1, r3
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 fa64 	bl	800c50a <USBD_CoreFindIF>
 800c042:	4603      	mov	r3, r0
 800c044:	75bb      	strb	r3, [r7, #22]
            break;
 800c046:	e00d      	b.n	800c064 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	4619      	mov	r1, r3
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 fa66 	bl	800c524 <USBD_CoreFindEP>
 800c058:	4603      	mov	r3, r0
 800c05a:	75bb      	strb	r3, [r7, #22]
            break;
 800c05c:	e002      	b.n	800c064 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c05e:	2300      	movs	r3, #0
 800c060:	75bb      	strb	r3, [r7, #22]
            break;
 800c062:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c064:	7dbb      	ldrb	r3, [r7, #22]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d119      	bne.n	800c09e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d113      	bne.n	800c09e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c076:	7dba      	ldrb	r2, [r7, #22]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	32ae      	adds	r2, #174	@ 0xae
 800c07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00b      	beq.n	800c09e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c086:	7dba      	ldrb	r2, [r7, #22]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c08e:	7dba      	ldrb	r2, [r7, #22]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	32ae      	adds	r2, #174	@ 0xae
 800c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f001 f984 	bl	800d3ac <USBD_CtlSendStatus>
 800c0a4:	e032      	b.n	800c10c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 fa37 	bl	800c524 <USBD_CoreFindEP>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0ba:	7dbb      	ldrb	r3, [r7, #22]
 800c0bc:	2bff      	cmp	r3, #255	@ 0xff
 800c0be:	d025      	beq.n	800c10c <USBD_LL_DataOutStage+0x15c>
 800c0c0:	7dbb      	ldrb	r3, [r7, #22]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d122      	bne.n	800c10c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d117      	bne.n	800c102 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c0d2:	7dba      	ldrb	r2, [r7, #22]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	32ae      	adds	r2, #174	@ 0xae
 800c0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00f      	beq.n	800c102 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c0e2:	7dba      	ldrb	r2, [r7, #22]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c0ea:	7dba      	ldrb	r2, [r7, #22]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	32ae      	adds	r2, #174	@ 0xae
 800c0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	7afa      	ldrb	r2, [r7, #11]
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	4798      	blx	r3
 800c0fe:	4603      	mov	r3, r0
 800c100:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	e000      	b.n	800c10e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b086      	sub	sp, #24
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	460b      	mov	r3, r1
 800c120:	607a      	str	r2, [r7, #4]
 800c122:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d16f      	bne.n	800c20a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3314      	adds	r3, #20
 800c12e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c136:	2b02      	cmp	r3, #2
 800c138:	d15a      	bne.n	800c1f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	689a      	ldr	r2, [r3, #8]
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	429a      	cmp	r2, r3
 800c144:	d914      	bls.n	800c170 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	689a      	ldr	r2, [r3, #8]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	461a      	mov	r2, r3
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f001 f8e6 	bl	800d32e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c162:	2300      	movs	r3, #0
 800c164:	2200      	movs	r2, #0
 800c166:	2100      	movs	r1, #0
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f001 fe97 	bl	800de9c <USBD_LL_PrepareReceive>
 800c16e:	e03f      	b.n	800c1f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	68da      	ldr	r2, [r3, #12]
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d11c      	bne.n	800c1b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c184:	429a      	cmp	r2, r3
 800c186:	d316      	bcc.n	800c1b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c192:	429a      	cmp	r2, r3
 800c194:	d20f      	bcs.n	800c1b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c196:	2200      	movs	r2, #0
 800c198:	2100      	movs	r1, #0
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f001 f8c7 	bl	800d32e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f001 fe74 	bl	800de9c <USBD_LL_PrepareReceive>
 800c1b4:	e01c      	b.n	800c1f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d10f      	bne.n	800c1e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1e2:	2180      	movs	r1, #128	@ 0x80
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f001 fd53 	bl	800dc90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f001 f8f1 	bl	800d3d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d03a      	beq.n	800c270 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff fe42 	bl	800be84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c208:	e032      	b.n	800c270 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c20a:	7afb      	ldrb	r3, [r7, #11]
 800c20c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c210:	b2db      	uxtb	r3, r3
 800c212:	4619      	mov	r1, r3
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 f985 	bl	800c524 <USBD_CoreFindEP>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2bff      	cmp	r3, #255	@ 0xff
 800c222:	d025      	beq.n	800c270 <USBD_LL_DataInStage+0x15a>
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d122      	bne.n	800c270 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b03      	cmp	r3, #3
 800c234:	d11c      	bne.n	800c270 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c236:	7dfa      	ldrb	r2, [r7, #23]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	32ae      	adds	r2, #174	@ 0xae
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d014      	beq.n	800c270 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c246:	7dfa      	ldrb	r2, [r7, #23]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c24e:	7dfa      	ldrb	r2, [r7, #23]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	32ae      	adds	r2, #174	@ 0xae
 800c254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	7afa      	ldrb	r2, [r7, #11]
 800c25c:	4611      	mov	r1, r2
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	4798      	blx	r3
 800c262:	4603      	mov	r3, r0
 800c264:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c266:	7dbb      	ldrb	r3, [r7, #22]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c26c:	7dbb      	ldrb	r3, [r7, #22]
 800c26e:	e000      	b.n	800c272 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d014      	beq.n	800c2e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00e      	beq.n	800c2e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	6852      	ldr	r2, [r2, #4]
 800c2ce:	b2d2      	uxtb	r2, r2
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	4798      	blx	r3
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2e0:	2340      	movs	r3, #64	@ 0x40
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f001 fc5e 	bl	800dba8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2240      	movs	r2, #64	@ 0x40
 800c2f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2fc:	2340      	movs	r3, #64	@ 0x40
 800c2fe:	2200      	movs	r2, #0
 800c300:	2180      	movs	r1, #128	@ 0x80
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f001 fc50 	bl	800dba8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2240      	movs	r2, #64	@ 0x40
 800c312:	621a      	str	r2, [r3, #32]

  return ret;
 800c314:	7bfb      	ldrb	r3, [r7, #15]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	460b      	mov	r3, r1
 800c328:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	78fa      	ldrb	r2, [r7, #3]
 800c32e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b04      	cmp	r3, #4
 800c350:	d006      	beq.n	800c360 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2204      	movs	r2, #4
 800c364:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b04      	cmp	r3, #4
 800c388:	d106      	bne.n	800c398 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c390:	b2da      	uxtb	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d110      	bne.n	800c3dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	32ae      	adds	r2, #174	@ 0xae
 800c3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d101      	bne.n	800c408 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c404:	2303      	movs	r3, #3
 800c406:	e01c      	b.n	800c442 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b03      	cmp	r3, #3
 800c412:	d115      	bne.n	800c440 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	32ae      	adds	r2, #174	@ 0xae
 800c41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00b      	beq.n	800c440 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	32ae      	adds	r2, #174	@ 0xae
 800c432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	78fa      	ldrb	r2, [r7, #3]
 800c43a:	4611      	mov	r1, r2
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	460b      	mov	r3, r1
 800c454:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	32ae      	adds	r2, #174	@ 0xae
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c468:	2303      	movs	r3, #3
 800c46a:	e01c      	b.n	800c4a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b03      	cmp	r3, #3
 800c476:	d115      	bne.n	800c4a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	32ae      	adds	r2, #174	@ 0xae
 800c482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00b      	beq.n	800c4a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	32ae      	adds	r2, #174	@ 0xae
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c49c:	78fa      	ldrb	r2, [r7, #3]
 800c49e:	4611      	mov	r1, r2
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00e      	beq.n	800c500 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	6852      	ldr	r2, [r2, #4]
 800c4ee:	b2d2      	uxtb	r2, r2
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	4798      	blx	r3
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	460b      	mov	r3, r1
 800c514:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c516:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c518:	4618      	mov	r0, r3
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c530:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b086      	sub	sp, #24
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	460b      	mov	r3, r1
 800c548:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	885b      	ldrh	r3, [r3, #2]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	7812      	ldrb	r2, [r2, #0]
 800c560:	4293      	cmp	r3, r2
 800c562:	d91f      	bls.n	800c5a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c56a:	e013      	b.n	800c594 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c56c:	f107 030a 	add.w	r3, r7, #10
 800c570:	4619      	mov	r1, r3
 800c572:	6978      	ldr	r0, [r7, #20]
 800c574:	f000 f81b 	bl	800c5ae <USBD_GetNextDesc>
 800c578:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	785b      	ldrb	r3, [r3, #1]
 800c57e:	2b05      	cmp	r3, #5
 800c580:	d108      	bne.n	800c594 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	789b      	ldrb	r3, [r3, #2]
 800c58a:	78fa      	ldrb	r2, [r7, #3]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d008      	beq.n	800c5a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c590:	2300      	movs	r3, #0
 800c592:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	885b      	ldrh	r3, [r3, #2]
 800c598:	b29a      	uxth	r2, r3
 800c59a:	897b      	ldrh	r3, [r7, #10]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d8e5      	bhi.n	800c56c <USBD_GetEpDesc+0x2e>
 800c5a0:	e000      	b.n	800c5a4 <USBD_GetEpDesc+0x66>
          break;
 800c5a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c5a4:	693b      	ldr	r3, [r7, #16]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b085      	sub	sp, #20
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	881b      	ldrh	r3, [r3, #0]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	7812      	ldrb	r2, [r2, #0]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b087      	sub	sp, #28
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c604:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c608:	021b      	lsls	r3, r3, #8
 800c60a:	b21a      	sxth	r2, r3
 800c60c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c610:	4313      	orrs	r3, r2
 800c612:	b21b      	sxth	r3, r3
 800c614:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c616:	89fb      	ldrh	r3, [r7, #14]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c63a:	2b40      	cmp	r3, #64	@ 0x40
 800c63c:	d005      	beq.n	800c64a <USBD_StdDevReq+0x26>
 800c63e:	2b40      	cmp	r3, #64	@ 0x40
 800c640:	d857      	bhi.n	800c6f2 <USBD_StdDevReq+0xce>
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00f      	beq.n	800c666 <USBD_StdDevReq+0x42>
 800c646:	2b20      	cmp	r3, #32
 800c648:	d153      	bne.n	800c6f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	32ae      	adds	r2, #174	@ 0xae
 800c654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	4798      	blx	r3
 800c660:	4603      	mov	r3, r0
 800c662:	73fb      	strb	r3, [r7, #15]
      break;
 800c664:	e04a      	b.n	800c6fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	785b      	ldrb	r3, [r3, #1]
 800c66a:	2b09      	cmp	r3, #9
 800c66c:	d83b      	bhi.n	800c6e6 <USBD_StdDevReq+0xc2>
 800c66e:	a201      	add	r2, pc, #4	@ (adr r2, 800c674 <USBD_StdDevReq+0x50>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c6c9 	.word	0x0800c6c9
 800c678:	0800c6dd 	.word	0x0800c6dd
 800c67c:	0800c6e7 	.word	0x0800c6e7
 800c680:	0800c6d3 	.word	0x0800c6d3
 800c684:	0800c6e7 	.word	0x0800c6e7
 800c688:	0800c6a7 	.word	0x0800c6a7
 800c68c:	0800c69d 	.word	0x0800c69d
 800c690:	0800c6e7 	.word	0x0800c6e7
 800c694:	0800c6bf 	.word	0x0800c6bf
 800c698:	0800c6b1 	.word	0x0800c6b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fa3c 	bl	800cb1c <USBD_GetDescriptor>
          break;
 800c6a4:	e024      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fbcb 	bl	800ce44 <USBD_SetAddress>
          break;
 800c6ae:	e01f      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fc0a 	bl	800cecc <USBD_SetConfig>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]
          break;
 800c6bc:	e018      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fcad 	bl	800d020 <USBD_GetConfig>
          break;
 800c6c6:	e013      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fcde 	bl	800d08c <USBD_GetStatus>
          break;
 800c6d0:	e00e      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fd0d 	bl	800d0f4 <USBD_SetFeature>
          break;
 800c6da:	e009      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fd31 	bl	800d146 <USBD_ClrFeature>
          break;
 800c6e4:	e004      	b.n	800c6f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fd88 	bl	800d1fe <USBD_CtlError>
          break;
 800c6ee:	bf00      	nop
      }
      break;
 800c6f0:	e004      	b.n	800c6fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fd82 	bl	800d1fe <USBD_CtlError>
      break;
 800c6fa:	bf00      	nop
  }

  return ret;
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop

0800c708 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c71e:	2b40      	cmp	r3, #64	@ 0x40
 800c720:	d005      	beq.n	800c72e <USBD_StdItfReq+0x26>
 800c722:	2b40      	cmp	r3, #64	@ 0x40
 800c724:	d852      	bhi.n	800c7cc <USBD_StdItfReq+0xc4>
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <USBD_StdItfReq+0x26>
 800c72a:	2b20      	cmp	r3, #32
 800c72c:	d14e      	bne.n	800c7cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c734:	b2db      	uxtb	r3, r3
 800c736:	3b01      	subs	r3, #1
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d840      	bhi.n	800c7be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	889b      	ldrh	r3, [r3, #4]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b01      	cmp	r3, #1
 800c744:	d836      	bhi.n	800c7b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	889b      	ldrh	r3, [r3, #4]
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7ff fedb 	bl	800c50a <USBD_CoreFindIF>
 800c754:	4603      	mov	r3, r0
 800c756:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	2bff      	cmp	r3, #255	@ 0xff
 800c75c:	d01d      	beq.n	800c79a <USBD_StdItfReq+0x92>
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d11a      	bne.n	800c79a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c764:	7bba      	ldrb	r2, [r7, #14]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	32ae      	adds	r2, #174	@ 0xae
 800c76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00f      	beq.n	800c794 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c774:	7bba      	ldrb	r2, [r7, #14]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c77c:	7bba      	ldrb	r2, [r7, #14]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	32ae      	adds	r2, #174	@ 0xae
 800c782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	4798      	blx	r3
 800c78e:	4603      	mov	r3, r0
 800c790:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c792:	e004      	b.n	800c79e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c794:	2303      	movs	r3, #3
 800c796:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c798:	e001      	b.n	800c79e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c79a:	2303      	movs	r3, #3
 800c79c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	88db      	ldrh	r3, [r3, #6]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d110      	bne.n	800c7c8 <USBD_StdItfReq+0xc0>
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10d      	bne.n	800c7c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fdfd 	bl	800d3ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c7b2:	e009      	b.n	800c7c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fd21 	bl	800d1fe <USBD_CtlError>
          break;
 800c7bc:	e004      	b.n	800c7c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c7be:	6839      	ldr	r1, [r7, #0]
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fd1c 	bl	800d1fe <USBD_CtlError>
          break;
 800c7c6:	e000      	b.n	800c7ca <USBD_StdItfReq+0xc2>
          break;
 800c7c8:	bf00      	nop
      }
      break;
 800c7ca:	e004      	b.n	800c7d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fd15 	bl	800d1fe <USBD_CtlError>
      break;
 800c7d4:	bf00      	nop
  }

  return ret;
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	889b      	ldrh	r3, [r3, #4]
 800c7f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c7fc:	2b40      	cmp	r3, #64	@ 0x40
 800c7fe:	d007      	beq.n	800c810 <USBD_StdEPReq+0x30>
 800c800:	2b40      	cmp	r3, #64	@ 0x40
 800c802:	f200 817f 	bhi.w	800cb04 <USBD_StdEPReq+0x324>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d02a      	beq.n	800c860 <USBD_StdEPReq+0x80>
 800c80a:	2b20      	cmp	r3, #32
 800c80c:	f040 817a 	bne.w	800cb04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	4619      	mov	r1, r3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff fe85 	bl	800c524 <USBD_CoreFindEP>
 800c81a:	4603      	mov	r3, r0
 800c81c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c81e:	7b7b      	ldrb	r3, [r7, #13]
 800c820:	2bff      	cmp	r3, #255	@ 0xff
 800c822:	f000 8174 	beq.w	800cb0e <USBD_StdEPReq+0x32e>
 800c826:	7b7b      	ldrb	r3, [r7, #13]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f040 8170 	bne.w	800cb0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c82e:	7b7a      	ldrb	r2, [r7, #13]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c836:	7b7a      	ldrb	r2, [r7, #13]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	32ae      	adds	r2, #174	@ 0xae
 800c83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 8163 	beq.w	800cb0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c848:	7b7a      	ldrb	r2, [r7, #13]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	32ae      	adds	r2, #174	@ 0xae
 800c84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	4798      	blx	r3
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c85e:	e156      	b.n	800cb0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	785b      	ldrb	r3, [r3, #1]
 800c864:	2b03      	cmp	r3, #3
 800c866:	d008      	beq.n	800c87a <USBD_StdEPReq+0x9a>
 800c868:	2b03      	cmp	r3, #3
 800c86a:	f300 8145 	bgt.w	800caf8 <USBD_StdEPReq+0x318>
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 809b 	beq.w	800c9aa <USBD_StdEPReq+0x1ca>
 800c874:	2b01      	cmp	r3, #1
 800c876:	d03c      	beq.n	800c8f2 <USBD_StdEPReq+0x112>
 800c878:	e13e      	b.n	800caf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b02      	cmp	r3, #2
 800c884:	d002      	beq.n	800c88c <USBD_StdEPReq+0xac>
 800c886:	2b03      	cmp	r3, #3
 800c888:	d016      	beq.n	800c8b8 <USBD_StdEPReq+0xd8>
 800c88a:	e02c      	b.n	800c8e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c88c:	7bbb      	ldrb	r3, [r7, #14]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00d      	beq.n	800c8ae <USBD_StdEPReq+0xce>
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	2b80      	cmp	r3, #128	@ 0x80
 800c896:	d00a      	beq.n	800c8ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c898:	7bbb      	ldrb	r3, [r7, #14]
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f001 f9f7 	bl	800dc90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8a2:	2180      	movs	r1, #128	@ 0x80
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f001 f9f3 	bl	800dc90 <USBD_LL_StallEP>
 800c8aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8ac:	e020      	b.n	800c8f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fca4 	bl	800d1fe <USBD_CtlError>
              break;
 800c8b6:	e01b      	b.n	800c8f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	885b      	ldrh	r3, [r3, #2]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10e      	bne.n	800c8de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8c0:	7bbb      	ldrb	r3, [r7, #14]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00b      	beq.n	800c8de <USBD_StdEPReq+0xfe>
 800c8c6:	7bbb      	ldrb	r3, [r7, #14]
 800c8c8:	2b80      	cmp	r3, #128	@ 0x80
 800c8ca:	d008      	beq.n	800c8de <USBD_StdEPReq+0xfe>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	88db      	ldrh	r3, [r3, #6]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d104      	bne.n	800c8de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 f9d9 	bl	800dc90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fd64 	bl	800d3ac <USBD_CtlSendStatus>

              break;
 800c8e4:	e004      	b.n	800c8f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 fc88 	bl	800d1fe <USBD_CtlError>
              break;
 800c8ee:	bf00      	nop
          }
          break;
 800c8f0:	e107      	b.n	800cb02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d002      	beq.n	800c904 <USBD_StdEPReq+0x124>
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	d016      	beq.n	800c930 <USBD_StdEPReq+0x150>
 800c902:	e04b      	b.n	800c99c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00d      	beq.n	800c926 <USBD_StdEPReq+0x146>
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	2b80      	cmp	r3, #128	@ 0x80
 800c90e:	d00a      	beq.n	800c926 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c910:	7bbb      	ldrb	r3, [r7, #14]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 f9bb 	bl	800dc90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c91a:	2180      	movs	r1, #128	@ 0x80
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f001 f9b7 	bl	800dc90 <USBD_LL_StallEP>
 800c922:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c924:	e040      	b.n	800c9a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fc68 	bl	800d1fe <USBD_CtlError>
              break;
 800c92e:	e03b      	b.n	800c9a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	885b      	ldrh	r3, [r3, #2]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d136      	bne.n	800c9a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c938:	7bbb      	ldrb	r3, [r7, #14]
 800c93a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d004      	beq.n	800c94c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c942:	7bbb      	ldrb	r3, [r7, #14]
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f001 f9d8 	bl	800dcfc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fd2d 	bl	800d3ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c952:	7bbb      	ldrb	r3, [r7, #14]
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff fde4 	bl	800c524 <USBD_CoreFindEP>
 800c95c:	4603      	mov	r3, r0
 800c95e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c960:	7b7b      	ldrb	r3, [r7, #13]
 800c962:	2bff      	cmp	r3, #255	@ 0xff
 800c964:	d01f      	beq.n	800c9a6 <USBD_StdEPReq+0x1c6>
 800c966:	7b7b      	ldrb	r3, [r7, #13]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d11c      	bne.n	800c9a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c96c:	7b7a      	ldrb	r2, [r7, #13]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c974:	7b7a      	ldrb	r2, [r7, #13]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	32ae      	adds	r2, #174	@ 0xae
 800c97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d010      	beq.n	800c9a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c984:	7b7a      	ldrb	r2, [r7, #13]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	32ae      	adds	r2, #174	@ 0xae
 800c98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	4798      	blx	r3
 800c996:	4603      	mov	r3, r0
 800c998:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c99a:	e004      	b.n	800c9a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fc2d 	bl	800d1fe <USBD_CtlError>
              break;
 800c9a4:	e000      	b.n	800c9a8 <USBD_StdEPReq+0x1c8>
              break;
 800c9a6:	bf00      	nop
          }
          break;
 800c9a8:	e0ab      	b.n	800cb02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d002      	beq.n	800c9bc <USBD_StdEPReq+0x1dc>
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d032      	beq.n	800ca20 <USBD_StdEPReq+0x240>
 800c9ba:	e097      	b.n	800caec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d007      	beq.n	800c9d2 <USBD_StdEPReq+0x1f2>
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
 800c9c4:	2b80      	cmp	r3, #128	@ 0x80
 800c9c6:	d004      	beq.n	800c9d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fc17 	bl	800d1fe <USBD_CtlError>
                break;
 800c9d0:	e091      	b.n	800caf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	da0b      	bge.n	800c9f2 <USBD_StdEPReq+0x212>
 800c9da:	7bbb      	ldrb	r3, [r7, #14]
 800c9dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	3310      	adds	r3, #16
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	e00b      	b.n	800ca0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
 800c9f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	4413      	add	r3, r2
 800ca08:	3304      	adds	r3, #4
 800ca0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2202      	movs	r2, #2
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fc6d 	bl	800d2f8 <USBD_CtlSendData>
              break;
 800ca1e:	e06a      	b.n	800caf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	da11      	bge.n	800ca4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca28:	7bbb      	ldrb	r3, [r7, #14]
 800ca2a:	f003 020f 	and.w	r2, r3, #15
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	4613      	mov	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	440b      	add	r3, r1
 800ca3a:	3324      	adds	r3, #36	@ 0x24
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d117      	bne.n	800ca72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fbda 	bl	800d1fe <USBD_CtlError>
                  break;
 800ca4a:	e054      	b.n	800caf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	f003 020f 	and.w	r2, r3, #15
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d104      	bne.n	800ca72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fbc7 	bl	800d1fe <USBD_CtlError>
                  break;
 800ca70:	e041      	b.n	800caf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	da0b      	bge.n	800ca92 <USBD_StdEPReq+0x2b2>
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
 800ca7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	3310      	adds	r3, #16
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	3304      	adds	r3, #4
 800ca90:	e00b      	b.n	800caaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca92:	7bbb      	ldrb	r3, [r7, #14]
 800ca94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca98:	4613      	mov	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	4413      	add	r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	4413      	add	r3, r2
 800caa8:	3304      	adds	r3, #4
 800caaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d002      	beq.n	800cab8 <USBD_StdEPReq+0x2d8>
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	2b80      	cmp	r3, #128	@ 0x80
 800cab6:	d103      	bne.n	800cac0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2200      	movs	r2, #0
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	e00e      	b.n	800cade <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f001 f94f 	bl	800dd68 <USBD_LL_IsStallEP>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d003      	beq.n	800cad8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2201      	movs	r2, #1
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	e002      	b.n	800cade <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2200      	movs	r2, #0
 800cadc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	2202      	movs	r2, #2
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fc07 	bl	800d2f8 <USBD_CtlSendData>
              break;
 800caea:	e004      	b.n	800caf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fb85 	bl	800d1fe <USBD_CtlError>
              break;
 800caf4:	bf00      	nop
          }
          break;
 800caf6:	e004      	b.n	800cb02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fb7f 	bl	800d1fe <USBD_CtlError>
          break;
 800cb00:	bf00      	nop
      }
      break;
 800cb02:	e005      	b.n	800cb10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cb04:	6839      	ldr	r1, [r7, #0]
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fb79 	bl	800d1fe <USBD_CtlError>
      break;
 800cb0c:	e000      	b.n	800cb10 <USBD_StdEPReq+0x330>
      break;
 800cb0e:	bf00      	nop
  }

  return ret;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb26:	2300      	movs	r3, #0
 800cb28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	0a1b      	lsrs	r3, r3, #8
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	2b0e      	cmp	r3, #14
 800cb3e:	f200 8152 	bhi.w	800cde6 <USBD_GetDescriptor+0x2ca>
 800cb42:	a201      	add	r2, pc, #4	@ (adr r2, 800cb48 <USBD_GetDescriptor+0x2c>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cbb9 	.word	0x0800cbb9
 800cb4c:	0800cbd1 	.word	0x0800cbd1
 800cb50:	0800cc11 	.word	0x0800cc11
 800cb54:	0800cde7 	.word	0x0800cde7
 800cb58:	0800cde7 	.word	0x0800cde7
 800cb5c:	0800cd87 	.word	0x0800cd87
 800cb60:	0800cdb3 	.word	0x0800cdb3
 800cb64:	0800cde7 	.word	0x0800cde7
 800cb68:	0800cde7 	.word	0x0800cde7
 800cb6c:	0800cde7 	.word	0x0800cde7
 800cb70:	0800cde7 	.word	0x0800cde7
 800cb74:	0800cde7 	.word	0x0800cde7
 800cb78:	0800cde7 	.word	0x0800cde7
 800cb7c:	0800cde7 	.word	0x0800cde7
 800cb80:	0800cb85 	.word	0x0800cb85
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb8a:	69db      	ldr	r3, [r3, #28]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	7c12      	ldrb	r2, [r2, #16]
 800cb9c:	f107 0108 	add.w	r1, r7, #8
 800cba0:	4610      	mov	r0, r2
 800cba2:	4798      	blx	r3
 800cba4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cba6:	e126      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fb27 	bl	800d1fe <USBD_CtlError>
        err++;
 800cbb0:	7afb      	ldrb	r3, [r7, #11]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	72fb      	strb	r3, [r7, #11]
      break;
 800cbb6:	e11e      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	7c12      	ldrb	r2, [r2, #16]
 800cbc4:	f107 0108 	add.w	r1, r7, #8
 800cbc8:	4610      	mov	r0, r2
 800cbca:	4798      	blx	r3
 800cbcc:	60f8      	str	r0, [r7, #12]
      break;
 800cbce:	e112      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7c1b      	ldrb	r3, [r3, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10d      	bne.n	800cbf4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbe0:	f107 0208 	add.w	r2, r7, #8
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4798      	blx	r3
 800cbe8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3301      	adds	r3, #1
 800cbee:	2202      	movs	r2, #2
 800cbf0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cbf2:	e100      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfc:	f107 0208 	add.w	r2, r7, #8
 800cc00:	4610      	mov	r0, r2
 800cc02:	4798      	blx	r3
 800cc04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	701a      	strb	r2, [r3, #0]
      break;
 800cc0e:	e0f2      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	885b      	ldrh	r3, [r3, #2]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b05      	cmp	r3, #5
 800cc18:	f200 80ac 	bhi.w	800cd74 <USBD_GetDescriptor+0x258>
 800cc1c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc24 <USBD_GetDescriptor+0x108>)
 800cc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc22:	bf00      	nop
 800cc24:	0800cc3d 	.word	0x0800cc3d
 800cc28:	0800cc71 	.word	0x0800cc71
 800cc2c:	0800cca5 	.word	0x0800cca5
 800cc30:	0800ccd9 	.word	0x0800ccd9
 800cc34:	0800cd0d 	.word	0x0800cd0d
 800cc38:	0800cd41 	.word	0x0800cd41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00b      	beq.n	800cc60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	7c12      	ldrb	r2, [r2, #16]
 800cc54:	f107 0108 	add.w	r1, r7, #8
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3
 800cc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc5e:	e091      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 facb 	bl	800d1fe <USBD_CtlError>
            err++;
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc6e:	e089      	b.n	800cd84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00b      	beq.n	800cc94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	7c12      	ldrb	r2, [r2, #16]
 800cc88:	f107 0108 	add.w	r1, r7, #8
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4798      	blx	r3
 800cc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc92:	e077      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fab1 	bl	800d1fe <USBD_CtlError>
            err++;
 800cc9c:	7afb      	ldrb	r3, [r7, #11]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	72fb      	strb	r3, [r7, #11]
          break;
 800cca2:	e06f      	b.n	800cd84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00b      	beq.n	800ccc8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	7c12      	ldrb	r2, [r2, #16]
 800ccbc:	f107 0108 	add.w	r1, r7, #8
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	4798      	blx	r3
 800ccc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccc6:	e05d      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fa97 	bl	800d1fe <USBD_CtlError>
            err++;
 800ccd0:	7afb      	ldrb	r3, [r7, #11]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccd6:	e055      	b.n	800cd84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00b      	beq.n	800ccfc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	7c12      	ldrb	r2, [r2, #16]
 800ccf0:	f107 0108 	add.w	r1, r7, #8
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	4798      	blx	r3
 800ccf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccfa:	e043      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fa7d 	bl	800d1fe <USBD_CtlError>
            err++;
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	3301      	adds	r3, #1
 800cd08:	72fb      	strb	r3, [r7, #11]
          break;
 800cd0a:	e03b      	b.n	800cd84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00b      	beq.n	800cd30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd1e:	695b      	ldr	r3, [r3, #20]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	7c12      	ldrb	r2, [r2, #16]
 800cd24:	f107 0108 	add.w	r1, r7, #8
 800cd28:	4610      	mov	r0, r2
 800cd2a:	4798      	blx	r3
 800cd2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd2e:	e029      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 fa63 	bl	800d1fe <USBD_CtlError>
            err++;
 800cd38:	7afb      	ldrb	r3, [r7, #11]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd3e:	e021      	b.n	800cd84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00b      	beq.n	800cd64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	7c12      	ldrb	r2, [r2, #16]
 800cd58:	f107 0108 	add.w	r1, r7, #8
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd62:	e00f      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa49 	bl	800d1fe <USBD_CtlError>
            err++;
 800cd6c:	7afb      	ldrb	r3, [r7, #11]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	72fb      	strb	r3, [r7, #11]
          break;
 800cd72:	e007      	b.n	800cd84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fa41 	bl	800d1fe <USBD_CtlError>
          err++;
 800cd7c:	7afb      	ldrb	r3, [r7, #11]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cd82:	bf00      	nop
      }
      break;
 800cd84:	e037      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7c1b      	ldrb	r3, [r3, #16]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd96:	f107 0208 	add.w	r2, r7, #8
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	4798      	blx	r3
 800cd9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cda0:	e029      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cda2:	6839      	ldr	r1, [r7, #0]
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fa2a 	bl	800d1fe <USBD_CtlError>
        err++;
 800cdaa:	7afb      	ldrb	r3, [r7, #11]
 800cdac:	3301      	adds	r3, #1
 800cdae:	72fb      	strb	r3, [r7, #11]
      break;
 800cdb0:	e021      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7c1b      	ldrb	r3, [r3, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10d      	bne.n	800cdd6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdc2:	f107 0208 	add.w	r2, r7, #8
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	4798      	blx	r3
 800cdca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	2207      	movs	r2, #7
 800cdd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdd4:	e00f      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fa10 	bl	800d1fe <USBD_CtlError>
        err++;
 800cdde:	7afb      	ldrb	r3, [r7, #11]
 800cde0:	3301      	adds	r3, #1
 800cde2:	72fb      	strb	r3, [r7, #11]
      break;
 800cde4:	e007      	b.n	800cdf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cde6:	6839      	ldr	r1, [r7, #0]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 fa08 	bl	800d1fe <USBD_CtlError>
      err++;
 800cdee:	7afb      	ldrb	r3, [r7, #11]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	72fb      	strb	r3, [r7, #11]
      break;
 800cdf4:	bf00      	nop
  }

  if (err != 0U)
 800cdf6:	7afb      	ldrb	r3, [r7, #11]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d11e      	bne.n	800ce3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	88db      	ldrh	r3, [r3, #6]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d016      	beq.n	800ce32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce04:	893b      	ldrh	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00e      	beq.n	800ce28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	88da      	ldrh	r2, [r3, #6]
 800ce0e:	893b      	ldrh	r3, [r7, #8]
 800ce10:	4293      	cmp	r3, r2
 800ce12:	bf28      	it	cs
 800ce14:	4613      	movcs	r3, r2
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce1a:	893b      	ldrh	r3, [r7, #8]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fa69 	bl	800d2f8 <USBD_CtlSendData>
 800ce26:	e009      	b.n	800ce3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f9e7 	bl	800d1fe <USBD_CtlError>
 800ce30:	e004      	b.n	800ce3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 faba 	bl	800d3ac <USBD_CtlSendStatus>
 800ce38:	e000      	b.n	800ce3c <USBD_GetDescriptor+0x320>
    return;
 800ce3a:	bf00      	nop
  }
}
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop

0800ce44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	889b      	ldrh	r3, [r3, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d131      	bne.n	800ceba <USBD_SetAddress+0x76>
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	88db      	ldrh	r3, [r3, #6]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d12d      	bne.n	800ceba <USBD_SetAddress+0x76>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	885b      	ldrh	r3, [r3, #2]
 800ce62:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce64:	d829      	bhi.n	800ceba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	885b      	ldrh	r3, [r3, #2]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d104      	bne.n	800ce88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f9bc 	bl	800d1fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce86:	e01d      	b.n	800cec4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	7bfa      	ldrb	r2, [r7, #15]
 800ce8c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 ff93 	bl	800ddc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fa86 	bl	800d3ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d004      	beq.n	800ceb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2202      	movs	r2, #2
 800ceaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceae:	e009      	b.n	800cec4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb8:	e004      	b.n	800cec4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ceba:	6839      	ldr	r1, [r7, #0]
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 f99e 	bl	800d1fe <USBD_CtlError>
  }
}
 800cec2:	bf00      	nop
 800cec4:	bf00      	nop
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	885b      	ldrh	r3, [r3, #2]
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	4b4e      	ldr	r3, [pc, #312]	@ (800d01c <USBD_SetConfig+0x150>)
 800cee2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cee4:	4b4d      	ldr	r3, [pc, #308]	@ (800d01c <USBD_SetConfig+0x150>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d905      	bls.n	800cef8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f985 	bl	800d1fe <USBD_CtlError>
    return USBD_FAIL;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e08c      	b.n	800d012 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d002      	beq.n	800cf0a <USBD_SetConfig+0x3e>
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d029      	beq.n	800cf5c <USBD_SetConfig+0x90>
 800cf08:	e075      	b.n	800cff6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf0a:	4b44      	ldr	r3, [pc, #272]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d020      	beq.n	800cf54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cf12:	4b42      	ldr	r3, [pc, #264]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf1c:	4b3f      	ldr	r3, [pc, #252]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7fe ffb9 	bl	800be9a <USBD_SetClassConfig>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d008      	beq.n	800cf44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cf32:	6839      	ldr	r1, [r7, #0]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f962 	bl	800d1fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf42:	e065      	b.n	800d010 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fa31 	bl	800d3ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2203      	movs	r2, #3
 800cf4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cf52:	e05d      	b.n	800d010 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa29 	bl	800d3ac <USBD_CtlSendStatus>
      break;
 800cf5a:	e059      	b.n	800d010 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf5c:	4b2f      	ldr	r3, [pc, #188]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d112      	bne.n	800cf8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cf6c:	4b2b      	ldr	r3, [pc, #172]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	461a      	mov	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf76:	4b29      	ldr	r3, [pc, #164]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7fe ffa8 	bl	800bed2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fa12 	bl	800d3ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf88:	e042      	b.n	800d010 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cf8a:	4b24      	ldr	r3, [pc, #144]	@ (800d01c <USBD_SetConfig+0x150>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d02a      	beq.n	800cfee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7fe ff96 	bl	800bed2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfa6:	4b1d      	ldr	r3, [pc, #116]	@ (800d01c <USBD_SetConfig+0x150>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	@ (800d01c <USBD_SetConfig+0x150>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7fe ff6f 	bl	800be9a <USBD_SetClassConfig>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00f      	beq.n	800cfe6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f918 	bl	800d1fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7fe ff7b 	bl	800bed2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2202      	movs	r2, #2
 800cfe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cfe4:	e014      	b.n	800d010 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f9e0 	bl	800d3ac <USBD_CtlSendStatus>
      break;
 800cfec:	e010      	b.n	800d010 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f9dc 	bl	800d3ac <USBD_CtlSendStatus>
      break;
 800cff4:	e00c      	b.n	800d010 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f900 	bl	800d1fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cffe:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <USBD_SetConfig+0x150>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7fe ff64 	bl	800bed2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d00a:	2303      	movs	r3, #3
 800d00c:	73fb      	strb	r3, [r7, #15]
      break;
 800d00e:	bf00      	nop
  }

  return ret;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	2000094c 	.word	0x2000094c

0800d020 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	88db      	ldrh	r3, [r3, #6]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d004      	beq.n	800d03c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f8e2 	bl	800d1fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d03a:	e023      	b.n	800d084 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b02      	cmp	r3, #2
 800d046:	dc02      	bgt.n	800d04e <USBD_GetConfig+0x2e>
 800d048:	2b00      	cmp	r3, #0
 800d04a:	dc03      	bgt.n	800d054 <USBD_GetConfig+0x34>
 800d04c:	e015      	b.n	800d07a <USBD_GetConfig+0x5a>
 800d04e:	2b03      	cmp	r3, #3
 800d050:	d00b      	beq.n	800d06a <USBD_GetConfig+0x4a>
 800d052:	e012      	b.n	800d07a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3308      	adds	r3, #8
 800d05e:	2201      	movs	r2, #1
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f948 	bl	800d2f8 <USBD_CtlSendData>
        break;
 800d068:	e00c      	b.n	800d084 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3304      	adds	r3, #4
 800d06e:	2201      	movs	r2, #1
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f940 	bl	800d2f8 <USBD_CtlSendData>
        break;
 800d078:	e004      	b.n	800d084 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f8be 	bl	800d1fe <USBD_CtlError>
        break;
 800d082:	bf00      	nop
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d81e      	bhi.n	800d0e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	88db      	ldrh	r3, [r3, #6]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d004      	beq.n	800d0b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f8a5 	bl	800d1fe <USBD_CtlError>
        break;
 800d0b4:	e01a      	b.n	800d0ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f043 0202 	orr.w	r2, r3, #2
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f90c 	bl	800d2f8 <USBD_CtlSendData>
      break;
 800d0e0:	e004      	b.n	800d0ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f88a 	bl	800d1fe <USBD_CtlError>
      break;
 800d0ea:	bf00      	nop
  }
}
 800d0ec:	bf00      	nop
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	885b      	ldrh	r3, [r3, #2]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d107      	bne.n	800d116 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f94c 	bl	800d3ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d114:	e013      	b.n	800d13e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	885b      	ldrh	r3, [r3, #2]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d10b      	bne.n	800d136 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	889b      	ldrh	r3, [r3, #4]
 800d122:	0a1b      	lsrs	r3, r3, #8
 800d124:	b29b      	uxth	r3, r3
 800d126:	b2da      	uxtb	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f93c 	bl	800d3ac <USBD_CtlSendStatus>
}
 800d134:	e003      	b.n	800d13e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f860 	bl	800d1fe <USBD_CtlError>
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b082      	sub	sp, #8
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d156:	b2db      	uxtb	r3, r3
 800d158:	3b01      	subs	r3, #1
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d80b      	bhi.n	800d176 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	885b      	ldrh	r3, [r3, #2]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d10c      	bne.n	800d180 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f91c 	bl	800d3ac <USBD_CtlSendStatus>
      }
      break;
 800d174:	e004      	b.n	800d180 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f840 	bl	800d1fe <USBD_CtlError>
      break;
 800d17e:	e000      	b.n	800d182 <USBD_ClrFeature+0x3c>
      break;
 800d180:	bf00      	nop
  }
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b084      	sub	sp, #16
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781a      	ldrb	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fa16 	bl	800c5e6 <SWAPBYTE>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	461a      	mov	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f7ff fa09 	bl	800c5e6 <SWAPBYTE>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7ff f9fc 	bl	800c5e6 <SWAPBYTE>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	80da      	strh	r2, [r3, #6]
}
 800d1f6:	bf00      	nop
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d208:	2180      	movs	r1, #128	@ 0x80
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fd40 	bl	800dc90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d210:	2100      	movs	r1, #0
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fd3c 	bl	800dc90 <USBD_LL_StallEP>
}
 800d218:	bf00      	nop
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d22c:	2300      	movs	r3, #0
 800d22e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d042      	beq.n	800d2bc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d23a:	6938      	ldr	r0, [r7, #16]
 800d23c:	f000 f842 	bl	800d2c4 <USBD_GetLen>
 800d240:	4603      	mov	r3, r0
 800d242:	3301      	adds	r3, #1
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d24a:	d808      	bhi.n	800d25e <USBD_GetString+0x3e>
 800d24c:	6938      	ldr	r0, [r7, #16]
 800d24e:	f000 f839 	bl	800d2c4 <USBD_GetLen>
 800d252:	4603      	mov	r3, r0
 800d254:	3301      	adds	r3, #1
 800d256:	b29b      	uxth	r3, r3
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	e001      	b.n	800d262 <USBD_GetString+0x42>
 800d25e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d266:	7dfb      	ldrb	r3, [r7, #23]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	4413      	add	r3, r2
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	701a      	strb	r2, [r3, #0]
  idx++;
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	3301      	adds	r3, #1
 800d276:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d278:	7dfb      	ldrb	r3, [r7, #23]
 800d27a:	68ba      	ldr	r2, [r7, #8]
 800d27c:	4413      	add	r3, r2
 800d27e:	2203      	movs	r2, #3
 800d280:	701a      	strb	r2, [r3, #0]
  idx++;
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	3301      	adds	r3, #1
 800d286:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d288:	e013      	b.n	800d2b2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	4413      	add	r3, r2
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	7812      	ldrb	r2, [r2, #0]
 800d294:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	3301      	adds	r3, #1
 800d29a:	613b      	str	r3, [r7, #16]
    idx++;
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2a2:	7dfb      	ldrb	r3, [r7, #23]
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1e7      	bne.n	800d28a <USBD_GetString+0x6a>
 800d2ba:	e000      	b.n	800d2be <USBD_GetString+0x9e>
    return;
 800d2bc:	bf00      	nop
  }
}
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2d4:	e005      	b.n	800d2e2 <USBD_GetLen+0x1e>
  {
    len++;
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1f5      	bne.n	800d2d6 <USBD_GetLen+0x12>
  }

  return len;
 800d2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3714      	adds	r7, #20
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2202      	movs	r2, #2
 800d308:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	2100      	movs	r1, #0
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f000 fd84 	bl	800de2c <USBD_LL_Transmit>

  return USBD_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	2100      	movs	r1, #0
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f000 fd73 	bl	800de2c <USBD_LL_Transmit>

  return USBD_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2203      	movs	r2, #3
 800d360:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	2100      	movs	r1, #0
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f000 fd8e 	bl	800de9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3710      	adds	r7, #16
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	60b9      	str	r1, [r7, #8]
 800d394:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	2100      	movs	r1, #0
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f000 fd7d 	bl	800de9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2204      	movs	r2, #4
 800d3b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fd32 	bl	800de2c <USBD_LL_Transmit>

  return USBD_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2205      	movs	r2, #5
 800d3de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fd57 	bl	800de9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4912      	ldr	r1, [pc, #72]	@ (800d448 <MX_USB_DEVICE_Init+0x50>)
 800d400:	4812      	ldr	r0, [pc, #72]	@ (800d44c <MX_USB_DEVICE_Init+0x54>)
 800d402:	f7fe fccd 	bl	800bda0 <USBD_Init>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d40c:	f7f3 ffe8 	bl	80013e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d410:	490f      	ldr	r1, [pc, #60]	@ (800d450 <MX_USB_DEVICE_Init+0x58>)
 800d412:	480e      	ldr	r0, [pc, #56]	@ (800d44c <MX_USB_DEVICE_Init+0x54>)
 800d414:	f7fe fcf4 	bl	800be00 <USBD_RegisterClass>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d41e:	f7f3 ffdf 	bl	80013e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d422:	490c      	ldr	r1, [pc, #48]	@ (800d454 <MX_USB_DEVICE_Init+0x5c>)
 800d424:	4809      	ldr	r0, [pc, #36]	@ (800d44c <MX_USB_DEVICE_Init+0x54>)
 800d426:	f7fe fc2b 	bl	800bc80 <USBD_CDC_RegisterInterface>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d430:	f7f3 ffd6 	bl	80013e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d434:	4805      	ldr	r0, [pc, #20]	@ (800d44c <MX_USB_DEVICE_Init+0x54>)
 800d436:	f7fe fd19 	bl	800be6c <USBD_Start>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d440:	f7f3 ffce 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d444:	bf00      	nop
 800d446:	bd80      	pop	{r7, pc}
 800d448:	200000ac 	.word	0x200000ac
 800d44c:	20000950 	.word	0x20000950
 800d450:	20000018 	.word	0x20000018
 800d454:	20000098 	.word	0x20000098

0800d458 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d45c:	2200      	movs	r2, #0
 800d45e:	4905      	ldr	r1, [pc, #20]	@ (800d474 <CDC_Init_FS+0x1c>)
 800d460:	4805      	ldr	r0, [pc, #20]	@ (800d478 <CDC_Init_FS+0x20>)
 800d462:	f7fe fc27 	bl	800bcb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d466:	4905      	ldr	r1, [pc, #20]	@ (800d47c <CDC_Init_FS+0x24>)
 800d468:	4803      	ldr	r0, [pc, #12]	@ (800d478 <CDC_Init_FS+0x20>)
 800d46a:	f7fe fc45 	bl	800bcf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d46e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d470:	4618      	mov	r0, r3
 800d472:	bd80      	pop	{r7, pc}
 800d474:	2000142c 	.word	0x2000142c
 800d478:	20000950 	.word	0x20000950
 800d47c:	20000c2c 	.word	0x20000c2c

0800d480 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d480:	b480      	push	{r7}
 800d482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d484:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d486:	4618      	mov	r0, r3
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
 800d49c:	4613      	mov	r3, r2
 800d49e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
 800d4a2:	2b23      	cmp	r3, #35	@ 0x23
 800d4a4:	d84a      	bhi.n	800d53c <CDC_Control_FS+0xac>
 800d4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4ac <CDC_Control_FS+0x1c>)
 800d4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ac:	0800d53d 	.word	0x0800d53d
 800d4b0:	0800d53d 	.word	0x0800d53d
 800d4b4:	0800d53d 	.word	0x0800d53d
 800d4b8:	0800d53d 	.word	0x0800d53d
 800d4bc:	0800d53d 	.word	0x0800d53d
 800d4c0:	0800d53d 	.word	0x0800d53d
 800d4c4:	0800d53d 	.word	0x0800d53d
 800d4c8:	0800d53d 	.word	0x0800d53d
 800d4cc:	0800d53d 	.word	0x0800d53d
 800d4d0:	0800d53d 	.word	0x0800d53d
 800d4d4:	0800d53d 	.word	0x0800d53d
 800d4d8:	0800d53d 	.word	0x0800d53d
 800d4dc:	0800d53d 	.word	0x0800d53d
 800d4e0:	0800d53d 	.word	0x0800d53d
 800d4e4:	0800d53d 	.word	0x0800d53d
 800d4e8:	0800d53d 	.word	0x0800d53d
 800d4ec:	0800d53d 	.word	0x0800d53d
 800d4f0:	0800d53d 	.word	0x0800d53d
 800d4f4:	0800d53d 	.word	0x0800d53d
 800d4f8:	0800d53d 	.word	0x0800d53d
 800d4fc:	0800d53d 	.word	0x0800d53d
 800d500:	0800d53d 	.word	0x0800d53d
 800d504:	0800d53d 	.word	0x0800d53d
 800d508:	0800d53d 	.word	0x0800d53d
 800d50c:	0800d53d 	.word	0x0800d53d
 800d510:	0800d53d 	.word	0x0800d53d
 800d514:	0800d53d 	.word	0x0800d53d
 800d518:	0800d53d 	.word	0x0800d53d
 800d51c:	0800d53d 	.word	0x0800d53d
 800d520:	0800d53d 	.word	0x0800d53d
 800d524:	0800d53d 	.word	0x0800d53d
 800d528:	0800d53d 	.word	0x0800d53d
 800d52c:	0800d53d 	.word	0x0800d53d
 800d530:	0800d53d 	.word	0x0800d53d
 800d534:	0800d53d 	.word	0x0800d53d
 800d538:	0800d53d 	.word	0x0800d53d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d53c:	bf00      	nop
  }

  return (USBD_OK);
 800d53e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4805      	ldr	r0, [pc, #20]	@ (800d570 <CDC_Receive_FS+0x24>)
 800d55a:	f7fe fbcd 	bl	800bcf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d55e:	4804      	ldr	r0, [pc, #16]	@ (800d570 <CDC_Receive_FS+0x24>)
 800d560:	f7fe fbe8 	bl	800bd34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d564:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20000950 	.word	0x20000950

0800d574 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d574:	b480      	push	{r7}
 800d576:	b087      	sub	sp, #28
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	4613      	mov	r3, r2
 800d580:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	371c      	adds	r7, #28
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
	...

0800d598 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	4603      	mov	r3, r0
 800d5a0:	6039      	str	r1, [r7, #0]
 800d5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2212      	movs	r2, #18
 800d5a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d5aa:	4b03      	ldr	r3, [pc, #12]	@ (800d5b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	200000cc 	.word	0x200000cc

0800d5bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	6039      	str	r1, [r7, #0]
 800d5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	2204      	movs	r2, #4
 800d5cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5ce:	4b03      	ldr	r3, [pc, #12]	@ (800d5dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr
 800d5dc:	200000ec 	.word	0x200000ec

0800d5e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	6039      	str	r1, [r7, #0]
 800d5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d105      	bne.n	800d5fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	4907      	ldr	r1, [pc, #28]	@ (800d614 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5f6:	4808      	ldr	r0, [pc, #32]	@ (800d618 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5f8:	f7ff fe12 	bl	800d220 <USBD_GetString>
 800d5fc:	e004      	b.n	800d608 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	4904      	ldr	r1, [pc, #16]	@ (800d614 <USBD_FS_ProductStrDescriptor+0x34>)
 800d602:	4805      	ldr	r0, [pc, #20]	@ (800d618 <USBD_FS_ProductStrDescriptor+0x38>)
 800d604:	f7ff fe0c 	bl	800d220 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d608:	4b02      	ldr	r3, [pc, #8]	@ (800d614 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20001c2c 	.word	0x20001c2c
 800d618:	0800ef64 	.word	0x0800ef64

0800d61c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	6039      	str	r1, [r7, #0]
 800d626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	4904      	ldr	r1, [pc, #16]	@ (800d63c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d62c:	4804      	ldr	r0, [pc, #16]	@ (800d640 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d62e:	f7ff fdf7 	bl	800d220 <USBD_GetString>
  return USBD_StrDesc;
 800d632:	4b02      	ldr	r3, [pc, #8]	@ (800d63c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20001c2c 	.word	0x20001c2c
 800d640:	0800ef7c 	.word	0x0800ef7c

0800d644 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	6039      	str	r1, [r7, #0]
 800d64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	221a      	movs	r2, #26
 800d654:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d656:	f000 f855 	bl	800d704 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d65a:	4b02      	ldr	r3, [pc, #8]	@ (800d664 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	200000f0 	.word	0x200000f0

0800d668 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	4603      	mov	r3, r0
 800d670:	6039      	str	r1, [r7, #0]
 800d672:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d674:	79fb      	ldrb	r3, [r7, #7]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d105      	bne.n	800d686 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	4907      	ldr	r1, [pc, #28]	@ (800d69c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d67e:	4808      	ldr	r0, [pc, #32]	@ (800d6a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d680:	f7ff fdce 	bl	800d220 <USBD_GetString>
 800d684:	e004      	b.n	800d690 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	4904      	ldr	r1, [pc, #16]	@ (800d69c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d68a:	4805      	ldr	r0, [pc, #20]	@ (800d6a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d68c:	f7ff fdc8 	bl	800d220 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d690:	4b02      	ldr	r3, [pc, #8]	@ (800d69c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d692:	4618      	mov	r0, r3
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	20001c2c 	.word	0x20001c2c
 800d6a0:	0800ef90 	.word	0x0800ef90

0800d6a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6b0:	79fb      	ldrb	r3, [r7, #7]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d105      	bne.n	800d6c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	4907      	ldr	r1, [pc, #28]	@ (800d6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6ba:	4808      	ldr	r0, [pc, #32]	@ (800d6dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6bc:	f7ff fdb0 	bl	800d220 <USBD_GetString>
 800d6c0:	e004      	b.n	800d6cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	4904      	ldr	r1, [pc, #16]	@ (800d6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6c6:	4805      	ldr	r0, [pc, #20]	@ (800d6dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6c8:	f7ff fdaa 	bl	800d220 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6cc:	4b02      	ldr	r3, [pc, #8]	@ (800d6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20001c2c 	.word	0x20001c2c
 800d6dc:	0800ef9c 	.word	0x0800ef9c

0800d6e0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	220c      	movs	r2, #12
 800d6f0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d6f2:	4b03      	ldr	r3, [pc, #12]	@ (800d700 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	200000e0 	.word	0x200000e0

0800d704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d70a:	4b0f      	ldr	r3, [pc, #60]	@ (800d748 <Get_SerialNum+0x44>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d710:	4b0e      	ldr	r3, [pc, #56]	@ (800d74c <Get_SerialNum+0x48>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d716:	4b0e      	ldr	r3, [pc, #56]	@ (800d750 <Get_SerialNum+0x4c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4413      	add	r3, r2
 800d722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d009      	beq.n	800d73e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d72a:	2208      	movs	r2, #8
 800d72c:	4909      	ldr	r1, [pc, #36]	@ (800d754 <Get_SerialNum+0x50>)
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 f814 	bl	800d75c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d734:	2204      	movs	r2, #4
 800d736:	4908      	ldr	r1, [pc, #32]	@ (800d758 <Get_SerialNum+0x54>)
 800d738:	68b8      	ldr	r0, [r7, #8]
 800d73a:	f000 f80f 	bl	800d75c <IntToUnicode>
  }
}
 800d73e:	bf00      	nop
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	1fff7590 	.word	0x1fff7590
 800d74c:	1fff7594 	.word	0x1fff7594
 800d750:	1fff7598 	.word	0x1fff7598
 800d754:	200000f2 	.word	0x200000f2
 800d758:	20000102 	.word	0x20000102

0800d75c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b087      	sub	sp, #28
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	4613      	mov	r3, r2
 800d768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d76e:	2300      	movs	r3, #0
 800d770:	75fb      	strb	r3, [r7, #23]
 800d772:	e027      	b.n	800d7c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	0f1b      	lsrs	r3, r3, #28
 800d778:	2b09      	cmp	r3, #9
 800d77a:	d80b      	bhi.n	800d794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	0f1b      	lsrs	r3, r3, #28
 800d780:	b2da      	uxtb	r2, r3
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	4619      	mov	r1, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	440b      	add	r3, r1
 800d78c:	3230      	adds	r2, #48	@ 0x30
 800d78e:	b2d2      	uxtb	r2, r2
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	e00a      	b.n	800d7aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	0f1b      	lsrs	r3, r3, #28
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	7dfb      	ldrb	r3, [r7, #23]
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	4619      	mov	r1, r3
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	440b      	add	r3, r1
 800d7a4:	3237      	adds	r2, #55	@ 0x37
 800d7a6:	b2d2      	uxtb	r2, r2
 800d7a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	011b      	lsls	r3, r3, #4
 800d7ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7be:	7dfb      	ldrb	r3, [r7, #23]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	75fb      	strb	r3, [r7, #23]
 800d7c4:	7dfa      	ldrb	r2, [r7, #23]
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d3d3      	bcc.n	800d774 <IntToUnicode+0x18>
  }
}
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
	...

0800d7dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08a      	sub	sp, #40	@ 0x28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7e4:	f107 0314 	add.w	r3, r7, #20
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	609a      	str	r2, [r3, #8]
 800d7f0:	60da      	str	r2, [r3, #12]
 800d7f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7fc:	d14e      	bne.n	800d89c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7fe:	4b29      	ldr	r3, [pc, #164]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d802:	4a28      	ldr	r2, [pc, #160]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d804:	f043 0301 	orr.w	r3, r3, #1
 800d808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d80a:	4b26      	ldr	r3, [pc, #152]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d80c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	613b      	str	r3, [r7, #16]
 800d814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800d816:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800d81a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d81c:	2302      	movs	r3, #2
 800d81e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d820:	2300      	movs	r3, #0
 800d822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d824:	2303      	movs	r3, #3
 800d826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d828:	230a      	movs	r3, #10
 800d82a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d82c:	f107 0314 	add.w	r3, r7, #20
 800d830:	4619      	mov	r1, r3
 800d832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d836:	f7f6 f841 	bl	80038bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d83a:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d83c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d83e:	4a19      	ldr	r2, [pc, #100]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d846:	4b17      	ldr	r3, [pc, #92]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d84a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d852:	4b14      	ldr	r3, [pc, #80]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d114      	bne.n	800d888 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d85e:	4b11      	ldr	r3, [pc, #68]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d862:	4a10      	ldr	r2, [pc, #64]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d868:	6593      	str	r3, [r2, #88]	@ 0x58
 800d86a:	4b0e      	ldr	r3, [pc, #56]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d86e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d872:	60bb      	str	r3, [r7, #8]
 800d874:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d876:	f7f7 fd07 	bl	8005288 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d87a:	4b0a      	ldr	r3, [pc, #40]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d87c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d87e:	4a09      	ldr	r2, [pc, #36]	@ (800d8a4 <HAL_PCD_MspInit+0xc8>)
 800d880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d884:	6593      	str	r3, [r2, #88]	@ 0x58
 800d886:	e001      	b.n	800d88c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d888:	f7f7 fcfe 	bl	8005288 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d88c:	2200      	movs	r2, #0
 800d88e:	2100      	movs	r1, #0
 800d890:	2043      	movs	r0, #67	@ 0x43
 800d892:	f7f5 fe4a 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d896:	2043      	movs	r0, #67	@ 0x43
 800d898:	f7f5 fe63 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d89c:	bf00      	nop
 800d89e:	3728      	adds	r7, #40	@ 0x28
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	40021000 	.word	0x40021000

0800d8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7fe fb21 	bl	800bf06 <USBD_LL_SetupStage>
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d8de:	78fa      	ldrb	r2, [r7, #3]
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	4413      	add	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	440b      	add	r3, r1
 800d8ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	f7fe fb5b 	bl	800bfb0 <USBD_LL_DataOutStage>
}
 800d8fa:	bf00      	nop
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	460b      	mov	r3, r1
 800d90c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	6879      	ldr	r1, [r7, #4]
 800d918:	4613      	mov	r3, r2
 800d91a:	00db      	lsls	r3, r3, #3
 800d91c:	4413      	add	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	440b      	add	r3, r1
 800d922:	3320      	adds	r3, #32
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	78fb      	ldrb	r3, [r7, #3]
 800d928:	4619      	mov	r1, r3
 800d92a:	f7fe fbf4 	bl	800c116 <USBD_LL_DataInStage>
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fd2e 	bl	800c3a6 <USBD_LL_SOF>
}
 800d94a:	bf00      	nop
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b084      	sub	sp, #16
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d95a:	2301      	movs	r3, #1
 800d95c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	79db      	ldrb	r3, [r3, #7]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d001      	beq.n	800d96a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d966:	f7f3 fd3b 	bl	80013e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d970:	7bfa      	ldrb	r2, [r7, #15]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7fe fcd2 	bl	800c31e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d980:	4618      	mov	r0, r3
 800d982:	f7fe fc7a 	bl	800c27a <USBD_LL_Reset>
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	6812      	ldr	r2, [r2, #0]
 800d9a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fcc1 	bl	800c33e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7adb      	ldrb	r3, [r3, #11]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d005      	beq.n	800d9d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9c4:	4b04      	ldr	r3, [pc, #16]	@ (800d9d8 <HAL_PCD_SuspendCallback+0x48>)
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	4a03      	ldr	r2, [pc, #12]	@ (800d9d8 <HAL_PCD_SuspendCallback+0x48>)
 800d9ca:	f043 0306 	orr.w	r3, r3, #6
 800d9ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	e000ed00 	.word	0xe000ed00

0800d9dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	6812      	ldr	r2, [r2, #0]
 800d9f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d9f6:	f023 0301 	bic.w	r3, r3, #1
 800d9fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7adb      	ldrb	r3, [r3, #11]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d007      	beq.n	800da14 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da04:	4b08      	ldr	r3, [pc, #32]	@ (800da28 <HAL_PCD_ResumeCallback+0x4c>)
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	4a07      	ldr	r2, [pc, #28]	@ (800da28 <HAL_PCD_ResumeCallback+0x4c>)
 800da0a:	f023 0306 	bic.w	r3, r3, #6
 800da0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800da10:	f000 faf6 	bl	800e000 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fcab 	bl	800c376 <USBD_LL_Resume>
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	e000ed00 	.word	0xe000ed00

0800da2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da3e:	78fa      	ldrb	r2, [r7, #3]
 800da40:	4611      	mov	r1, r2
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fd01 	bl	800c44a <USBD_LL_IsoOUTIncomplete>
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	4611      	mov	r1, r2
 800da66:	4618      	mov	r0, r3
 800da68:	f7fe fcbd 	bl	800c3e6 <USBD_LL_IsoINIncomplete>
}
 800da6c:	bf00      	nop
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da82:	4618      	mov	r0, r3
 800da84:	f7fe fd13 	bl	800c4ae <USBD_LL_DevConnected>
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fd10 	bl	800c4c4 <USBD_LL_DevDisconnected>
}
 800daa4:	bf00      	nop
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d13c      	bne.n	800db36 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dabc:	4a20      	ldr	r2, [pc, #128]	@ (800db40 <USBD_LL_Init+0x94>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a1e      	ldr	r2, [pc, #120]	@ (800db40 <USBD_LL_Init+0x94>)
 800dac8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dacc:	4b1c      	ldr	r3, [pc, #112]	@ (800db40 <USBD_LL_Init+0x94>)
 800dace:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dad4:	4b1a      	ldr	r3, [pc, #104]	@ (800db40 <USBD_LL_Init+0x94>)
 800dad6:	2206      	movs	r2, #6
 800dad8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dada:	4b19      	ldr	r3, [pc, #100]	@ (800db40 <USBD_LL_Init+0x94>)
 800dadc:	2202      	movs	r2, #2
 800dade:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dae0:	4b17      	ldr	r3, [pc, #92]	@ (800db40 <USBD_LL_Init+0x94>)
 800dae2:	2202      	movs	r2, #2
 800dae4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dae6:	4b16      	ldr	r3, [pc, #88]	@ (800db40 <USBD_LL_Init+0x94>)
 800dae8:	2200      	movs	r2, #0
 800daea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800daec:	4b14      	ldr	r3, [pc, #80]	@ (800db40 <USBD_LL_Init+0x94>)
 800daee:	2200      	movs	r2, #0
 800daf0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800daf2:	4b13      	ldr	r3, [pc, #76]	@ (800db40 <USBD_LL_Init+0x94>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800daf8:	4b11      	ldr	r3, [pc, #68]	@ (800db40 <USBD_LL_Init+0x94>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dafe:	4b10      	ldr	r3, [pc, #64]	@ (800db40 <USBD_LL_Init+0x94>)
 800db00:	2200      	movs	r2, #0
 800db02:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800db04:	4b0e      	ldr	r3, [pc, #56]	@ (800db40 <USBD_LL_Init+0x94>)
 800db06:	2200      	movs	r2, #0
 800db08:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800db0a:	480d      	ldr	r0, [pc, #52]	@ (800db40 <USBD_LL_Init+0x94>)
 800db0c:	f7f6 f9b2 	bl	8003e74 <HAL_PCD_Init>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800db16:	f7f3 fc63 	bl	80013e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800db1a:	2180      	movs	r1, #128	@ 0x80
 800db1c:	4808      	ldr	r0, [pc, #32]	@ (800db40 <USBD_LL_Init+0x94>)
 800db1e:	f7f7 fb0a 	bl	8005136 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800db22:	2240      	movs	r2, #64	@ 0x40
 800db24:	2100      	movs	r1, #0
 800db26:	4806      	ldr	r0, [pc, #24]	@ (800db40 <USBD_LL_Init+0x94>)
 800db28:	f7f7 fabe 	bl	80050a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800db2c:	2280      	movs	r2, #128	@ 0x80
 800db2e:	2101      	movs	r1, #1
 800db30:	4803      	ldr	r0, [pc, #12]	@ (800db40 <USBD_LL_Init+0x94>)
 800db32:	f7f7 fab9 	bl	80050a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	20001e2c 	.word	0x20001e2c

0800db44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f6 fa99 	bl	8004092 <HAL_PCD_Start>
 800db60:	4603      	mov	r3, r0
 800db62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db64:	7bbb      	ldrb	r3, [r7, #14]
 800db66:	2b03      	cmp	r3, #3
 800db68:	d816      	bhi.n	800db98 <USBD_LL_Start+0x54>
 800db6a:	a201      	add	r2, pc, #4	@ (adr r2, 800db70 <USBD_LL_Start+0x2c>)
 800db6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db70:	0800db81 	.word	0x0800db81
 800db74:	0800db87 	.word	0x0800db87
 800db78:	0800db8d 	.word	0x0800db8d
 800db7c:	0800db93 	.word	0x0800db93
    case HAL_OK :
      usb_status = USBD_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	73fb      	strb	r3, [r7, #15]
    break;
 800db84:	e00b      	b.n	800db9e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db86:	2303      	movs	r3, #3
 800db88:	73fb      	strb	r3, [r7, #15]
    break;
 800db8a:	e008      	b.n	800db9e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db8c:	2301      	movs	r3, #1
 800db8e:	73fb      	strb	r3, [r7, #15]
    break;
 800db90:	e005      	b.n	800db9e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db92:	2303      	movs	r3, #3
 800db94:	73fb      	strb	r3, [r7, #15]
    break;
 800db96:	e002      	b.n	800db9e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800db98:	2303      	movs	r3, #3
 800db9a:	73fb      	strb	r3, [r7, #15]
    break;
 800db9c:	bf00      	nop
  }
  return usb_status;
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	70fb      	strb	r3, [r7, #3]
 800dbba:	460b      	mov	r3, r1
 800dbbc:	70bb      	strb	r3, [r7, #2]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dbd0:	78bb      	ldrb	r3, [r7, #2]
 800dbd2:	883a      	ldrh	r2, [r7, #0]
 800dbd4:	78f9      	ldrb	r1, [r7, #3]
 800dbd6:	f7f6 ff45 	bl	8004a64 <HAL_PCD_EP_Open>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dbde:	7bbb      	ldrb	r3, [r7, #14]
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d817      	bhi.n	800dc14 <USBD_LL_OpenEP+0x6c>
 800dbe4:	a201      	add	r2, pc, #4	@ (adr r2, 800dbec <USBD_LL_OpenEP+0x44>)
 800dbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbea:	bf00      	nop
 800dbec:	0800dbfd 	.word	0x0800dbfd
 800dbf0:	0800dc03 	.word	0x0800dc03
 800dbf4:	0800dc09 	.word	0x0800dc09
 800dbf8:	0800dc0f 	.word	0x0800dc0f
    case HAL_OK :
      usb_status = USBD_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800dc00:	e00b      	b.n	800dc1a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	73fb      	strb	r3, [r7, #15]
    break;
 800dc06:	e008      	b.n	800dc1a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc0c:	e005      	b.n	800dc1a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	73fb      	strb	r3, [r7, #15]
    break;
 800dc12:	e002      	b.n	800dc1a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800dc14:	2303      	movs	r3, #3
 800dc16:	73fb      	strb	r3, [r7, #15]
    break;
 800dc18:	bf00      	nop
  }
  return usb_status;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc3e:	78fa      	ldrb	r2, [r7, #3]
 800dc40:	4611      	mov	r1, r2
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7f6 ff78 	bl	8004b38 <HAL_PCD_EP_Close>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dc4c:	7bbb      	ldrb	r3, [r7, #14]
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	d816      	bhi.n	800dc80 <USBD_LL_CloseEP+0x5c>
 800dc52:	a201      	add	r2, pc, #4	@ (adr r2, 800dc58 <USBD_LL_CloseEP+0x34>)
 800dc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc58:	0800dc69 	.word	0x0800dc69
 800dc5c:	0800dc6f 	.word	0x0800dc6f
 800dc60:	0800dc75 	.word	0x0800dc75
 800dc64:	0800dc7b 	.word	0x0800dc7b
    case HAL_OK :
      usb_status = USBD_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc6c:	e00b      	b.n	800dc86 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	73fb      	strb	r3, [r7, #15]
    break;
 800dc72:	e008      	b.n	800dc86 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc74:	2301      	movs	r3, #1
 800dc76:	73fb      	strb	r3, [r7, #15]
    break;
 800dc78:	e005      	b.n	800dc86 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc7e:	e002      	b.n	800dc86 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc80:	2303      	movs	r3, #3
 800dc82:	73fb      	strb	r3, [r7, #15]
    break;
 800dc84:	bf00      	nop
  }
  return usb_status;
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	4611      	mov	r1, r2
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f7 f807 	bl	8004cc2 <HAL_PCD_EP_SetStall>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dcb8:	7bbb      	ldrb	r3, [r7, #14]
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d816      	bhi.n	800dcec <USBD_LL_StallEP+0x5c>
 800dcbe:	a201      	add	r2, pc, #4	@ (adr r2, 800dcc4 <USBD_LL_StallEP+0x34>)
 800dcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc4:	0800dcd5 	.word	0x0800dcd5
 800dcc8:	0800dcdb 	.word	0x0800dcdb
 800dccc:	0800dce1 	.word	0x0800dce1
 800dcd0:	0800dce7 	.word	0x0800dce7
    case HAL_OK :
      usb_status = USBD_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd8:	e00b      	b.n	800dcf2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	73fb      	strb	r3, [r7, #15]
    break;
 800dcde:	e008      	b.n	800dcf2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dce0:	2301      	movs	r3, #1
 800dce2:	73fb      	strb	r3, [r7, #15]
    break;
 800dce4:	e005      	b.n	800dcf2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcea:	e002      	b.n	800dcf2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dcec:	2303      	movs	r3, #3
 800dcee:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf0:	bf00      	nop
  }
  return usb_status;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd16:	78fa      	ldrb	r2, [r7, #3]
 800dd18:	4611      	mov	r1, r2
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7f7 f833 	bl	8004d86 <HAL_PCD_EP_ClrStall>
 800dd20:	4603      	mov	r3, r0
 800dd22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d816      	bhi.n	800dd58 <USBD_LL_ClearStallEP+0x5c>
 800dd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd30 <USBD_LL_ClearStallEP+0x34>)
 800dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd30:	0800dd41 	.word	0x0800dd41
 800dd34:	0800dd47 	.word	0x0800dd47
 800dd38:	0800dd4d 	.word	0x0800dd4d
 800dd3c:	0800dd53 	.word	0x0800dd53
    case HAL_OK :
      usb_status = USBD_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]
    break;
 800dd44:	e00b      	b.n	800dd5e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd46:	2303      	movs	r3, #3
 800dd48:	73fb      	strb	r3, [r7, #15]
    break;
 800dd4a:	e008      	b.n	800dd5e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd50:	e005      	b.n	800dd5e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd52:	2303      	movs	r3, #3
 800dd54:	73fb      	strb	r3, [r7, #15]
    break;
 800dd56:	e002      	b.n	800dd5e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd5c:	bf00      	nop
  }
  return usb_status;
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	da0b      	bge.n	800dd9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd84:	78fb      	ldrb	r3, [r7, #3]
 800dd86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd8a:	68f9      	ldr	r1, [r7, #12]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	440b      	add	r3, r1
 800dd96:	3316      	adds	r3, #22
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	e00b      	b.n	800ddb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd9c:	78fb      	ldrb	r3, [r7, #3]
 800dd9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dda2:	68f9      	ldr	r1, [r7, #12]
 800dda4:	4613      	mov	r3, r2
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	4413      	add	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	440b      	add	r3, r1
 800ddae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ddb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddda:	78fa      	ldrb	r2, [r7, #3]
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f6 fe1c 	bl	8004a1c <HAL_PCD_SetAddress>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d816      	bhi.n	800de1c <USBD_LL_SetUSBAddress+0x5c>
 800ddee:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf4 <USBD_LL_SetUSBAddress+0x34>)
 800ddf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf4:	0800de05 	.word	0x0800de05
 800ddf8:	0800de0b 	.word	0x0800de0b
 800ddfc:	0800de11 	.word	0x0800de11
 800de00:	0800de17 	.word	0x0800de17
    case HAL_OK :
      usb_status = USBD_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	73fb      	strb	r3, [r7, #15]
    break;
 800de08:	e00b      	b.n	800de22 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de0a:	2303      	movs	r3, #3
 800de0c:	73fb      	strb	r3, [r7, #15]
    break;
 800de0e:	e008      	b.n	800de22 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de10:	2301      	movs	r3, #1
 800de12:	73fb      	strb	r3, [r7, #15]
    break;
 800de14:	e005      	b.n	800de22 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de16:	2303      	movs	r3, #3
 800de18:	73fb      	strb	r3, [r7, #15]
    break;
 800de1a:	e002      	b.n	800de22 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800de1c:	2303      	movs	r3, #3
 800de1e:	73fb      	strb	r3, [r7, #15]
    break;
 800de20:	bf00      	nop
  }
  return usb_status;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	607a      	str	r2, [r7, #4]
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	460b      	mov	r3, r1
 800de3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de3c:	2300      	movs	r3, #0
 800de3e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de4a:	7af9      	ldrb	r1, [r7, #11]
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	f7f6 ff06 	bl	8004c60 <HAL_PCD_EP_Transmit>
 800de54:	4603      	mov	r3, r0
 800de56:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800de58:	7dbb      	ldrb	r3, [r7, #22]
 800de5a:	2b03      	cmp	r3, #3
 800de5c:	d816      	bhi.n	800de8c <USBD_LL_Transmit+0x60>
 800de5e:	a201      	add	r2, pc, #4	@ (adr r2, 800de64 <USBD_LL_Transmit+0x38>)
 800de60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de64:	0800de75 	.word	0x0800de75
 800de68:	0800de7b 	.word	0x0800de7b
 800de6c:	0800de81 	.word	0x0800de81
 800de70:	0800de87 	.word	0x0800de87
    case HAL_OK :
      usb_status = USBD_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	75fb      	strb	r3, [r7, #23]
    break;
 800de78:	e00b      	b.n	800de92 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de7a:	2303      	movs	r3, #3
 800de7c:	75fb      	strb	r3, [r7, #23]
    break;
 800de7e:	e008      	b.n	800de92 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de80:	2301      	movs	r3, #1
 800de82:	75fb      	strb	r3, [r7, #23]
    break;
 800de84:	e005      	b.n	800de92 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de86:	2303      	movs	r3, #3
 800de88:	75fb      	strb	r3, [r7, #23]
    break;
 800de8a:	e002      	b.n	800de92 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800de8c:	2303      	movs	r3, #3
 800de8e:	75fb      	strb	r3, [r7, #23]
    break;
 800de90:	bf00      	nop
  }
  return usb_status;
 800de92:	7dfb      	ldrb	r3, [r7, #23]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	607a      	str	r2, [r7, #4]
 800dea6:	603b      	str	r3, [r7, #0]
 800dea8:	460b      	mov	r3, r1
 800deaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800deba:	7af9      	ldrb	r1, [r7, #11]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	f7f6 fe84 	bl	8004bcc <HAL_PCD_EP_Receive>
 800dec4:	4603      	mov	r3, r0
 800dec6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dec8:	7dbb      	ldrb	r3, [r7, #22]
 800deca:	2b03      	cmp	r3, #3
 800decc:	d816      	bhi.n	800defc <USBD_LL_PrepareReceive+0x60>
 800dece:	a201      	add	r2, pc, #4	@ (adr r2, 800ded4 <USBD_LL_PrepareReceive+0x38>)
 800ded0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded4:	0800dee5 	.word	0x0800dee5
 800ded8:	0800deeb 	.word	0x0800deeb
 800dedc:	0800def1 	.word	0x0800def1
 800dee0:	0800def7 	.word	0x0800def7
    case HAL_OK :
      usb_status = USBD_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	75fb      	strb	r3, [r7, #23]
    break;
 800dee8:	e00b      	b.n	800df02 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800deea:	2303      	movs	r3, #3
 800deec:	75fb      	strb	r3, [r7, #23]
    break;
 800deee:	e008      	b.n	800df02 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800def0:	2301      	movs	r3, #1
 800def2:	75fb      	strb	r3, [r7, #23]
    break;
 800def4:	e005      	b.n	800df02 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800def6:	2303      	movs	r3, #3
 800def8:	75fb      	strb	r3, [r7, #23]
    break;
 800defa:	e002      	b.n	800df02 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800defc:	2303      	movs	r3, #3
 800defe:	75fb      	strb	r3, [r7, #23]
    break;
 800df00:	bf00      	nop
  }
  return usb_status;
 800df02:	7dfb      	ldrb	r3, [r7, #23]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df1e:	78fa      	ldrb	r2, [r7, #3]
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f7f6 fe84 	bl	8004c30 <HAL_PCD_EP_GetRxCount>
 800df28:	4603      	mov	r3, r0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
	...

0800df34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800df40:	78fb      	ldrb	r3, [r7, #3]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_PCDEx_LPM_Callback+0x18>
 800df46:	2b01      	cmp	r3, #1
 800df48:	d01f      	beq.n	800df8a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800df4a:	e03b      	b.n	800dfc4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7adb      	ldrb	r3, [r3, #11]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d007      	beq.n	800df64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800df54:	f000 f854 	bl	800e000 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df58:	4b1c      	ldr	r3, [pc, #112]	@ (800dfcc <HAL_PCDEx_LPM_Callback+0x98>)
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	4a1b      	ldr	r2, [pc, #108]	@ (800dfcc <HAL_PCDEx_LPM_Callback+0x98>)
 800df5e:	f023 0306 	bic.w	r3, r3, #6
 800df62:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	6812      	ldr	r2, [r2, #0]
 800df72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df76:	f023 0301 	bic.w	r3, r3, #1
 800df7a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe f9f7 	bl	800c376 <USBD_LL_Resume>
    break;
 800df88:	e01c      	b.n	800dfc4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	6812      	ldr	r2, [r2, #0]
 800df98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df9c:	f043 0301 	orr.w	r3, r3, #1
 800dfa0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe f9c8 	bl	800c33e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	7adb      	ldrb	r3, [r3, #11]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d005      	beq.n	800dfc2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dfb6:	4b05      	ldr	r3, [pc, #20]	@ (800dfcc <HAL_PCDEx_LPM_Callback+0x98>)
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	4a04      	ldr	r2, [pc, #16]	@ (800dfcc <HAL_PCDEx_LPM_Callback+0x98>)
 800dfbc:	f043 0306 	orr.w	r3, r3, #6
 800dfc0:	6113      	str	r3, [r2, #16]
    break;
 800dfc2:	bf00      	nop
}
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	e000ed00 	.word	0xe000ed00

0800dfd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dfd8:	4b03      	ldr	r3, [pc, #12]	@ (800dfe8 <USBD_static_malloc+0x18>)
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	20002310 	.word	0x20002310

0800dfec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]

}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e004:	f7f2 fb4c 	bl	80006a0 <SystemClock_Config>
}
 800e008:	bf00      	nop
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <std>:
 800e00c:	2300      	movs	r3, #0
 800e00e:	b510      	push	{r4, lr}
 800e010:	4604      	mov	r4, r0
 800e012:	e9c0 3300 	strd	r3, r3, [r0]
 800e016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e01a:	6083      	str	r3, [r0, #8]
 800e01c:	8181      	strh	r1, [r0, #12]
 800e01e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e020:	81c2      	strh	r2, [r0, #14]
 800e022:	6183      	str	r3, [r0, #24]
 800e024:	4619      	mov	r1, r3
 800e026:	2208      	movs	r2, #8
 800e028:	305c      	adds	r0, #92	@ 0x5c
 800e02a:	f000 f9f9 	bl	800e420 <memset>
 800e02e:	4b0d      	ldr	r3, [pc, #52]	@ (800e064 <std+0x58>)
 800e030:	6263      	str	r3, [r4, #36]	@ 0x24
 800e032:	4b0d      	ldr	r3, [pc, #52]	@ (800e068 <std+0x5c>)
 800e034:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e036:	4b0d      	ldr	r3, [pc, #52]	@ (800e06c <std+0x60>)
 800e038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e03a:	4b0d      	ldr	r3, [pc, #52]	@ (800e070 <std+0x64>)
 800e03c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e03e:	4b0d      	ldr	r3, [pc, #52]	@ (800e074 <std+0x68>)
 800e040:	6224      	str	r4, [r4, #32]
 800e042:	429c      	cmp	r4, r3
 800e044:	d006      	beq.n	800e054 <std+0x48>
 800e046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e04a:	4294      	cmp	r4, r2
 800e04c:	d002      	beq.n	800e054 <std+0x48>
 800e04e:	33d0      	adds	r3, #208	@ 0xd0
 800e050:	429c      	cmp	r4, r3
 800e052:	d105      	bne.n	800e060 <std+0x54>
 800e054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e05c:	f000 ba58 	b.w	800e510 <__retarget_lock_init_recursive>
 800e060:	bd10      	pop	{r4, pc}
 800e062:	bf00      	nop
 800e064:	0800e271 	.word	0x0800e271
 800e068:	0800e293 	.word	0x0800e293
 800e06c:	0800e2cb 	.word	0x0800e2cb
 800e070:	0800e2ef 	.word	0x0800e2ef
 800e074:	20002530 	.word	0x20002530

0800e078 <stdio_exit_handler>:
 800e078:	4a02      	ldr	r2, [pc, #8]	@ (800e084 <stdio_exit_handler+0xc>)
 800e07a:	4903      	ldr	r1, [pc, #12]	@ (800e088 <stdio_exit_handler+0x10>)
 800e07c:	4803      	ldr	r0, [pc, #12]	@ (800e08c <stdio_exit_handler+0x14>)
 800e07e:	f000 b869 	b.w	800e154 <_fwalk_sglue>
 800e082:	bf00      	nop
 800e084:	2000010c 	.word	0x2000010c
 800e088:	0800edad 	.word	0x0800edad
 800e08c:	2000011c 	.word	0x2000011c

0800e090 <cleanup_stdio>:
 800e090:	6841      	ldr	r1, [r0, #4]
 800e092:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c4 <cleanup_stdio+0x34>)
 800e094:	4299      	cmp	r1, r3
 800e096:	b510      	push	{r4, lr}
 800e098:	4604      	mov	r4, r0
 800e09a:	d001      	beq.n	800e0a0 <cleanup_stdio+0x10>
 800e09c:	f000 fe86 	bl	800edac <_fflush_r>
 800e0a0:	68a1      	ldr	r1, [r4, #8]
 800e0a2:	4b09      	ldr	r3, [pc, #36]	@ (800e0c8 <cleanup_stdio+0x38>)
 800e0a4:	4299      	cmp	r1, r3
 800e0a6:	d002      	beq.n	800e0ae <cleanup_stdio+0x1e>
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 fe7f 	bl	800edac <_fflush_r>
 800e0ae:	68e1      	ldr	r1, [r4, #12]
 800e0b0:	4b06      	ldr	r3, [pc, #24]	@ (800e0cc <cleanup_stdio+0x3c>)
 800e0b2:	4299      	cmp	r1, r3
 800e0b4:	d004      	beq.n	800e0c0 <cleanup_stdio+0x30>
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0bc:	f000 be76 	b.w	800edac <_fflush_r>
 800e0c0:	bd10      	pop	{r4, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20002530 	.word	0x20002530
 800e0c8:	20002598 	.word	0x20002598
 800e0cc:	20002600 	.word	0x20002600

0800e0d0 <global_stdio_init.part.0>:
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e100 <global_stdio_init.part.0+0x30>)
 800e0d4:	4c0b      	ldr	r4, [pc, #44]	@ (800e104 <global_stdio_init.part.0+0x34>)
 800e0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e108 <global_stdio_init.part.0+0x38>)
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	4620      	mov	r0, r4
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2104      	movs	r1, #4
 800e0e0:	f7ff ff94 	bl	800e00c <std>
 800e0e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	2109      	movs	r1, #9
 800e0ec:	f7ff ff8e 	bl	800e00c <std>
 800e0f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0fa:	2112      	movs	r1, #18
 800e0fc:	f7ff bf86 	b.w	800e00c <std>
 800e100:	20002668 	.word	0x20002668
 800e104:	20002530 	.word	0x20002530
 800e108:	0800e079 	.word	0x0800e079

0800e10c <__sfp_lock_acquire>:
 800e10c:	4801      	ldr	r0, [pc, #4]	@ (800e114 <__sfp_lock_acquire+0x8>)
 800e10e:	f000 ba00 	b.w	800e512 <__retarget_lock_acquire_recursive>
 800e112:	bf00      	nop
 800e114:	20002671 	.word	0x20002671

0800e118 <__sfp_lock_release>:
 800e118:	4801      	ldr	r0, [pc, #4]	@ (800e120 <__sfp_lock_release+0x8>)
 800e11a:	f000 b9fb 	b.w	800e514 <__retarget_lock_release_recursive>
 800e11e:	bf00      	nop
 800e120:	20002671 	.word	0x20002671

0800e124 <__sinit>:
 800e124:	b510      	push	{r4, lr}
 800e126:	4604      	mov	r4, r0
 800e128:	f7ff fff0 	bl	800e10c <__sfp_lock_acquire>
 800e12c:	6a23      	ldr	r3, [r4, #32]
 800e12e:	b11b      	cbz	r3, 800e138 <__sinit+0x14>
 800e130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e134:	f7ff bff0 	b.w	800e118 <__sfp_lock_release>
 800e138:	4b04      	ldr	r3, [pc, #16]	@ (800e14c <__sinit+0x28>)
 800e13a:	6223      	str	r3, [r4, #32]
 800e13c:	4b04      	ldr	r3, [pc, #16]	@ (800e150 <__sinit+0x2c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1f5      	bne.n	800e130 <__sinit+0xc>
 800e144:	f7ff ffc4 	bl	800e0d0 <global_stdio_init.part.0>
 800e148:	e7f2      	b.n	800e130 <__sinit+0xc>
 800e14a:	bf00      	nop
 800e14c:	0800e091 	.word	0x0800e091
 800e150:	20002668 	.word	0x20002668

0800e154 <_fwalk_sglue>:
 800e154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e158:	4607      	mov	r7, r0
 800e15a:	4688      	mov	r8, r1
 800e15c:	4614      	mov	r4, r2
 800e15e:	2600      	movs	r6, #0
 800e160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e164:	f1b9 0901 	subs.w	r9, r9, #1
 800e168:	d505      	bpl.n	800e176 <_fwalk_sglue+0x22>
 800e16a:	6824      	ldr	r4, [r4, #0]
 800e16c:	2c00      	cmp	r4, #0
 800e16e:	d1f7      	bne.n	800e160 <_fwalk_sglue+0xc>
 800e170:	4630      	mov	r0, r6
 800e172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e176:	89ab      	ldrh	r3, [r5, #12]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d907      	bls.n	800e18c <_fwalk_sglue+0x38>
 800e17c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e180:	3301      	adds	r3, #1
 800e182:	d003      	beq.n	800e18c <_fwalk_sglue+0x38>
 800e184:	4629      	mov	r1, r5
 800e186:	4638      	mov	r0, r7
 800e188:	47c0      	blx	r8
 800e18a:	4306      	orrs	r6, r0
 800e18c:	3568      	adds	r5, #104	@ 0x68
 800e18e:	e7e9      	b.n	800e164 <_fwalk_sglue+0x10>

0800e190 <iprintf>:
 800e190:	b40f      	push	{r0, r1, r2, r3}
 800e192:	b507      	push	{r0, r1, r2, lr}
 800e194:	4906      	ldr	r1, [pc, #24]	@ (800e1b0 <iprintf+0x20>)
 800e196:	ab04      	add	r3, sp, #16
 800e198:	6808      	ldr	r0, [r1, #0]
 800e19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e19e:	6881      	ldr	r1, [r0, #8]
 800e1a0:	9301      	str	r3, [sp, #4]
 800e1a2:	f000 fadb 	bl	800e75c <_vfiprintf_r>
 800e1a6:	b003      	add	sp, #12
 800e1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1ac:	b004      	add	sp, #16
 800e1ae:	4770      	bx	lr
 800e1b0:	20000118 	.word	0x20000118

0800e1b4 <_puts_r>:
 800e1b4:	6a03      	ldr	r3, [r0, #32]
 800e1b6:	b570      	push	{r4, r5, r6, lr}
 800e1b8:	6884      	ldr	r4, [r0, #8]
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	460e      	mov	r6, r1
 800e1be:	b90b      	cbnz	r3, 800e1c4 <_puts_r+0x10>
 800e1c0:	f7ff ffb0 	bl	800e124 <__sinit>
 800e1c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1c6:	07db      	lsls	r3, r3, #31
 800e1c8:	d405      	bmi.n	800e1d6 <_puts_r+0x22>
 800e1ca:	89a3      	ldrh	r3, [r4, #12]
 800e1cc:	0598      	lsls	r0, r3, #22
 800e1ce:	d402      	bmi.n	800e1d6 <_puts_r+0x22>
 800e1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1d2:	f000 f99e 	bl	800e512 <__retarget_lock_acquire_recursive>
 800e1d6:	89a3      	ldrh	r3, [r4, #12]
 800e1d8:	0719      	lsls	r1, r3, #28
 800e1da:	d502      	bpl.n	800e1e2 <_puts_r+0x2e>
 800e1dc:	6923      	ldr	r3, [r4, #16]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d135      	bne.n	800e24e <_puts_r+0x9a>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 f8c5 	bl	800e374 <__swsetup_r>
 800e1ea:	b380      	cbz	r0, 800e24e <_puts_r+0x9a>
 800e1ec:	f04f 35ff 	mov.w	r5, #4294967295
 800e1f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1f2:	07da      	lsls	r2, r3, #31
 800e1f4:	d405      	bmi.n	800e202 <_puts_r+0x4e>
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	059b      	lsls	r3, r3, #22
 800e1fa:	d402      	bmi.n	800e202 <_puts_r+0x4e>
 800e1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1fe:	f000 f989 	bl	800e514 <__retarget_lock_release_recursive>
 800e202:	4628      	mov	r0, r5
 800e204:	bd70      	pop	{r4, r5, r6, pc}
 800e206:	2b00      	cmp	r3, #0
 800e208:	da04      	bge.n	800e214 <_puts_r+0x60>
 800e20a:	69a2      	ldr	r2, [r4, #24]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	dc17      	bgt.n	800e240 <_puts_r+0x8c>
 800e210:	290a      	cmp	r1, #10
 800e212:	d015      	beq.n	800e240 <_puts_r+0x8c>
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	6022      	str	r2, [r4, #0]
 800e21a:	7019      	strb	r1, [r3, #0]
 800e21c:	68a3      	ldr	r3, [r4, #8]
 800e21e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e222:	3b01      	subs	r3, #1
 800e224:	60a3      	str	r3, [r4, #8]
 800e226:	2900      	cmp	r1, #0
 800e228:	d1ed      	bne.n	800e206 <_puts_r+0x52>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	da11      	bge.n	800e252 <_puts_r+0x9e>
 800e22e:	4622      	mov	r2, r4
 800e230:	210a      	movs	r1, #10
 800e232:	4628      	mov	r0, r5
 800e234:	f000 f85f 	bl	800e2f6 <__swbuf_r>
 800e238:	3001      	adds	r0, #1
 800e23a:	d0d7      	beq.n	800e1ec <_puts_r+0x38>
 800e23c:	250a      	movs	r5, #10
 800e23e:	e7d7      	b.n	800e1f0 <_puts_r+0x3c>
 800e240:	4622      	mov	r2, r4
 800e242:	4628      	mov	r0, r5
 800e244:	f000 f857 	bl	800e2f6 <__swbuf_r>
 800e248:	3001      	adds	r0, #1
 800e24a:	d1e7      	bne.n	800e21c <_puts_r+0x68>
 800e24c:	e7ce      	b.n	800e1ec <_puts_r+0x38>
 800e24e:	3e01      	subs	r6, #1
 800e250:	e7e4      	b.n	800e21c <_puts_r+0x68>
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	6022      	str	r2, [r4, #0]
 800e258:	220a      	movs	r2, #10
 800e25a:	701a      	strb	r2, [r3, #0]
 800e25c:	e7ee      	b.n	800e23c <_puts_r+0x88>
	...

0800e260 <puts>:
 800e260:	4b02      	ldr	r3, [pc, #8]	@ (800e26c <puts+0xc>)
 800e262:	4601      	mov	r1, r0
 800e264:	6818      	ldr	r0, [r3, #0]
 800e266:	f7ff bfa5 	b.w	800e1b4 <_puts_r>
 800e26a:	bf00      	nop
 800e26c:	20000118 	.word	0x20000118

0800e270 <__sread>:
 800e270:	b510      	push	{r4, lr}
 800e272:	460c      	mov	r4, r1
 800e274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e278:	f000 f8fc 	bl	800e474 <_read_r>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	bfab      	itete	ge
 800e280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e282:	89a3      	ldrhlt	r3, [r4, #12]
 800e284:	181b      	addge	r3, r3, r0
 800e286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e28a:	bfac      	ite	ge
 800e28c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e28e:	81a3      	strhlt	r3, [r4, #12]
 800e290:	bd10      	pop	{r4, pc}

0800e292 <__swrite>:
 800e292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e296:	461f      	mov	r7, r3
 800e298:	898b      	ldrh	r3, [r1, #12]
 800e29a:	05db      	lsls	r3, r3, #23
 800e29c:	4605      	mov	r5, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	4616      	mov	r6, r2
 800e2a2:	d505      	bpl.n	800e2b0 <__swrite+0x1e>
 800e2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f000 f8d0 	bl	800e450 <_lseek_r>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2ba:	81a3      	strh	r3, [r4, #12]
 800e2bc:	4632      	mov	r2, r6
 800e2be:	463b      	mov	r3, r7
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c6:	f000 b8e7 	b.w	800e498 <_write_r>

0800e2ca <__sseek>:
 800e2ca:	b510      	push	{r4, lr}
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d2:	f000 f8bd 	bl	800e450 <_lseek_r>
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	bf15      	itete	ne
 800e2dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e2de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e2e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e2e6:	81a3      	strheq	r3, [r4, #12]
 800e2e8:	bf18      	it	ne
 800e2ea:	81a3      	strhne	r3, [r4, #12]
 800e2ec:	bd10      	pop	{r4, pc}

0800e2ee <__sclose>:
 800e2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f2:	f000 b89d 	b.w	800e430 <_close_r>

0800e2f6 <__swbuf_r>:
 800e2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f8:	460e      	mov	r6, r1
 800e2fa:	4614      	mov	r4, r2
 800e2fc:	4605      	mov	r5, r0
 800e2fe:	b118      	cbz	r0, 800e308 <__swbuf_r+0x12>
 800e300:	6a03      	ldr	r3, [r0, #32]
 800e302:	b90b      	cbnz	r3, 800e308 <__swbuf_r+0x12>
 800e304:	f7ff ff0e 	bl	800e124 <__sinit>
 800e308:	69a3      	ldr	r3, [r4, #24]
 800e30a:	60a3      	str	r3, [r4, #8]
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	071a      	lsls	r2, r3, #28
 800e310:	d501      	bpl.n	800e316 <__swbuf_r+0x20>
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	b943      	cbnz	r3, 800e328 <__swbuf_r+0x32>
 800e316:	4621      	mov	r1, r4
 800e318:	4628      	mov	r0, r5
 800e31a:	f000 f82b 	bl	800e374 <__swsetup_r>
 800e31e:	b118      	cbz	r0, 800e328 <__swbuf_r+0x32>
 800e320:	f04f 37ff 	mov.w	r7, #4294967295
 800e324:	4638      	mov	r0, r7
 800e326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	6922      	ldr	r2, [r4, #16]
 800e32c:	1a98      	subs	r0, r3, r2
 800e32e:	6963      	ldr	r3, [r4, #20]
 800e330:	b2f6      	uxtb	r6, r6
 800e332:	4283      	cmp	r3, r0
 800e334:	4637      	mov	r7, r6
 800e336:	dc05      	bgt.n	800e344 <__swbuf_r+0x4e>
 800e338:	4621      	mov	r1, r4
 800e33a:	4628      	mov	r0, r5
 800e33c:	f000 fd36 	bl	800edac <_fflush_r>
 800e340:	2800      	cmp	r0, #0
 800e342:	d1ed      	bne.n	800e320 <__swbuf_r+0x2a>
 800e344:	68a3      	ldr	r3, [r4, #8]
 800e346:	3b01      	subs	r3, #1
 800e348:	60a3      	str	r3, [r4, #8]
 800e34a:	6823      	ldr	r3, [r4, #0]
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	6022      	str	r2, [r4, #0]
 800e350:	701e      	strb	r6, [r3, #0]
 800e352:	6962      	ldr	r2, [r4, #20]
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	429a      	cmp	r2, r3
 800e358:	d004      	beq.n	800e364 <__swbuf_r+0x6e>
 800e35a:	89a3      	ldrh	r3, [r4, #12]
 800e35c:	07db      	lsls	r3, r3, #31
 800e35e:	d5e1      	bpl.n	800e324 <__swbuf_r+0x2e>
 800e360:	2e0a      	cmp	r6, #10
 800e362:	d1df      	bne.n	800e324 <__swbuf_r+0x2e>
 800e364:	4621      	mov	r1, r4
 800e366:	4628      	mov	r0, r5
 800e368:	f000 fd20 	bl	800edac <_fflush_r>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d0d9      	beq.n	800e324 <__swbuf_r+0x2e>
 800e370:	e7d6      	b.n	800e320 <__swbuf_r+0x2a>
	...

0800e374 <__swsetup_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4b29      	ldr	r3, [pc, #164]	@ (800e41c <__swsetup_r+0xa8>)
 800e378:	4605      	mov	r5, r0
 800e37a:	6818      	ldr	r0, [r3, #0]
 800e37c:	460c      	mov	r4, r1
 800e37e:	b118      	cbz	r0, 800e388 <__swsetup_r+0x14>
 800e380:	6a03      	ldr	r3, [r0, #32]
 800e382:	b90b      	cbnz	r3, 800e388 <__swsetup_r+0x14>
 800e384:	f7ff fece 	bl	800e124 <__sinit>
 800e388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e38c:	0719      	lsls	r1, r3, #28
 800e38e:	d422      	bmi.n	800e3d6 <__swsetup_r+0x62>
 800e390:	06da      	lsls	r2, r3, #27
 800e392:	d407      	bmi.n	800e3a4 <__swsetup_r+0x30>
 800e394:	2209      	movs	r2, #9
 800e396:	602a      	str	r2, [r5, #0]
 800e398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a2:	e033      	b.n	800e40c <__swsetup_r+0x98>
 800e3a4:	0758      	lsls	r0, r3, #29
 800e3a6:	d512      	bpl.n	800e3ce <__swsetup_r+0x5a>
 800e3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3aa:	b141      	cbz	r1, 800e3be <__swsetup_r+0x4a>
 800e3ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3b0:	4299      	cmp	r1, r3
 800e3b2:	d002      	beq.n	800e3ba <__swsetup_r+0x46>
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	f000 f8af 	bl	800e518 <_free_r>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3be:	89a3      	ldrh	r3, [r4, #12]
 800e3c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e3c4:	81a3      	strh	r3, [r4, #12]
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	6063      	str	r3, [r4, #4]
 800e3ca:	6923      	ldr	r3, [r4, #16]
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	f043 0308 	orr.w	r3, r3, #8
 800e3d4:	81a3      	strh	r3, [r4, #12]
 800e3d6:	6923      	ldr	r3, [r4, #16]
 800e3d8:	b94b      	cbnz	r3, 800e3ee <__swsetup_r+0x7a>
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e3e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3e4:	d003      	beq.n	800e3ee <__swsetup_r+0x7a>
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f000 fd2d 	bl	800ee48 <__smakebuf_r>
 800e3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3f2:	f013 0201 	ands.w	r2, r3, #1
 800e3f6:	d00a      	beq.n	800e40e <__swsetup_r+0x9a>
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	60a2      	str	r2, [r4, #8]
 800e3fc:	6962      	ldr	r2, [r4, #20]
 800e3fe:	4252      	negs	r2, r2
 800e400:	61a2      	str	r2, [r4, #24]
 800e402:	6922      	ldr	r2, [r4, #16]
 800e404:	b942      	cbnz	r2, 800e418 <__swsetup_r+0xa4>
 800e406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e40a:	d1c5      	bne.n	800e398 <__swsetup_r+0x24>
 800e40c:	bd38      	pop	{r3, r4, r5, pc}
 800e40e:	0799      	lsls	r1, r3, #30
 800e410:	bf58      	it	pl
 800e412:	6962      	ldrpl	r2, [r4, #20]
 800e414:	60a2      	str	r2, [r4, #8]
 800e416:	e7f4      	b.n	800e402 <__swsetup_r+0x8e>
 800e418:	2000      	movs	r0, #0
 800e41a:	e7f7      	b.n	800e40c <__swsetup_r+0x98>
 800e41c:	20000118 	.word	0x20000118

0800e420 <memset>:
 800e420:	4402      	add	r2, r0
 800e422:	4603      	mov	r3, r0
 800e424:	4293      	cmp	r3, r2
 800e426:	d100      	bne.n	800e42a <memset+0xa>
 800e428:	4770      	bx	lr
 800e42a:	f803 1b01 	strb.w	r1, [r3], #1
 800e42e:	e7f9      	b.n	800e424 <memset+0x4>

0800e430 <_close_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4d06      	ldr	r5, [pc, #24]	@ (800e44c <_close_r+0x1c>)
 800e434:	2300      	movs	r3, #0
 800e436:	4604      	mov	r4, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	f7f3 fe85 	bl	800214a <_close>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	d102      	bne.n	800e44a <_close_r+0x1a>
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	b103      	cbz	r3, 800e44a <_close_r+0x1a>
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	2000266c 	.word	0x2000266c

0800e450 <_lseek_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4d07      	ldr	r5, [pc, #28]	@ (800e470 <_lseek_r+0x20>)
 800e454:	4604      	mov	r4, r0
 800e456:	4608      	mov	r0, r1
 800e458:	4611      	mov	r1, r2
 800e45a:	2200      	movs	r2, #0
 800e45c:	602a      	str	r2, [r5, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	f7f3 fe9a 	bl	8002198 <_lseek>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d102      	bne.n	800e46e <_lseek_r+0x1e>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	b103      	cbz	r3, 800e46e <_lseek_r+0x1e>
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	bd38      	pop	{r3, r4, r5, pc}
 800e470:	2000266c 	.word	0x2000266c

0800e474 <_read_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4d07      	ldr	r5, [pc, #28]	@ (800e494 <_read_r+0x20>)
 800e478:	4604      	mov	r4, r0
 800e47a:	4608      	mov	r0, r1
 800e47c:	4611      	mov	r1, r2
 800e47e:	2200      	movs	r2, #0
 800e480:	602a      	str	r2, [r5, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	f7f3 fe44 	bl	8002110 <_read>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_read_r+0x1e>
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_read_r+0x1e>
 800e490:	6023      	str	r3, [r4, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	2000266c 	.word	0x2000266c

0800e498 <_write_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4d07      	ldr	r5, [pc, #28]	@ (800e4b8 <_write_r+0x20>)
 800e49c:	4604      	mov	r4, r0
 800e49e:	4608      	mov	r0, r1
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	602a      	str	r2, [r5, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f7f2 f888 	bl	80005bc <_write>
 800e4ac:	1c43      	adds	r3, r0, #1
 800e4ae:	d102      	bne.n	800e4b6 <_write_r+0x1e>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	b103      	cbz	r3, 800e4b6 <_write_r+0x1e>
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	2000266c 	.word	0x2000266c

0800e4bc <__errno>:
 800e4bc:	4b01      	ldr	r3, [pc, #4]	@ (800e4c4 <__errno+0x8>)
 800e4be:	6818      	ldr	r0, [r3, #0]
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	20000118 	.word	0x20000118

0800e4c8 <__libc_init_array>:
 800e4c8:	b570      	push	{r4, r5, r6, lr}
 800e4ca:	4d0d      	ldr	r5, [pc, #52]	@ (800e500 <__libc_init_array+0x38>)
 800e4cc:	4c0d      	ldr	r4, [pc, #52]	@ (800e504 <__libc_init_array+0x3c>)
 800e4ce:	1b64      	subs	r4, r4, r5
 800e4d0:	10a4      	asrs	r4, r4, #2
 800e4d2:	2600      	movs	r6, #0
 800e4d4:	42a6      	cmp	r6, r4
 800e4d6:	d109      	bne.n	800e4ec <__libc_init_array+0x24>
 800e4d8:	4d0b      	ldr	r5, [pc, #44]	@ (800e508 <__libc_init_array+0x40>)
 800e4da:	4c0c      	ldr	r4, [pc, #48]	@ (800e50c <__libc_init_array+0x44>)
 800e4dc:	f000 fd22 	bl	800ef24 <_init>
 800e4e0:	1b64      	subs	r4, r4, r5
 800e4e2:	10a4      	asrs	r4, r4, #2
 800e4e4:	2600      	movs	r6, #0
 800e4e6:	42a6      	cmp	r6, r4
 800e4e8:	d105      	bne.n	800e4f6 <__libc_init_array+0x2e>
 800e4ea:	bd70      	pop	{r4, r5, r6, pc}
 800e4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4f0:	4798      	blx	r3
 800e4f2:	3601      	adds	r6, #1
 800e4f4:	e7ee      	b.n	800e4d4 <__libc_init_array+0xc>
 800e4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4fa:	4798      	blx	r3
 800e4fc:	3601      	adds	r6, #1
 800e4fe:	e7f2      	b.n	800e4e6 <__libc_init_array+0x1e>
 800e500:	0800f030 	.word	0x0800f030
 800e504:	0800f030 	.word	0x0800f030
 800e508:	0800f030 	.word	0x0800f030
 800e50c:	0800f034 	.word	0x0800f034

0800e510 <__retarget_lock_init_recursive>:
 800e510:	4770      	bx	lr

0800e512 <__retarget_lock_acquire_recursive>:
 800e512:	4770      	bx	lr

0800e514 <__retarget_lock_release_recursive>:
 800e514:	4770      	bx	lr
	...

0800e518 <_free_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4605      	mov	r5, r0
 800e51c:	2900      	cmp	r1, #0
 800e51e:	d041      	beq.n	800e5a4 <_free_r+0x8c>
 800e520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e524:	1f0c      	subs	r4, r1, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfb8      	it	lt
 800e52a:	18e4      	addlt	r4, r4, r3
 800e52c:	f000 f8e0 	bl	800e6f0 <__malloc_lock>
 800e530:	4a1d      	ldr	r2, [pc, #116]	@ (800e5a8 <_free_r+0x90>)
 800e532:	6813      	ldr	r3, [r2, #0]
 800e534:	b933      	cbnz	r3, 800e544 <_free_r+0x2c>
 800e536:	6063      	str	r3, [r4, #4]
 800e538:	6014      	str	r4, [r2, #0]
 800e53a:	4628      	mov	r0, r5
 800e53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e540:	f000 b8dc 	b.w	800e6fc <__malloc_unlock>
 800e544:	42a3      	cmp	r3, r4
 800e546:	d908      	bls.n	800e55a <_free_r+0x42>
 800e548:	6820      	ldr	r0, [r4, #0]
 800e54a:	1821      	adds	r1, r4, r0
 800e54c:	428b      	cmp	r3, r1
 800e54e:	bf01      	itttt	eq
 800e550:	6819      	ldreq	r1, [r3, #0]
 800e552:	685b      	ldreq	r3, [r3, #4]
 800e554:	1809      	addeq	r1, r1, r0
 800e556:	6021      	streq	r1, [r4, #0]
 800e558:	e7ed      	b.n	800e536 <_free_r+0x1e>
 800e55a:	461a      	mov	r2, r3
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	b10b      	cbz	r3, 800e564 <_free_r+0x4c>
 800e560:	42a3      	cmp	r3, r4
 800e562:	d9fa      	bls.n	800e55a <_free_r+0x42>
 800e564:	6811      	ldr	r1, [r2, #0]
 800e566:	1850      	adds	r0, r2, r1
 800e568:	42a0      	cmp	r0, r4
 800e56a:	d10b      	bne.n	800e584 <_free_r+0x6c>
 800e56c:	6820      	ldr	r0, [r4, #0]
 800e56e:	4401      	add	r1, r0
 800e570:	1850      	adds	r0, r2, r1
 800e572:	4283      	cmp	r3, r0
 800e574:	6011      	str	r1, [r2, #0]
 800e576:	d1e0      	bne.n	800e53a <_free_r+0x22>
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	6053      	str	r3, [r2, #4]
 800e57e:	4408      	add	r0, r1
 800e580:	6010      	str	r0, [r2, #0]
 800e582:	e7da      	b.n	800e53a <_free_r+0x22>
 800e584:	d902      	bls.n	800e58c <_free_r+0x74>
 800e586:	230c      	movs	r3, #12
 800e588:	602b      	str	r3, [r5, #0]
 800e58a:	e7d6      	b.n	800e53a <_free_r+0x22>
 800e58c:	6820      	ldr	r0, [r4, #0]
 800e58e:	1821      	adds	r1, r4, r0
 800e590:	428b      	cmp	r3, r1
 800e592:	bf04      	itt	eq
 800e594:	6819      	ldreq	r1, [r3, #0]
 800e596:	685b      	ldreq	r3, [r3, #4]
 800e598:	6063      	str	r3, [r4, #4]
 800e59a:	bf04      	itt	eq
 800e59c:	1809      	addeq	r1, r1, r0
 800e59e:	6021      	streq	r1, [r4, #0]
 800e5a0:	6054      	str	r4, [r2, #4]
 800e5a2:	e7ca      	b.n	800e53a <_free_r+0x22>
 800e5a4:	bd38      	pop	{r3, r4, r5, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20002678 	.word	0x20002678

0800e5ac <sbrk_aligned>:
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	4e0f      	ldr	r6, [pc, #60]	@ (800e5ec <sbrk_aligned+0x40>)
 800e5b0:	460c      	mov	r4, r1
 800e5b2:	6831      	ldr	r1, [r6, #0]
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	b911      	cbnz	r1, 800e5be <sbrk_aligned+0x12>
 800e5b8:	f000 fca4 	bl	800ef04 <_sbrk_r>
 800e5bc:	6030      	str	r0, [r6, #0]
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f000 fc9f 	bl	800ef04 <_sbrk_r>
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	d103      	bne.n	800e5d2 <sbrk_aligned+0x26>
 800e5ca:	f04f 34ff 	mov.w	r4, #4294967295
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	bd70      	pop	{r4, r5, r6, pc}
 800e5d2:	1cc4      	adds	r4, r0, #3
 800e5d4:	f024 0403 	bic.w	r4, r4, #3
 800e5d8:	42a0      	cmp	r0, r4
 800e5da:	d0f8      	beq.n	800e5ce <sbrk_aligned+0x22>
 800e5dc:	1a21      	subs	r1, r4, r0
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f000 fc90 	bl	800ef04 <_sbrk_r>
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	d1f2      	bne.n	800e5ce <sbrk_aligned+0x22>
 800e5e8:	e7ef      	b.n	800e5ca <sbrk_aligned+0x1e>
 800e5ea:	bf00      	nop
 800e5ec:	20002674 	.word	0x20002674

0800e5f0 <_malloc_r>:
 800e5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f4:	1ccd      	adds	r5, r1, #3
 800e5f6:	f025 0503 	bic.w	r5, r5, #3
 800e5fa:	3508      	adds	r5, #8
 800e5fc:	2d0c      	cmp	r5, #12
 800e5fe:	bf38      	it	cc
 800e600:	250c      	movcc	r5, #12
 800e602:	2d00      	cmp	r5, #0
 800e604:	4606      	mov	r6, r0
 800e606:	db01      	blt.n	800e60c <_malloc_r+0x1c>
 800e608:	42a9      	cmp	r1, r5
 800e60a:	d904      	bls.n	800e616 <_malloc_r+0x26>
 800e60c:	230c      	movs	r3, #12
 800e60e:	6033      	str	r3, [r6, #0]
 800e610:	2000      	movs	r0, #0
 800e612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e6ec <_malloc_r+0xfc>
 800e61a:	f000 f869 	bl	800e6f0 <__malloc_lock>
 800e61e:	f8d8 3000 	ldr.w	r3, [r8]
 800e622:	461c      	mov	r4, r3
 800e624:	bb44      	cbnz	r4, 800e678 <_malloc_r+0x88>
 800e626:	4629      	mov	r1, r5
 800e628:	4630      	mov	r0, r6
 800e62a:	f7ff ffbf 	bl	800e5ac <sbrk_aligned>
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	4604      	mov	r4, r0
 800e632:	d158      	bne.n	800e6e6 <_malloc_r+0xf6>
 800e634:	f8d8 4000 	ldr.w	r4, [r8]
 800e638:	4627      	mov	r7, r4
 800e63a:	2f00      	cmp	r7, #0
 800e63c:	d143      	bne.n	800e6c6 <_malloc_r+0xd6>
 800e63e:	2c00      	cmp	r4, #0
 800e640:	d04b      	beq.n	800e6da <_malloc_r+0xea>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	4639      	mov	r1, r7
 800e646:	4630      	mov	r0, r6
 800e648:	eb04 0903 	add.w	r9, r4, r3
 800e64c:	f000 fc5a 	bl	800ef04 <_sbrk_r>
 800e650:	4581      	cmp	r9, r0
 800e652:	d142      	bne.n	800e6da <_malloc_r+0xea>
 800e654:	6821      	ldr	r1, [r4, #0]
 800e656:	1a6d      	subs	r5, r5, r1
 800e658:	4629      	mov	r1, r5
 800e65a:	4630      	mov	r0, r6
 800e65c:	f7ff ffa6 	bl	800e5ac <sbrk_aligned>
 800e660:	3001      	adds	r0, #1
 800e662:	d03a      	beq.n	800e6da <_malloc_r+0xea>
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	442b      	add	r3, r5
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	f8d8 3000 	ldr.w	r3, [r8]
 800e66e:	685a      	ldr	r2, [r3, #4]
 800e670:	bb62      	cbnz	r2, 800e6cc <_malloc_r+0xdc>
 800e672:	f8c8 7000 	str.w	r7, [r8]
 800e676:	e00f      	b.n	800e698 <_malloc_r+0xa8>
 800e678:	6822      	ldr	r2, [r4, #0]
 800e67a:	1b52      	subs	r2, r2, r5
 800e67c:	d420      	bmi.n	800e6c0 <_malloc_r+0xd0>
 800e67e:	2a0b      	cmp	r2, #11
 800e680:	d917      	bls.n	800e6b2 <_malloc_r+0xc2>
 800e682:	1961      	adds	r1, r4, r5
 800e684:	42a3      	cmp	r3, r4
 800e686:	6025      	str	r5, [r4, #0]
 800e688:	bf18      	it	ne
 800e68a:	6059      	strne	r1, [r3, #4]
 800e68c:	6863      	ldr	r3, [r4, #4]
 800e68e:	bf08      	it	eq
 800e690:	f8c8 1000 	streq.w	r1, [r8]
 800e694:	5162      	str	r2, [r4, r5]
 800e696:	604b      	str	r3, [r1, #4]
 800e698:	4630      	mov	r0, r6
 800e69a:	f000 f82f 	bl	800e6fc <__malloc_unlock>
 800e69e:	f104 000b 	add.w	r0, r4, #11
 800e6a2:	1d23      	adds	r3, r4, #4
 800e6a4:	f020 0007 	bic.w	r0, r0, #7
 800e6a8:	1ac2      	subs	r2, r0, r3
 800e6aa:	bf1c      	itt	ne
 800e6ac:	1a1b      	subne	r3, r3, r0
 800e6ae:	50a3      	strne	r3, [r4, r2]
 800e6b0:	e7af      	b.n	800e612 <_malloc_r+0x22>
 800e6b2:	6862      	ldr	r2, [r4, #4]
 800e6b4:	42a3      	cmp	r3, r4
 800e6b6:	bf0c      	ite	eq
 800e6b8:	f8c8 2000 	streq.w	r2, [r8]
 800e6bc:	605a      	strne	r2, [r3, #4]
 800e6be:	e7eb      	b.n	800e698 <_malloc_r+0xa8>
 800e6c0:	4623      	mov	r3, r4
 800e6c2:	6864      	ldr	r4, [r4, #4]
 800e6c4:	e7ae      	b.n	800e624 <_malloc_r+0x34>
 800e6c6:	463c      	mov	r4, r7
 800e6c8:	687f      	ldr	r7, [r7, #4]
 800e6ca:	e7b6      	b.n	800e63a <_malloc_r+0x4a>
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	42a3      	cmp	r3, r4
 800e6d2:	d1fb      	bne.n	800e6cc <_malloc_r+0xdc>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	6053      	str	r3, [r2, #4]
 800e6d8:	e7de      	b.n	800e698 <_malloc_r+0xa8>
 800e6da:	230c      	movs	r3, #12
 800e6dc:	6033      	str	r3, [r6, #0]
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f000 f80c 	bl	800e6fc <__malloc_unlock>
 800e6e4:	e794      	b.n	800e610 <_malloc_r+0x20>
 800e6e6:	6005      	str	r5, [r0, #0]
 800e6e8:	e7d6      	b.n	800e698 <_malloc_r+0xa8>
 800e6ea:	bf00      	nop
 800e6ec:	20002678 	.word	0x20002678

0800e6f0 <__malloc_lock>:
 800e6f0:	4801      	ldr	r0, [pc, #4]	@ (800e6f8 <__malloc_lock+0x8>)
 800e6f2:	f7ff bf0e 	b.w	800e512 <__retarget_lock_acquire_recursive>
 800e6f6:	bf00      	nop
 800e6f8:	20002670 	.word	0x20002670

0800e6fc <__malloc_unlock>:
 800e6fc:	4801      	ldr	r0, [pc, #4]	@ (800e704 <__malloc_unlock+0x8>)
 800e6fe:	f7ff bf09 	b.w	800e514 <__retarget_lock_release_recursive>
 800e702:	bf00      	nop
 800e704:	20002670 	.word	0x20002670

0800e708 <__sfputc_r>:
 800e708:	6893      	ldr	r3, [r2, #8]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	b410      	push	{r4}
 800e710:	6093      	str	r3, [r2, #8]
 800e712:	da08      	bge.n	800e726 <__sfputc_r+0x1e>
 800e714:	6994      	ldr	r4, [r2, #24]
 800e716:	42a3      	cmp	r3, r4
 800e718:	db01      	blt.n	800e71e <__sfputc_r+0x16>
 800e71a:	290a      	cmp	r1, #10
 800e71c:	d103      	bne.n	800e726 <__sfputc_r+0x1e>
 800e71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e722:	f7ff bde8 	b.w	800e2f6 <__swbuf_r>
 800e726:	6813      	ldr	r3, [r2, #0]
 800e728:	1c58      	adds	r0, r3, #1
 800e72a:	6010      	str	r0, [r2, #0]
 800e72c:	7019      	strb	r1, [r3, #0]
 800e72e:	4608      	mov	r0, r1
 800e730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <__sfputs_r>:
 800e736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e738:	4606      	mov	r6, r0
 800e73a:	460f      	mov	r7, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	18d5      	adds	r5, r2, r3
 800e740:	42ac      	cmp	r4, r5
 800e742:	d101      	bne.n	800e748 <__sfputs_r+0x12>
 800e744:	2000      	movs	r0, #0
 800e746:	e007      	b.n	800e758 <__sfputs_r+0x22>
 800e748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e74c:	463a      	mov	r2, r7
 800e74e:	4630      	mov	r0, r6
 800e750:	f7ff ffda 	bl	800e708 <__sfputc_r>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d1f3      	bne.n	800e740 <__sfputs_r+0xa>
 800e758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e75c <_vfiprintf_r>:
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	460d      	mov	r5, r1
 800e762:	b09d      	sub	sp, #116	@ 0x74
 800e764:	4614      	mov	r4, r2
 800e766:	4698      	mov	r8, r3
 800e768:	4606      	mov	r6, r0
 800e76a:	b118      	cbz	r0, 800e774 <_vfiprintf_r+0x18>
 800e76c:	6a03      	ldr	r3, [r0, #32]
 800e76e:	b90b      	cbnz	r3, 800e774 <_vfiprintf_r+0x18>
 800e770:	f7ff fcd8 	bl	800e124 <__sinit>
 800e774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e776:	07d9      	lsls	r1, r3, #31
 800e778:	d405      	bmi.n	800e786 <_vfiprintf_r+0x2a>
 800e77a:	89ab      	ldrh	r3, [r5, #12]
 800e77c:	059a      	lsls	r2, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_vfiprintf_r+0x2a>
 800e780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e782:	f7ff fec6 	bl	800e512 <__retarget_lock_acquire_recursive>
 800e786:	89ab      	ldrh	r3, [r5, #12]
 800e788:	071b      	lsls	r3, r3, #28
 800e78a:	d501      	bpl.n	800e790 <_vfiprintf_r+0x34>
 800e78c:	692b      	ldr	r3, [r5, #16]
 800e78e:	b99b      	cbnz	r3, 800e7b8 <_vfiprintf_r+0x5c>
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f7ff fdee 	bl	800e374 <__swsetup_r>
 800e798:	b170      	cbz	r0, 800e7b8 <_vfiprintf_r+0x5c>
 800e79a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e79c:	07dc      	lsls	r4, r3, #31
 800e79e:	d504      	bpl.n	800e7aa <_vfiprintf_r+0x4e>
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a4:	b01d      	add	sp, #116	@ 0x74
 800e7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	0598      	lsls	r0, r3, #22
 800e7ae:	d4f7      	bmi.n	800e7a0 <_vfiprintf_r+0x44>
 800e7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7b2:	f7ff feaf 	bl	800e514 <__retarget_lock_release_recursive>
 800e7b6:	e7f3      	b.n	800e7a0 <_vfiprintf_r+0x44>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7bc:	2320      	movs	r3, #32
 800e7be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7c6:	2330      	movs	r3, #48	@ 0x30
 800e7c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e978 <_vfiprintf_r+0x21c>
 800e7cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7d0:	f04f 0901 	mov.w	r9, #1
 800e7d4:	4623      	mov	r3, r4
 800e7d6:	469a      	mov	sl, r3
 800e7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7dc:	b10a      	cbz	r2, 800e7e2 <_vfiprintf_r+0x86>
 800e7de:	2a25      	cmp	r2, #37	@ 0x25
 800e7e0:	d1f9      	bne.n	800e7d6 <_vfiprintf_r+0x7a>
 800e7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7e6:	d00b      	beq.n	800e800 <_vfiprintf_r+0xa4>
 800e7e8:	465b      	mov	r3, fp
 800e7ea:	4622      	mov	r2, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7ff ffa1 	bl	800e736 <__sfputs_r>
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	f000 80a7 	beq.w	800e948 <_vfiprintf_r+0x1ec>
 800e7fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7fc:	445a      	add	r2, fp
 800e7fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e800:	f89a 3000 	ldrb.w	r3, [sl]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 809f 	beq.w	800e948 <_vfiprintf_r+0x1ec>
 800e80a:	2300      	movs	r3, #0
 800e80c:	f04f 32ff 	mov.w	r2, #4294967295
 800e810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e814:	f10a 0a01 	add.w	sl, sl, #1
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	9307      	str	r3, [sp, #28]
 800e81c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e820:	931a      	str	r3, [sp, #104]	@ 0x68
 800e822:	4654      	mov	r4, sl
 800e824:	2205      	movs	r2, #5
 800e826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e82a:	4853      	ldr	r0, [pc, #332]	@ (800e978 <_vfiprintf_r+0x21c>)
 800e82c:	f7f1 fce0 	bl	80001f0 <memchr>
 800e830:	9a04      	ldr	r2, [sp, #16]
 800e832:	b9d8      	cbnz	r0, 800e86c <_vfiprintf_r+0x110>
 800e834:	06d1      	lsls	r1, r2, #27
 800e836:	bf44      	itt	mi
 800e838:	2320      	movmi	r3, #32
 800e83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e83e:	0713      	lsls	r3, r2, #28
 800e840:	bf44      	itt	mi
 800e842:	232b      	movmi	r3, #43	@ 0x2b
 800e844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e848:	f89a 3000 	ldrb.w	r3, [sl]
 800e84c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e84e:	d015      	beq.n	800e87c <_vfiprintf_r+0x120>
 800e850:	9a07      	ldr	r2, [sp, #28]
 800e852:	4654      	mov	r4, sl
 800e854:	2000      	movs	r0, #0
 800e856:	f04f 0c0a 	mov.w	ip, #10
 800e85a:	4621      	mov	r1, r4
 800e85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e860:	3b30      	subs	r3, #48	@ 0x30
 800e862:	2b09      	cmp	r3, #9
 800e864:	d94b      	bls.n	800e8fe <_vfiprintf_r+0x1a2>
 800e866:	b1b0      	cbz	r0, 800e896 <_vfiprintf_r+0x13a>
 800e868:	9207      	str	r2, [sp, #28]
 800e86a:	e014      	b.n	800e896 <_vfiprintf_r+0x13a>
 800e86c:	eba0 0308 	sub.w	r3, r0, r8
 800e870:	fa09 f303 	lsl.w	r3, r9, r3
 800e874:	4313      	orrs	r3, r2
 800e876:	9304      	str	r3, [sp, #16]
 800e878:	46a2      	mov	sl, r4
 800e87a:	e7d2      	b.n	800e822 <_vfiprintf_r+0xc6>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	1d19      	adds	r1, r3, #4
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	9103      	str	r1, [sp, #12]
 800e884:	2b00      	cmp	r3, #0
 800e886:	bfbb      	ittet	lt
 800e888:	425b      	neglt	r3, r3
 800e88a:	f042 0202 	orrlt.w	r2, r2, #2
 800e88e:	9307      	strge	r3, [sp, #28]
 800e890:	9307      	strlt	r3, [sp, #28]
 800e892:	bfb8      	it	lt
 800e894:	9204      	strlt	r2, [sp, #16]
 800e896:	7823      	ldrb	r3, [r4, #0]
 800e898:	2b2e      	cmp	r3, #46	@ 0x2e
 800e89a:	d10a      	bne.n	800e8b2 <_vfiprintf_r+0x156>
 800e89c:	7863      	ldrb	r3, [r4, #1]
 800e89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8a0:	d132      	bne.n	800e908 <_vfiprintf_r+0x1ac>
 800e8a2:	9b03      	ldr	r3, [sp, #12]
 800e8a4:	1d1a      	adds	r2, r3, #4
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	9203      	str	r2, [sp, #12]
 800e8aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ae:	3402      	adds	r4, #2
 800e8b0:	9305      	str	r3, [sp, #20]
 800e8b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e988 <_vfiprintf_r+0x22c>
 800e8b6:	7821      	ldrb	r1, [r4, #0]
 800e8b8:	2203      	movs	r2, #3
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	f7f1 fc98 	bl	80001f0 <memchr>
 800e8c0:	b138      	cbz	r0, 800e8d2 <_vfiprintf_r+0x176>
 800e8c2:	9b04      	ldr	r3, [sp, #16]
 800e8c4:	eba0 000a 	sub.w	r0, r0, sl
 800e8c8:	2240      	movs	r2, #64	@ 0x40
 800e8ca:	4082      	lsls	r2, r0
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	3401      	adds	r4, #1
 800e8d0:	9304      	str	r3, [sp, #16]
 800e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d6:	4829      	ldr	r0, [pc, #164]	@ (800e97c <_vfiprintf_r+0x220>)
 800e8d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8dc:	2206      	movs	r2, #6
 800e8de:	f7f1 fc87 	bl	80001f0 <memchr>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d03f      	beq.n	800e966 <_vfiprintf_r+0x20a>
 800e8e6:	4b26      	ldr	r3, [pc, #152]	@ (800e980 <_vfiprintf_r+0x224>)
 800e8e8:	bb1b      	cbnz	r3, 800e932 <_vfiprintf_r+0x1d6>
 800e8ea:	9b03      	ldr	r3, [sp, #12]
 800e8ec:	3307      	adds	r3, #7
 800e8ee:	f023 0307 	bic.w	r3, r3, #7
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	9303      	str	r3, [sp, #12]
 800e8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f8:	443b      	add	r3, r7
 800e8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fc:	e76a      	b.n	800e7d4 <_vfiprintf_r+0x78>
 800e8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e902:	460c      	mov	r4, r1
 800e904:	2001      	movs	r0, #1
 800e906:	e7a8      	b.n	800e85a <_vfiprintf_r+0xfe>
 800e908:	2300      	movs	r3, #0
 800e90a:	3401      	adds	r4, #1
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	4619      	mov	r1, r3
 800e910:	f04f 0c0a 	mov.w	ip, #10
 800e914:	4620      	mov	r0, r4
 800e916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e91a:	3a30      	subs	r2, #48	@ 0x30
 800e91c:	2a09      	cmp	r2, #9
 800e91e:	d903      	bls.n	800e928 <_vfiprintf_r+0x1cc>
 800e920:	2b00      	cmp	r3, #0
 800e922:	d0c6      	beq.n	800e8b2 <_vfiprintf_r+0x156>
 800e924:	9105      	str	r1, [sp, #20]
 800e926:	e7c4      	b.n	800e8b2 <_vfiprintf_r+0x156>
 800e928:	fb0c 2101 	mla	r1, ip, r1, r2
 800e92c:	4604      	mov	r4, r0
 800e92e:	2301      	movs	r3, #1
 800e930:	e7f0      	b.n	800e914 <_vfiprintf_r+0x1b8>
 800e932:	ab03      	add	r3, sp, #12
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	462a      	mov	r2, r5
 800e938:	4b12      	ldr	r3, [pc, #72]	@ (800e984 <_vfiprintf_r+0x228>)
 800e93a:	a904      	add	r1, sp, #16
 800e93c:	4630      	mov	r0, r6
 800e93e:	f3af 8000 	nop.w
 800e942:	4607      	mov	r7, r0
 800e944:	1c78      	adds	r0, r7, #1
 800e946:	d1d6      	bne.n	800e8f6 <_vfiprintf_r+0x19a>
 800e948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e94a:	07d9      	lsls	r1, r3, #31
 800e94c:	d405      	bmi.n	800e95a <_vfiprintf_r+0x1fe>
 800e94e:	89ab      	ldrh	r3, [r5, #12]
 800e950:	059a      	lsls	r2, r3, #22
 800e952:	d402      	bmi.n	800e95a <_vfiprintf_r+0x1fe>
 800e954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e956:	f7ff fddd 	bl	800e514 <__retarget_lock_release_recursive>
 800e95a:	89ab      	ldrh	r3, [r5, #12]
 800e95c:	065b      	lsls	r3, r3, #25
 800e95e:	f53f af1f 	bmi.w	800e7a0 <_vfiprintf_r+0x44>
 800e962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e964:	e71e      	b.n	800e7a4 <_vfiprintf_r+0x48>
 800e966:	ab03      	add	r3, sp, #12
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	462a      	mov	r2, r5
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <_vfiprintf_r+0x228>)
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4630      	mov	r0, r6
 800e972:	f000 f879 	bl	800ea68 <_printf_i>
 800e976:	e7e4      	b.n	800e942 <_vfiprintf_r+0x1e6>
 800e978:	0800eff4 	.word	0x0800eff4
 800e97c:	0800effe 	.word	0x0800effe
 800e980:	00000000 	.word	0x00000000
 800e984:	0800e737 	.word	0x0800e737
 800e988:	0800effa 	.word	0x0800effa

0800e98c <_printf_common>:
 800e98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e990:	4616      	mov	r6, r2
 800e992:	4698      	mov	r8, r3
 800e994:	688a      	ldr	r2, [r1, #8]
 800e996:	690b      	ldr	r3, [r1, #16]
 800e998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e99c:	4293      	cmp	r3, r2
 800e99e:	bfb8      	it	lt
 800e9a0:	4613      	movlt	r3, r2
 800e9a2:	6033      	str	r3, [r6, #0]
 800e9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9a8:	4607      	mov	r7, r0
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	b10a      	cbz	r2, 800e9b2 <_printf_common+0x26>
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	6033      	str	r3, [r6, #0]
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	0699      	lsls	r1, r3, #26
 800e9b6:	bf42      	ittt	mi
 800e9b8:	6833      	ldrmi	r3, [r6, #0]
 800e9ba:	3302      	addmi	r3, #2
 800e9bc:	6033      	strmi	r3, [r6, #0]
 800e9be:	6825      	ldr	r5, [r4, #0]
 800e9c0:	f015 0506 	ands.w	r5, r5, #6
 800e9c4:	d106      	bne.n	800e9d4 <_printf_common+0x48>
 800e9c6:	f104 0a19 	add.w	sl, r4, #25
 800e9ca:	68e3      	ldr	r3, [r4, #12]
 800e9cc:	6832      	ldr	r2, [r6, #0]
 800e9ce:	1a9b      	subs	r3, r3, r2
 800e9d0:	42ab      	cmp	r3, r5
 800e9d2:	dc26      	bgt.n	800ea22 <_printf_common+0x96>
 800e9d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e9d8:	6822      	ldr	r2, [r4, #0]
 800e9da:	3b00      	subs	r3, #0
 800e9dc:	bf18      	it	ne
 800e9de:	2301      	movne	r3, #1
 800e9e0:	0692      	lsls	r2, r2, #26
 800e9e2:	d42b      	bmi.n	800ea3c <_printf_common+0xb0>
 800e9e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e9e8:	4641      	mov	r1, r8
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	47c8      	blx	r9
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	d01e      	beq.n	800ea30 <_printf_common+0xa4>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	6922      	ldr	r2, [r4, #16]
 800e9f6:	f003 0306 	and.w	r3, r3, #6
 800e9fa:	2b04      	cmp	r3, #4
 800e9fc:	bf02      	ittt	eq
 800e9fe:	68e5      	ldreq	r5, [r4, #12]
 800ea00:	6833      	ldreq	r3, [r6, #0]
 800ea02:	1aed      	subeq	r5, r5, r3
 800ea04:	68a3      	ldr	r3, [r4, #8]
 800ea06:	bf0c      	ite	eq
 800ea08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea0c:	2500      	movne	r5, #0
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	bfc4      	itt	gt
 800ea12:	1a9b      	subgt	r3, r3, r2
 800ea14:	18ed      	addgt	r5, r5, r3
 800ea16:	2600      	movs	r6, #0
 800ea18:	341a      	adds	r4, #26
 800ea1a:	42b5      	cmp	r5, r6
 800ea1c:	d11a      	bne.n	800ea54 <_printf_common+0xc8>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	e008      	b.n	800ea34 <_printf_common+0xa8>
 800ea22:	2301      	movs	r3, #1
 800ea24:	4652      	mov	r2, sl
 800ea26:	4641      	mov	r1, r8
 800ea28:	4638      	mov	r0, r7
 800ea2a:	47c8      	blx	r9
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	d103      	bne.n	800ea38 <_printf_common+0xac>
 800ea30:	f04f 30ff 	mov.w	r0, #4294967295
 800ea34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea38:	3501      	adds	r5, #1
 800ea3a:	e7c6      	b.n	800e9ca <_printf_common+0x3e>
 800ea3c:	18e1      	adds	r1, r4, r3
 800ea3e:	1c5a      	adds	r2, r3, #1
 800ea40:	2030      	movs	r0, #48	@ 0x30
 800ea42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea46:	4422      	add	r2, r4
 800ea48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea50:	3302      	adds	r3, #2
 800ea52:	e7c7      	b.n	800e9e4 <_printf_common+0x58>
 800ea54:	2301      	movs	r3, #1
 800ea56:	4622      	mov	r2, r4
 800ea58:	4641      	mov	r1, r8
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	47c8      	blx	r9
 800ea5e:	3001      	adds	r0, #1
 800ea60:	d0e6      	beq.n	800ea30 <_printf_common+0xa4>
 800ea62:	3601      	adds	r6, #1
 800ea64:	e7d9      	b.n	800ea1a <_printf_common+0x8e>
	...

0800ea68 <_printf_i>:
 800ea68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea6c:	7e0f      	ldrb	r7, [r1, #24]
 800ea6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea70:	2f78      	cmp	r7, #120	@ 0x78
 800ea72:	4691      	mov	r9, r2
 800ea74:	4680      	mov	r8, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	469a      	mov	sl, r3
 800ea7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea7e:	d807      	bhi.n	800ea90 <_printf_i+0x28>
 800ea80:	2f62      	cmp	r7, #98	@ 0x62
 800ea82:	d80a      	bhi.n	800ea9a <_printf_i+0x32>
 800ea84:	2f00      	cmp	r7, #0
 800ea86:	f000 80d1 	beq.w	800ec2c <_printf_i+0x1c4>
 800ea8a:	2f58      	cmp	r7, #88	@ 0x58
 800ea8c:	f000 80b8 	beq.w	800ec00 <_printf_i+0x198>
 800ea90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea98:	e03a      	b.n	800eb10 <_printf_i+0xa8>
 800ea9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea9e:	2b15      	cmp	r3, #21
 800eaa0:	d8f6      	bhi.n	800ea90 <_printf_i+0x28>
 800eaa2:	a101      	add	r1, pc, #4	@ (adr r1, 800eaa8 <_printf_i+0x40>)
 800eaa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eaa8:	0800eb01 	.word	0x0800eb01
 800eaac:	0800eb15 	.word	0x0800eb15
 800eab0:	0800ea91 	.word	0x0800ea91
 800eab4:	0800ea91 	.word	0x0800ea91
 800eab8:	0800ea91 	.word	0x0800ea91
 800eabc:	0800ea91 	.word	0x0800ea91
 800eac0:	0800eb15 	.word	0x0800eb15
 800eac4:	0800ea91 	.word	0x0800ea91
 800eac8:	0800ea91 	.word	0x0800ea91
 800eacc:	0800ea91 	.word	0x0800ea91
 800ead0:	0800ea91 	.word	0x0800ea91
 800ead4:	0800ec13 	.word	0x0800ec13
 800ead8:	0800eb3f 	.word	0x0800eb3f
 800eadc:	0800ebcd 	.word	0x0800ebcd
 800eae0:	0800ea91 	.word	0x0800ea91
 800eae4:	0800ea91 	.word	0x0800ea91
 800eae8:	0800ec35 	.word	0x0800ec35
 800eaec:	0800ea91 	.word	0x0800ea91
 800eaf0:	0800eb3f 	.word	0x0800eb3f
 800eaf4:	0800ea91 	.word	0x0800ea91
 800eaf8:	0800ea91 	.word	0x0800ea91
 800eafc:	0800ebd5 	.word	0x0800ebd5
 800eb00:	6833      	ldr	r3, [r6, #0]
 800eb02:	1d1a      	adds	r2, r3, #4
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6032      	str	r2, [r6, #0]
 800eb08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb10:	2301      	movs	r3, #1
 800eb12:	e09c      	b.n	800ec4e <_printf_i+0x1e6>
 800eb14:	6833      	ldr	r3, [r6, #0]
 800eb16:	6820      	ldr	r0, [r4, #0]
 800eb18:	1d19      	adds	r1, r3, #4
 800eb1a:	6031      	str	r1, [r6, #0]
 800eb1c:	0606      	lsls	r6, r0, #24
 800eb1e:	d501      	bpl.n	800eb24 <_printf_i+0xbc>
 800eb20:	681d      	ldr	r5, [r3, #0]
 800eb22:	e003      	b.n	800eb2c <_printf_i+0xc4>
 800eb24:	0645      	lsls	r5, r0, #25
 800eb26:	d5fb      	bpl.n	800eb20 <_printf_i+0xb8>
 800eb28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb2c:	2d00      	cmp	r5, #0
 800eb2e:	da03      	bge.n	800eb38 <_printf_i+0xd0>
 800eb30:	232d      	movs	r3, #45	@ 0x2d
 800eb32:	426d      	negs	r5, r5
 800eb34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb38:	4858      	ldr	r0, [pc, #352]	@ (800ec9c <_printf_i+0x234>)
 800eb3a:	230a      	movs	r3, #10
 800eb3c:	e011      	b.n	800eb62 <_printf_i+0xfa>
 800eb3e:	6821      	ldr	r1, [r4, #0]
 800eb40:	6833      	ldr	r3, [r6, #0]
 800eb42:	0608      	lsls	r0, r1, #24
 800eb44:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb48:	d402      	bmi.n	800eb50 <_printf_i+0xe8>
 800eb4a:	0649      	lsls	r1, r1, #25
 800eb4c:	bf48      	it	mi
 800eb4e:	b2ad      	uxthmi	r5, r5
 800eb50:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb52:	4852      	ldr	r0, [pc, #328]	@ (800ec9c <_printf_i+0x234>)
 800eb54:	6033      	str	r3, [r6, #0]
 800eb56:	bf14      	ite	ne
 800eb58:	230a      	movne	r3, #10
 800eb5a:	2308      	moveq	r3, #8
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb62:	6866      	ldr	r6, [r4, #4]
 800eb64:	60a6      	str	r6, [r4, #8]
 800eb66:	2e00      	cmp	r6, #0
 800eb68:	db05      	blt.n	800eb76 <_printf_i+0x10e>
 800eb6a:	6821      	ldr	r1, [r4, #0]
 800eb6c:	432e      	orrs	r6, r5
 800eb6e:	f021 0104 	bic.w	r1, r1, #4
 800eb72:	6021      	str	r1, [r4, #0]
 800eb74:	d04b      	beq.n	800ec0e <_printf_i+0x1a6>
 800eb76:	4616      	mov	r6, r2
 800eb78:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb7c:	fb03 5711 	mls	r7, r3, r1, r5
 800eb80:	5dc7      	ldrb	r7, [r0, r7]
 800eb82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb86:	462f      	mov	r7, r5
 800eb88:	42bb      	cmp	r3, r7
 800eb8a:	460d      	mov	r5, r1
 800eb8c:	d9f4      	bls.n	800eb78 <_printf_i+0x110>
 800eb8e:	2b08      	cmp	r3, #8
 800eb90:	d10b      	bne.n	800ebaa <_printf_i+0x142>
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	07df      	lsls	r7, r3, #31
 800eb96:	d508      	bpl.n	800ebaa <_printf_i+0x142>
 800eb98:	6923      	ldr	r3, [r4, #16]
 800eb9a:	6861      	ldr	r1, [r4, #4]
 800eb9c:	4299      	cmp	r1, r3
 800eb9e:	bfde      	ittt	le
 800eba0:	2330      	movle	r3, #48	@ 0x30
 800eba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eba6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebaa:	1b92      	subs	r2, r2, r6
 800ebac:	6122      	str	r2, [r4, #16]
 800ebae:	f8cd a000 	str.w	sl, [sp]
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	aa03      	add	r2, sp, #12
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4640      	mov	r0, r8
 800ebba:	f7ff fee7 	bl	800e98c <_printf_common>
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d14a      	bne.n	800ec58 <_printf_i+0x1f0>
 800ebc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc6:	b004      	add	sp, #16
 800ebc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	f043 0320 	orr.w	r3, r3, #32
 800ebd2:	6023      	str	r3, [r4, #0]
 800ebd4:	4832      	ldr	r0, [pc, #200]	@ (800eca0 <_printf_i+0x238>)
 800ebd6:	2778      	movs	r7, #120	@ 0x78
 800ebd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ebdc:	6823      	ldr	r3, [r4, #0]
 800ebde:	6831      	ldr	r1, [r6, #0]
 800ebe0:	061f      	lsls	r7, r3, #24
 800ebe2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ebe6:	d402      	bmi.n	800ebee <_printf_i+0x186>
 800ebe8:	065f      	lsls	r7, r3, #25
 800ebea:	bf48      	it	mi
 800ebec:	b2ad      	uxthmi	r5, r5
 800ebee:	6031      	str	r1, [r6, #0]
 800ebf0:	07d9      	lsls	r1, r3, #31
 800ebf2:	bf44      	itt	mi
 800ebf4:	f043 0320 	orrmi.w	r3, r3, #32
 800ebf8:	6023      	strmi	r3, [r4, #0]
 800ebfa:	b11d      	cbz	r5, 800ec04 <_printf_i+0x19c>
 800ebfc:	2310      	movs	r3, #16
 800ebfe:	e7ad      	b.n	800eb5c <_printf_i+0xf4>
 800ec00:	4826      	ldr	r0, [pc, #152]	@ (800ec9c <_printf_i+0x234>)
 800ec02:	e7e9      	b.n	800ebd8 <_printf_i+0x170>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	f023 0320 	bic.w	r3, r3, #32
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	e7f6      	b.n	800ebfc <_printf_i+0x194>
 800ec0e:	4616      	mov	r6, r2
 800ec10:	e7bd      	b.n	800eb8e <_printf_i+0x126>
 800ec12:	6833      	ldr	r3, [r6, #0]
 800ec14:	6825      	ldr	r5, [r4, #0]
 800ec16:	6961      	ldr	r1, [r4, #20]
 800ec18:	1d18      	adds	r0, r3, #4
 800ec1a:	6030      	str	r0, [r6, #0]
 800ec1c:	062e      	lsls	r6, r5, #24
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	d501      	bpl.n	800ec26 <_printf_i+0x1be>
 800ec22:	6019      	str	r1, [r3, #0]
 800ec24:	e002      	b.n	800ec2c <_printf_i+0x1c4>
 800ec26:	0668      	lsls	r0, r5, #25
 800ec28:	d5fb      	bpl.n	800ec22 <_printf_i+0x1ba>
 800ec2a:	8019      	strh	r1, [r3, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	6123      	str	r3, [r4, #16]
 800ec30:	4616      	mov	r6, r2
 800ec32:	e7bc      	b.n	800ebae <_printf_i+0x146>
 800ec34:	6833      	ldr	r3, [r6, #0]
 800ec36:	1d1a      	adds	r2, r3, #4
 800ec38:	6032      	str	r2, [r6, #0]
 800ec3a:	681e      	ldr	r6, [r3, #0]
 800ec3c:	6862      	ldr	r2, [r4, #4]
 800ec3e:	2100      	movs	r1, #0
 800ec40:	4630      	mov	r0, r6
 800ec42:	f7f1 fad5 	bl	80001f0 <memchr>
 800ec46:	b108      	cbz	r0, 800ec4c <_printf_i+0x1e4>
 800ec48:	1b80      	subs	r0, r0, r6
 800ec4a:	6060      	str	r0, [r4, #4]
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	2300      	movs	r3, #0
 800ec52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec56:	e7aa      	b.n	800ebae <_printf_i+0x146>
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	4632      	mov	r2, r6
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	4640      	mov	r0, r8
 800ec60:	47d0      	blx	sl
 800ec62:	3001      	adds	r0, #1
 800ec64:	d0ad      	beq.n	800ebc2 <_printf_i+0x15a>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	079b      	lsls	r3, r3, #30
 800ec6a:	d413      	bmi.n	800ec94 <_printf_i+0x22c>
 800ec6c:	68e0      	ldr	r0, [r4, #12]
 800ec6e:	9b03      	ldr	r3, [sp, #12]
 800ec70:	4298      	cmp	r0, r3
 800ec72:	bfb8      	it	lt
 800ec74:	4618      	movlt	r0, r3
 800ec76:	e7a6      	b.n	800ebc6 <_printf_i+0x15e>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4632      	mov	r2, r6
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	4640      	mov	r0, r8
 800ec80:	47d0      	blx	sl
 800ec82:	3001      	adds	r0, #1
 800ec84:	d09d      	beq.n	800ebc2 <_printf_i+0x15a>
 800ec86:	3501      	adds	r5, #1
 800ec88:	68e3      	ldr	r3, [r4, #12]
 800ec8a:	9903      	ldr	r1, [sp, #12]
 800ec8c:	1a5b      	subs	r3, r3, r1
 800ec8e:	42ab      	cmp	r3, r5
 800ec90:	dcf2      	bgt.n	800ec78 <_printf_i+0x210>
 800ec92:	e7eb      	b.n	800ec6c <_printf_i+0x204>
 800ec94:	2500      	movs	r5, #0
 800ec96:	f104 0619 	add.w	r6, r4, #25
 800ec9a:	e7f5      	b.n	800ec88 <_printf_i+0x220>
 800ec9c:	0800f005 	.word	0x0800f005
 800eca0:	0800f016 	.word	0x0800f016

0800eca4 <__sflush_r>:
 800eca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecac:	0716      	lsls	r6, r2, #28
 800ecae:	4605      	mov	r5, r0
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	d454      	bmi.n	800ed5e <__sflush_r+0xba>
 800ecb4:	684b      	ldr	r3, [r1, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	dc02      	bgt.n	800ecc0 <__sflush_r+0x1c>
 800ecba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd48      	ble.n	800ed52 <__sflush_r+0xae>
 800ecc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecc2:	2e00      	cmp	r6, #0
 800ecc4:	d045      	beq.n	800ed52 <__sflush_r+0xae>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eccc:	682f      	ldr	r7, [r5, #0]
 800ecce:	6a21      	ldr	r1, [r4, #32]
 800ecd0:	602b      	str	r3, [r5, #0]
 800ecd2:	d030      	beq.n	800ed36 <__sflush_r+0x92>
 800ecd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	0759      	lsls	r1, r3, #29
 800ecda:	d505      	bpl.n	800ece8 <__sflush_r+0x44>
 800ecdc:	6863      	ldr	r3, [r4, #4]
 800ecde:	1ad2      	subs	r2, r2, r3
 800ece0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ece2:	b10b      	cbz	r3, 800ece8 <__sflush_r+0x44>
 800ece4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ece6:	1ad2      	subs	r2, r2, r3
 800ece8:	2300      	movs	r3, #0
 800ecea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecec:	6a21      	ldr	r1, [r4, #32]
 800ecee:	4628      	mov	r0, r5
 800ecf0:	47b0      	blx	r6
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	89a3      	ldrh	r3, [r4, #12]
 800ecf6:	d106      	bne.n	800ed06 <__sflush_r+0x62>
 800ecf8:	6829      	ldr	r1, [r5, #0]
 800ecfa:	291d      	cmp	r1, #29
 800ecfc:	d82b      	bhi.n	800ed56 <__sflush_r+0xb2>
 800ecfe:	4a2a      	ldr	r2, [pc, #168]	@ (800eda8 <__sflush_r+0x104>)
 800ed00:	40ca      	lsrs	r2, r1
 800ed02:	07d6      	lsls	r6, r2, #31
 800ed04:	d527      	bpl.n	800ed56 <__sflush_r+0xb2>
 800ed06:	2200      	movs	r2, #0
 800ed08:	6062      	str	r2, [r4, #4]
 800ed0a:	04d9      	lsls	r1, r3, #19
 800ed0c:	6922      	ldr	r2, [r4, #16]
 800ed0e:	6022      	str	r2, [r4, #0]
 800ed10:	d504      	bpl.n	800ed1c <__sflush_r+0x78>
 800ed12:	1c42      	adds	r2, r0, #1
 800ed14:	d101      	bne.n	800ed1a <__sflush_r+0x76>
 800ed16:	682b      	ldr	r3, [r5, #0]
 800ed18:	b903      	cbnz	r3, 800ed1c <__sflush_r+0x78>
 800ed1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed1e:	602f      	str	r7, [r5, #0]
 800ed20:	b1b9      	cbz	r1, 800ed52 <__sflush_r+0xae>
 800ed22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed26:	4299      	cmp	r1, r3
 800ed28:	d002      	beq.n	800ed30 <__sflush_r+0x8c>
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	f7ff fbf4 	bl	800e518 <_free_r>
 800ed30:	2300      	movs	r3, #0
 800ed32:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed34:	e00d      	b.n	800ed52 <__sflush_r+0xae>
 800ed36:	2301      	movs	r3, #1
 800ed38:	4628      	mov	r0, r5
 800ed3a:	47b0      	blx	r6
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	1c50      	adds	r0, r2, #1
 800ed40:	d1c9      	bne.n	800ecd6 <__sflush_r+0x32>
 800ed42:	682b      	ldr	r3, [r5, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d0c6      	beq.n	800ecd6 <__sflush_r+0x32>
 800ed48:	2b1d      	cmp	r3, #29
 800ed4a:	d001      	beq.n	800ed50 <__sflush_r+0xac>
 800ed4c:	2b16      	cmp	r3, #22
 800ed4e:	d11e      	bne.n	800ed8e <__sflush_r+0xea>
 800ed50:	602f      	str	r7, [r5, #0]
 800ed52:	2000      	movs	r0, #0
 800ed54:	e022      	b.n	800ed9c <__sflush_r+0xf8>
 800ed56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed5a:	b21b      	sxth	r3, r3
 800ed5c:	e01b      	b.n	800ed96 <__sflush_r+0xf2>
 800ed5e:	690f      	ldr	r7, [r1, #16]
 800ed60:	2f00      	cmp	r7, #0
 800ed62:	d0f6      	beq.n	800ed52 <__sflush_r+0xae>
 800ed64:	0793      	lsls	r3, r2, #30
 800ed66:	680e      	ldr	r6, [r1, #0]
 800ed68:	bf08      	it	eq
 800ed6a:	694b      	ldreq	r3, [r1, #20]
 800ed6c:	600f      	str	r7, [r1, #0]
 800ed6e:	bf18      	it	ne
 800ed70:	2300      	movne	r3, #0
 800ed72:	eba6 0807 	sub.w	r8, r6, r7
 800ed76:	608b      	str	r3, [r1, #8]
 800ed78:	f1b8 0f00 	cmp.w	r8, #0
 800ed7c:	dde9      	ble.n	800ed52 <__sflush_r+0xae>
 800ed7e:	6a21      	ldr	r1, [r4, #32]
 800ed80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed82:	4643      	mov	r3, r8
 800ed84:	463a      	mov	r2, r7
 800ed86:	4628      	mov	r0, r5
 800ed88:	47b0      	blx	r6
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	dc08      	bgt.n	800eda0 <__sflush_r+0xfc>
 800ed8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda0:	4407      	add	r7, r0
 800eda2:	eba8 0800 	sub.w	r8, r8, r0
 800eda6:	e7e7      	b.n	800ed78 <__sflush_r+0xd4>
 800eda8:	20400001 	.word	0x20400001

0800edac <_fflush_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	690b      	ldr	r3, [r1, #16]
 800edb0:	4605      	mov	r5, r0
 800edb2:	460c      	mov	r4, r1
 800edb4:	b913      	cbnz	r3, 800edbc <_fflush_r+0x10>
 800edb6:	2500      	movs	r5, #0
 800edb8:	4628      	mov	r0, r5
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	b118      	cbz	r0, 800edc6 <_fflush_r+0x1a>
 800edbe:	6a03      	ldr	r3, [r0, #32]
 800edc0:	b90b      	cbnz	r3, 800edc6 <_fflush_r+0x1a>
 800edc2:	f7ff f9af 	bl	800e124 <__sinit>
 800edc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d0f3      	beq.n	800edb6 <_fflush_r+0xa>
 800edce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800edd0:	07d0      	lsls	r0, r2, #31
 800edd2:	d404      	bmi.n	800edde <_fflush_r+0x32>
 800edd4:	0599      	lsls	r1, r3, #22
 800edd6:	d402      	bmi.n	800edde <_fflush_r+0x32>
 800edd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edda:	f7ff fb9a 	bl	800e512 <__retarget_lock_acquire_recursive>
 800edde:	4628      	mov	r0, r5
 800ede0:	4621      	mov	r1, r4
 800ede2:	f7ff ff5f 	bl	800eca4 <__sflush_r>
 800ede6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ede8:	07da      	lsls	r2, r3, #31
 800edea:	4605      	mov	r5, r0
 800edec:	d4e4      	bmi.n	800edb8 <_fflush_r+0xc>
 800edee:	89a3      	ldrh	r3, [r4, #12]
 800edf0:	059b      	lsls	r3, r3, #22
 800edf2:	d4e1      	bmi.n	800edb8 <_fflush_r+0xc>
 800edf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edf6:	f7ff fb8d 	bl	800e514 <__retarget_lock_release_recursive>
 800edfa:	e7dd      	b.n	800edb8 <_fflush_r+0xc>

0800edfc <__swhatbuf_r>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	460c      	mov	r4, r1
 800ee00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee04:	2900      	cmp	r1, #0
 800ee06:	b096      	sub	sp, #88	@ 0x58
 800ee08:	4615      	mov	r5, r2
 800ee0a:	461e      	mov	r6, r3
 800ee0c:	da0d      	bge.n	800ee2a <__swhatbuf_r+0x2e>
 800ee0e:	89a3      	ldrh	r3, [r4, #12]
 800ee10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ee14:	f04f 0100 	mov.w	r1, #0
 800ee18:	bf14      	ite	ne
 800ee1a:	2340      	movne	r3, #64	@ 0x40
 800ee1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ee20:	2000      	movs	r0, #0
 800ee22:	6031      	str	r1, [r6, #0]
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	b016      	add	sp, #88	@ 0x58
 800ee28:	bd70      	pop	{r4, r5, r6, pc}
 800ee2a:	466a      	mov	r2, sp
 800ee2c:	f000 f848 	bl	800eec0 <_fstat_r>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	dbec      	blt.n	800ee0e <__swhatbuf_r+0x12>
 800ee34:	9901      	ldr	r1, [sp, #4]
 800ee36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ee3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ee3e:	4259      	negs	r1, r3
 800ee40:	4159      	adcs	r1, r3
 800ee42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee46:	e7eb      	b.n	800ee20 <__swhatbuf_r+0x24>

0800ee48 <__smakebuf_r>:
 800ee48:	898b      	ldrh	r3, [r1, #12]
 800ee4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee4c:	079d      	lsls	r5, r3, #30
 800ee4e:	4606      	mov	r6, r0
 800ee50:	460c      	mov	r4, r1
 800ee52:	d507      	bpl.n	800ee64 <__smakebuf_r+0x1c>
 800ee54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	6123      	str	r3, [r4, #16]
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	6163      	str	r3, [r4, #20]
 800ee60:	b003      	add	sp, #12
 800ee62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee64:	ab01      	add	r3, sp, #4
 800ee66:	466a      	mov	r2, sp
 800ee68:	f7ff ffc8 	bl	800edfc <__swhatbuf_r>
 800ee6c:	9f00      	ldr	r7, [sp, #0]
 800ee6e:	4605      	mov	r5, r0
 800ee70:	4639      	mov	r1, r7
 800ee72:	4630      	mov	r0, r6
 800ee74:	f7ff fbbc 	bl	800e5f0 <_malloc_r>
 800ee78:	b948      	cbnz	r0, 800ee8e <__smakebuf_r+0x46>
 800ee7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee7e:	059a      	lsls	r2, r3, #22
 800ee80:	d4ee      	bmi.n	800ee60 <__smakebuf_r+0x18>
 800ee82:	f023 0303 	bic.w	r3, r3, #3
 800ee86:	f043 0302 	orr.w	r3, r3, #2
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	e7e2      	b.n	800ee54 <__smakebuf_r+0xc>
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	6020      	str	r0, [r4, #0]
 800ee92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee96:	81a3      	strh	r3, [r4, #12]
 800ee98:	9b01      	ldr	r3, [sp, #4]
 800ee9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee9e:	b15b      	cbz	r3, 800eeb8 <__smakebuf_r+0x70>
 800eea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eea4:	4630      	mov	r0, r6
 800eea6:	f000 f81d 	bl	800eee4 <_isatty_r>
 800eeaa:	b128      	cbz	r0, 800eeb8 <__smakebuf_r+0x70>
 800eeac:	89a3      	ldrh	r3, [r4, #12]
 800eeae:	f023 0303 	bic.w	r3, r3, #3
 800eeb2:	f043 0301 	orr.w	r3, r3, #1
 800eeb6:	81a3      	strh	r3, [r4, #12]
 800eeb8:	89a3      	ldrh	r3, [r4, #12]
 800eeba:	431d      	orrs	r5, r3
 800eebc:	81a5      	strh	r5, [r4, #12]
 800eebe:	e7cf      	b.n	800ee60 <__smakebuf_r+0x18>

0800eec0 <_fstat_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4d07      	ldr	r5, [pc, #28]	@ (800eee0 <_fstat_r+0x20>)
 800eec4:	2300      	movs	r3, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	4611      	mov	r1, r2
 800eecc:	602b      	str	r3, [r5, #0]
 800eece:	f7f3 f948 	bl	8002162 <_fstat>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	d102      	bne.n	800eedc <_fstat_r+0x1c>
 800eed6:	682b      	ldr	r3, [r5, #0]
 800eed8:	b103      	cbz	r3, 800eedc <_fstat_r+0x1c>
 800eeda:	6023      	str	r3, [r4, #0]
 800eedc:	bd38      	pop	{r3, r4, r5, pc}
 800eede:	bf00      	nop
 800eee0:	2000266c 	.word	0x2000266c

0800eee4 <_isatty_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d06      	ldr	r5, [pc, #24]	@ (800ef00 <_isatty_r+0x1c>)
 800eee8:	2300      	movs	r3, #0
 800eeea:	4604      	mov	r4, r0
 800eeec:	4608      	mov	r0, r1
 800eeee:	602b      	str	r3, [r5, #0]
 800eef0:	f7f3 f947 	bl	8002182 <_isatty>
 800eef4:	1c43      	adds	r3, r0, #1
 800eef6:	d102      	bne.n	800eefe <_isatty_r+0x1a>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	b103      	cbz	r3, 800eefe <_isatty_r+0x1a>
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	2000266c 	.word	0x2000266c

0800ef04 <_sbrk_r>:
 800ef04:	b538      	push	{r3, r4, r5, lr}
 800ef06:	4d06      	ldr	r5, [pc, #24]	@ (800ef20 <_sbrk_r+0x1c>)
 800ef08:	2300      	movs	r3, #0
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	4608      	mov	r0, r1
 800ef0e:	602b      	str	r3, [r5, #0]
 800ef10:	f7f3 f950 	bl	80021b4 <_sbrk>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_sbrk_r+0x1a>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_sbrk_r+0x1a>
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	2000266c 	.word	0x2000266c

0800ef24 <_init>:
 800ef24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef26:	bf00      	nop
 800ef28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef2a:	bc08      	pop	{r3}
 800ef2c:	469e      	mov	lr, r3
 800ef2e:	4770      	bx	lr

0800ef30 <_fini>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	bf00      	nop
 800ef34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef36:	bc08      	pop	{r3}
 800ef38:	469e      	mov	lr, r3
 800ef3a:	4770      	bx	lr
